
  
   Si l'objet est à l'endroit
  Cette action est utilisée pour vérifier et voir s'il y a une collision avec une ou plusieurs instances d'un objet donné, l'instance actuelle étant placée en un point de la pièce, en fonction du masque de collision de l'instance appelante. L'action sera évaluée à true si une collision est détectée, ou false sinon. Vous donnez l'objet à vérifier et la position où "placer" l'instance pour effectuer la vérification - qui peut être une position absolue dans la room ou une position relative à l'instance.
    - et vous pouvez également cocher le drapeau Not pour vérifier s'il n'y a pas de collision à la position donnée, auquel cas l'action n'évaluera alors que true si aucune collision n' est trouvée, sinon elle évaluera false.
  Après avoir indiqué l'objet et la position, vous pouvez cocher/décocher l'option de renvoi de la liste. Si vous cochez cette option, l'action créera et remplira une structure de données avec toutes les instances en collision avec l'instance .
   toutes les instances en collision avec l'instance et définira la variable Target à l'ID de la liste DS. Si cette option n'est pas cochée, la variable Target sera uniquement définie sur une valeur inférieure à 0 si aucune collision n'est détectée, ou sur la valeur d'identification unique de l'une des instances de la collision (notez que si plusieurs instances sont en collision, vous n'avez aucun moyen de savoir quel ID d'instance sera renvoyé si vous n'utilisez pas de liste).
  Si vous avez choisi de renvoyer une liste - et que la variable Target n' est pas définie comme Temp - vous pouvez également sélectionner l'option Free Target. Lorsqu'elle est définie à true, la liste contenue dans la variable cible sera détruite et une nouvelle liste sera créée (et retournée à la variable cible) chaque fois que vous appelez l'action.
    une nouvelle liste sera créée (et renvoyée à la variable cible) chaque fois que vous appelez l'action. De cette façon, vous pouvez réutiliser la même variable sans vous soucier des fuites de mémoire, car si vous ne cochez pas l'option Free Target, vous devenez responsable de la destruction de la liste avant d'utiliser la variable.
    de détruire la liste avant de réutiliser la variable dans l'action. Notez qu'indépendamment du fait que cette option soit cochée ou non, si vous avez défini l'action sur Retourner une liste, alors la variable cible contiendra toujours un ID de liste,
    et en tant que telle, elle devra être libérée lorsque l'instance est détruite ou que la room se termine (vous pouvez utiliser l'événement Nettoyage pour cela, par exemple, avec l'action Free Data Structure ).
    Il est intéressant de noter que vous pouvez définir l'option Free Target pour utiliser une variable prédéfinie ou une expression et ainsi contrôler le moment où la structure de données de la liste est libérée en définissant la variable ailleurs (ou en ayant différents résultats pour l'expression)
    du moment que l'expression est évaluée à true/false.
  Enfin, vous fournissez la variable cible qui doit contenir la valeur retournée ou l'ID de la liste. Si vous marquez la variable cible devant contenir la valeur renvoyée comme étant une variable temporaire (locale), l'action créera cette variable pour contenir la valeur renvoyée uniquement jusqu'à la fin de l'événement.
    Dans ce cas, l'option Free Target ne fait rien et vous serez responsable de la destruction de la liste DS si cette option a été cochée. Si aucune variable cible n'est fournie et que l'option Liste de retour est cochée, aucune liste ne sera créée.
  IMPORTANT ! Les collisions ne seront enregistrées que pour les instances qui ont un masque de collision valide, c'est-à-dire qu'elles ont un sprite assigné au sprite_index, ou un sprite assigné au mask_index. Si l'une des instances de la
    la collision n'a pas de masque de collision, la collision ne sera pas détectée, indépendamment de ce que l'instance dessine à ce moment-là.
  Notez que pour ajouter des actions dans un bloc "if", elles doivent être déposées sur le côté de l' action, comme le montre l'image ci-dessous :
  
   
  Syntaxe de l'action :
  
  Arguments :
  
    
      
        Arguments
        Description
      
      
        Objet
        L'objet à vérifier pour les instances de
      
      
        x
        La position x à vérifier
      
      
        y
        La position y à vérifier
      
      
        Cible libre
        Peut être défini comme une variable ou une expression, ou défini comme vrai/faux pour contrôler la libération de la mémoire de la liste lors de la réutilisation d'une variable de liste.
      
      
        Cible
        La variable à cibler pour la valeur de retour de l'action
      
    
  
   
  Exemple :
  Le code du bloc d'action ci-dessus vérifie qu'il n'y a pas de collision avec des instances de l'objet "
    obj_Wall " à gauche et à droite et s'il en trouve une, il inverse la direction horizontale de l'instance appelante.
   
   
   
  
    
      
        Retour : Actions de collision
        Suivant : Si la forme de la collision
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

