
  
  Fonctions du script du bloc d'action
  L'un des actifs les plus importants du navigateur d'actifs est l'actif script. Les scripts sont des ressources spéciales dans la mesure où ils sont essentiellement des "conteneurs" pour des fonctions définies par l'utilisateur.
    pour les fonctions définies par l'utilisateur et ne sont pas eux-mêmes appelés directement par vous dans vos jeux. Tous les scripts ont une portée globale et seront exécutés automatiquement par GameMaker au démarrage de votre jeu.
    Vous pouvez donc les utiliser pour définir les variables et fonctions globales que vous souhaitez utiliser dans votre jeu.
  Chaque script DnD™peut se voir ajouter une ou plusieurs fonctions définies par l'utilisateur, et ces fonctions sont créées à l'aide de l'action Déclarer une nouvelle fonction:
  Les fonctions que vous définissez ici auront une portée globale et agiront à peu près comme n'importe quelle action DnD™intégrée.
    action, c'est-à-dire qu'elles peuvent prendre différentes valeurs - ou aucune - appeléesarguments (ou paramètres), puis effectuer une tâche, en renvoyant une valeur ou en ne renvoyant rien
    selon les besoins. Vous appelleriez ensuite la fonction dans vos jeux en utilisant l'action Function Call , qui ressemble à ceci :
  Pour créer un script DnD™, il suffit d'utiliser le bouton droit de la souris  n'importe où dans le navigateur d'actifs et de sélectionner Créer puis Script. Cela va créer un nouveau script DnD™et ouvrir la fenêtre de l'éditeur :
  Vous pouvez nommer le script en cliquant avec le bouton droit de la souris sur  dans le navigateur d'actifs et en sélectionnant Renommer ( ou en utilisant un double clic gauche lent ), mais notez que le nom du script doit être conforme aux règles générales des actifs.
    doit être conforme aux règles générales applicables aux ressources, c'est-à-dire qu'il doit commencer par une lettre et contenir uniquement des lettres, des chiffres ou le symbole "_" sous la barre. Votre script sera également pré-rempli avec une action Déclarer une nouvelle fonction,
    Vous pouvez ajouter d'autres déclarations de fonctions si nécessaire (un seul script peut contenir plusieurs fonctions, ce qui est utile pour regrouper des fonctions ayant une utilisation similaire ou connexe).
  Comme mentionné ci-dessus, vous pouvez passer un certain nombre d'arguments à une fonction, et elle les utilisera pour effectuer la tâche pour laquelle vous l'avez écrite. Pour mieux comprendre, prenez, par exemple, n'importe quelle action intégrée et réfléchissez à son fonctionnement... vous la placez dans un événement et fournissez un certain nombre de valeurs.
    vous la placez dans un événement et fournissez un certain nombre de valeurs et elle fera faire quelque chose à votre instance. Les fonctions définies par l'utilisateur sont exactement les mêmes, la seule différence étant que vous les écrivez.
  Lorsque vous définissez une nouvelle fonction, vous lui donnez un nom et vous définissez également le nom des arguments qu'elle prend, si elle en prend (les fonctions peuvent ne pas prendre d'arguments ou en prendre plusieurs, selon ce que vous voulez). Si vous donnez des noms d'arguments, ceux-ci seront alors
    utilisés dans les actions appelées par la fonction en tant que variables locales contenant les valeurs d'entrée de la fonction.
  Une bonne pratique consiste également à ajouter un commentaire pour l'action qui explique ce qu'elle fait, en suivant les règles de JS Doc. Par exemple, considérons cette fonction set_vec():
  Pour appeler le script ci-dessus, il suffit d'utiliser l'action Call Function,
    comme ceci :
  Non seulement vous pouvez passer des arguments dans une fonction, mais vous pouvez également demander à une fonction de retourner une valeur (en utilisant l'action Return).
    valeur (en utilisant l'action Return  ).
    Ainsi, vous pouvez les utiliser pour (par exemple) construire des méthodes de calcul ou renvoyer un ID d'instance après une détection de collision complexe ou tout autre chose. Notez cependant que l'utilisation de return met fin à la fonction, et qu'aucune action placée après l'utilisation de return ne sera exécutée.
    ne sera exécutée, ce qui signifie qu'une certaine réflexion doit être menée sur la façon dont vos fonctions sont structurées.
  Vous trouverez ci-dessous une fonction de glisser-déposer qui renvoie une valeur :
  
  La fonction ci-dessus vérifie simplement toutes les instances d'une pièce pour voir quel est leur object_index et si l'une d'entre elles est l'objet du joueur, la fonction renverra true (mettant fin à l'appel de la fonction) ou
    false . Vous appelleriez cette fonction comme ceci :
  Donc, nous appelons la fonction et lui faisons créer une variable temporaire (locale) pour stocker la valeur retournée (qui dans ce cas est soit soit ).
    (qui, dans ce cas, est soit true soit false), puis cette variable est vérifiée et une action est entreprise.
  Lorsque vous créez des fonctions pour vos scripts DnD™, vous pouvez utiliser toutes les mêmes actions que lorsque vous ajoutez des actions dans un événement d'objet, et vous pouvez même appeler des fonctions à partir de fonctions, et de cette façon créer un code d'action plus "modulaire". En construisant
    scripts avec des fonctions de cette manière peut vous faire gagner beaucoup de temps en créant les mêmes séquences d'action et peut également contribuer à rendre vos séquences d'action plus faciles à lire et à déboguer.
   
   
   
  
    
      
        Retour : Index
        Suivant : Changer DnD™en code
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

