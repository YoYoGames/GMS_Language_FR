
  
  Guide d'utilisation des shaders
  Lesshaders sont souvent utilisés pour créer de magnifiques effets graphiques dans les jeux. Ils font également partie des fonctions les plus avancées proposées par GameMaker Studio 2. Il est donc nécessaire que vous ayez une connaissance de base de la programmation et du fonctionnement de GameMaker Studio 2 
    avant de commencer à les utiliser.
  Alors, qu'est-ce qu'un shader? Au départ, ils ont été créés pour fournir un ombrage pour l'éclairage (d'où leur nom), mais ils sont maintenant utilisés pour produire une grande variété d'effets. Le code des shaders est similaire au code ordinaire, mais il est (presque toujours) exécuté par le GPU, et non par le CPU.
    le CPU. Cette différence s'accompagne de son propre ensemble de règles et de limitations, mais nous les aborderons plus tard.
  Chaque shader est composé de deux éléments distincts : un  shader de sommets et un  shader de  fragments (également appelé  shader de pixels). Commençons par le vertex shader. Chaque sprite est formé par un rectangle,
    mais les ordinateurs aiment dessiner des triangles, donc ces rectangles sont divisés en deux triangles (parfois appelés quad). Cela nous laisse six vertices (coins) par sprite, mais deux d'entre eux sont les mêmes, nous ne devons donc nous préoccuper que de quatre.
    Imaginons maintenant que nous ayons une boucle for qui passe en revue tous les sommets et exécute le code du vertex shader pour chacun d'entre eux. Cela nous permet de changer la position et la couleur du vertex avant de le passer au fragment shader puisque le vertex shader est exécuté
    plus tôt.
  Voici à quoi cela ressemblerait :
  Pour le fragment shader, vous pouvez imaginer la même boucle que précédemment, mais cette fois-ci, elle passe en revue chaque pixel de votre sprite.
    sprite, en vous donnant des informations telles que l'emplacement et la couleur de ce pixel. Dans le code de votre fragment shader, vous effectuez des opérations et des calculs pour déterminer la couleur de ce pixel et obtenir l'effet souhaité. Par exemple, si vous voulez qu'un shader fasse que
    votre sprite en noir et blanc, vous calculez la nuance de gris que chaque pixel doit avoir pour créer cet effet.
  Cela ressemblerait à quelque chose comme ça :
  La raison pour laquelle le code de shaders est généralement exécuté par le GPU est qu'il est plus efficace. Les processeurs modernes possèdent généralement
    de deux à huit cœurs. Chaque cœur peut effectuer une tâche à la fois, donc en tirant parti de plusieurs cœurs, nous pouvons effectuer autant de tâches simultanément. En revanche, les GPU modernes peuvent exécuter des milliers, voire des dizaines de milliers, de tâches en même temps.
    en même temps. Cela est utile pour les shaders car nous pouvons exécuter le code de shaders de milliers de pixels simultanément. La limitation réside dans le fait que nous n'avons accès qu'à l'état initial du sprite.
    aux autres pixels, car nous ne pouvons pas être sûrs que le code a déjà été exécuté sur eux.
  REMARQUE: GameMaker Studio 2 permet aux utilisateurs d'écrire des shaders en GLSL (OpenGL Shader Language), HLSL (High-level Shader Language, utilisé lors du travail avec DirectX) et GLSL ES (un sous-ensemble de GLSL commun aux appareils mobiles).
    GLSL qui est courant dans les appareils mobiles). Ici, nous utilisons GLSL ES comme langage de shaders car c'est celui qui offre la meilleure compatibilité entre les plateformes cibles. En général, c'est celui que vous souhaitez toujours utiliser, sauf si vous
    besoins très spécifiques et que vous compreniez les limites des autres langages de shaders. Les mathématiques et les techniques devraient être similaires entre les trois langages, à l'exception de quelques différences de syntaxe ici et là.
  Le vertex shader est exécuté en premier, et comme nous l'avons expliqué plus haut, il traite les sommets. Il est utilisé pour calculer les positions, les normales et les coordonnées de la texture. Ces shaders ne sont pas particulièrement utiles en 2D, puisque chaque sprite est généralement un carré.
    un carré, mais ils peuvent être utilisés pour faire de l'inclinaison, de la mise à l'échelle, etc... Ils deviennent beaucoup plus utiles en 3D pour les calculs d'éclairage et les déformations de maillage. Les fragment shaders sont beaucoup plus intéressants et c'est ce qui sera abordé ici, puisque le fragment shader est l'endroit où l'on obtient des informations sur la forme du sprite.
    est l'endroit où nous obtenons des informations sur nos textures et où nous pouvons modifier la couleur finale de chaque pixel de notre image.
   
  Variables d'ombrage 
  Si vous avez créé un shader dans GameMaker Studio 2, vous avez peut-être remarqué les mots-clés suivants dans le shader pass-through par défaut. Ces mots-clés aident le shader à comprendre l'objectif et la portée de chaque variable :
  
    Attribut: Ce sont des variables transmises par OpenGL au vertex shader. Elles peuvent changer par sommet et sont en lecture seule. Elles comprennent des informations telles que la position du sommet, les coordonnées de la texture, la couleur du sommet et la normale du sommet.
      normal.
    Variable: Ce sont des variables utilisées pour faire passer des données entre les vertex et fragment shaders. Elles peuvent être écrites dans le vertex shader, mais sont en lecture seule dans le fragment shader.
    Uniformes: Ce sont des variables qui changent par objet et qui sont transmises par l'utilisateur au shader. Elles peuvent être utilisées à la fois dans les vertex et les fragment shaders, mais sont en lecture seule.
  
  Vous verrez également l'utilisation de vec comme mot-clé. Il est utilisé pour identifier une variable vectorielle dans le shader et vous verrez bientôt que les vecteurs sont très importants lorsque vous travaillez avec des shaders . C'est pourquoi ils sont implémentés comme un type de base
    de base dans le GLSL. Si vous n'êtes pas familier avec eux, ils sont un terme mathématique représenté comme une matrice avec une seule colonne. En programmation, nous les représentons généralement comme un tableau où le nombre de composants correspond à la dimension. Les vecteurs à deux ou trois dimensions
    sont souvent utilisés pour les positions, les coordonnées de texture ou les couleurs sans canal alpha, tandis que les vecteurs quadridimensionnels sont utilisés pour les couleurs avec un canal alpha. Nous pouvons également préciser s'ils contiennent des booléens, des entiers ou des valeurs à virgule flottante. La syntaxe
    pour déclarer un vecteur est la suivante :
  vec2 firstVec ; // vecteur bidimensionnel de flottants vec3 secondVec ; // vecteur tridimensionnel de flottants vec4 thirdVec ; // vecteur quadridimensionnel de flottants
     bvec3 boolVec ; // vecteur tridimensionnel de booléens ivec4 intVec ; // vecteur quadridimensionnel de booléens
  Pour les initialiser, nous pouvons utiliser le constructeur pour créer le vecteur. Vous devez fournir le même nombre de valeurs que la longueur du vecteur, mais vous pouvez mélanger des scalaires et des vecteurs plus petits pour atteindre la longueur cible. Voici quelques exemples
    exemples de ceci :
  // Vecteur 2D simple avec 2 valeurs scalaires vec2 firstVec = vec2(2.0, 1.0) ; // Un vecteur 4D utilisant 2 scalaires et un vec2 pour créer les 4 valeurs vec4 secondVec = vec4(1.0, firstVec, 0.0) ; // Un vecteur 3D utilisant 1 composante d'un vec4 plus un
    vec2 pour créer les 3 valeurs vec3 thirdVec = vec3(secondVec.x, firstVec) ;
  Nous pouvons également leur assigner un autre vecteur de la même longueur (ou remuer le vecteur jusqu'à ce qu'il ait la bonne longueur, mais nous expliquerons cela dans un moment) :
  vec3 firstVec ; vec3 secondVec = firstVec ; vec4 thirdVec = secondVec.xyz ; vec2 fourthVec = thirdVec.zx ;
  Lorsque nous accédons aux composants d'un vecteur dans GLSL, nous avons quelques options. La plus basique est de traiter le vecteur comme un tableau et d'accéder aux composants en utilisant des crochets, comme ceci :
  vec4 myVec ; myVec[0] = 1.0 ; myVec[1] = 0.0 ; myVec[2] = 2.0 ; myVec[3] = 1.0 ;
  Cependant, il existe un autre moyen d'accéder aux composants avec la syntaxe suivante :
  vec4 myVec ; myVec.x = 1.0 ; myVec.y = 2.0 ;
  Cette méthode utilise les noms des composants à l'intérieur du vecteur pour y accéder. Vous pouvez utiliser x, y, z ou w pour obtenir la première, la deuxième, la troisième ou la quatrième composante, respectivement. Nous appelons cette méthode " swizzling" car la syntaxe suivante est également
    valide :
  vec4 firstVec ; vec3 secondVec = firstVec.xyz ; vec2 thirdVec = secondVec.zy ; vec4 fourthVec = thirdVec.yxxy ;
  Comme vous pouvez le constater, nous pouvons utiliser n'importe quelle combinaison de quatre lettres au maximum pour créer un vecteur de cette longueur. Nous ne pouvons pas tenter d'accéder à un composant qui serait hors limites (par exemple, essayer d'accéder à w dans secondVec ou
   thirdVec, puisqu'ils n'ont pas de quatrième composant). De plus, nous pouvons répéter des lettres et les utiliser dans n'importe quel ordre, à condition que la variable vectorielle à laquelle elle est affectée soit de la même taille que le nombre de lettres utilisées.
  Pour des raisons évidentes, lorsque vous utilisez swizzle pour définir les valeurs des composants, vous ne pouvez pas utiliser deux fois le même composant. Par exemple, l'exemple ci-dessous n'est pas valide car vous essayez de définir le même composant à deux valeurs différentes :
  monVec.xx = vec2(2.0, 3.0) ;
  Enfin, nous avons utilisé le site xyzw comme masque, ce qui est généralement le cas lorsqu'il s'agit de positions. Il existe deux autres ensembles de masques que vous pouvez utiliser : rgba (utilisé pour les couleurs), ou stpq (utilisé pour les coordonnées de texture). En interne, il n'y a aucune différence entre ces masques, et nous les utilisons uniquement pour rendre le code plus clair quant à ce que le vecteur représente dans ce cas. De plus, nous ne pouvons pas combiner des masques de type "swizzle" dans la même opération, donc
    ceci n'est pas valable :
  myVec = otherVec.ybp ;
  Cela fait beaucoup de définitions et d'informations, mais il est nécessaire de connaître ces éléments pour comprendre les shaders eux-mêmes.
   
  Création d'un shader
  Lorsque vous créez un shader dans GameMaker Studio 2, il ouvre deux fichiers pour vous : un vertex shader (.vsh) et un fragment shader (.fsh). Il s'agit du shader le plus basique que vous pouvez créer, qui prend un sprite,
    lit la texture, et colorie chaque pixel avec cette couleur. Si vous spécifiez des couleurs de vertex lors du dessin, ces couleurs se mélangeront à la texture.
  Parcourons le code d'un actif shader nouvellement créé et analysons-le, en commençant par le vertex shader.
  // Passthrough Vertex Shader attribut vec3 in_Position ; // (x,y,z) //attribut vec3 in_Normal ; // (x,y,z) inutilisé dans ce shader. attribut vec4 in_Colour ; // (r,g,b,a) attribut
    vec2 in_TextureCoord ; // (u,v)
     variable vec2 v_vTexcoord ; variable vec4 v_vColour ;
     void main() {
     vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0) ; gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos ;      v_vColour = in_Colour ; v_vTexcoord = in_TextureCoord ; }
  
  En dehors de la fonction principale, nous voyons quelques déclarations de variables et leurs qualificatifs. Les attributs nous sont donnés par GameMaker. Les variables sont créées par l'utilisateur pour transmettre cette information au fragment shader. Dans la fonction principale,
    nous avons les calculs pour trouver la position du vertex à l'écran :
  
    Tout d'abord, nous créons un vec4 et l'initialisons avec les composantes de la position, en ajoutant un comme quatrième composante. En algèbre linéaire, la convention veut que nous ajoutions un un à la quatrième composante si le vecteur représente un point, ou un zéro s'il représente un vecteur réel.
      un point, ou un zéro s'il représente un vecteur réel.
    Ensuite, nous devons ajouter cette quatrième composante pour la multiplier avec la matrice MATRIX_WORLD_VIEW_PROJECTION, qui est une matrice 4x4. Cette multiplication va projeter la position mondiale du vertex en coordonnées écran.
    Enfin, nous transmettons la couleur du vertex et les coordonnées de la texture au fragment shader par le biais de nos variables variables.
  
  Ce shader doit être laissé de côté si vous n'avez pas l'intention de jouer avec les positions des vertex et il ne sera utilisé dans aucun des exemples donnés ci-dessous car tous les effets montrés seront créés à l'aide du fragment shader.
  Jetons un coup d'oeil rapide au fragment shader maintenant :
  // Shader defragment de traversée variable vec2 v_vTexcoord ; variable vec4 v_vColour ;
     void main() {
     gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord ) ; }
  
  Comme expliqué précédemment, l'idée derrière un fragment shader est de retourner la couleur du pixel actuel. Ceci est fait en assignant à la variable gl_FragColor la valeur de la couleur finale. La fonction texture2D 
    prend une texture et un vec2 avec les coordonnées UV que vous voulez vérifier dans cette texture, qui renvoie un vec4 avec la couleur. Dans le shader de passage, tout ce que nous faisons est de saisir la couleur de la texture dans la coordonnée de ce pixel.
    la texture dans les coordonnées de ce pixel et la multiplier par la couleur du vertex associé à ce pixel.
  Maintenant que nous avons notre premier shader, tout ce que nous avons à faire pour le tester est de créer un objet et de lui attribuer un sprite, puis dans l'événement Draw de l'objet, vous définissez le shader comme ceci :
  // Événement de dessin shader_set(shdrColorOverlay) ;
     draw_self() ;
     shader_reset() ;
  
  Chaque appel de dessin effectué entre shader_set() et shader_reset() se verra appliquer un
    le shader lui sera appliqué. Ici, nous dessinons le sprite de l'objet avec notre shader passthrough :
  Comme vous l'avez sans doute deviné, cela ne change rien visuellement, car il s'agit d'un simple shader de passage
   shader. Cependant, les sections ci-dessous décrivent quelques étapes simples que vous pouvez suivre pour le modifier et changer la façon dont le sprite sera dessiné. Chaque section montre un shader différent que vous pouvez créer et utiliser dans vos projets, en expliquant les étapes requises pour les créer et pourquoi nous le faisons.
    pour les créer et pourquoi nous faisons les choses comme nous le faisons.
   
   Shader desuperposition de couleurs
  
    Nous pouvons maintenant éditer le shader de base pour faire quelque chose de différent. Nous ne toucherons pas à la partie vertex shader, et n'éditerons que le fragment shader , et pour commencer nous allons faire une opération très simple, qui est de faire en sorte que le shader dessine le sprite
      en utilisant la couleur rouge. Nous ferons cela en changeant simplement le gl_FragColor pour qu'il soit rouge, comme ceci :
    // Shader defragment de superposition de couleur void main() {
       gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0) ; }
    
    Cela nous donne le résultat suivant :
    Pas exactement ce que nous attendions ! Ce qu'il faut retenir, c'est que chaque sprite est en fait un rectangle,
      donc à moins de considérer la transparence - ce que nous n'avons pas fait - c'est le résultat que nous obtiendrons.
    NOTE: Dans l'image ci-dessus, le rectangle change de taille parce que l'espace "vide" autour du sprite de base a été automatiquement rogné lorsqu'il a été placé sur la page de texture par GameMaker .
      qui le composent sont de tailles différentes pour s'adapter à la taille rognée de l'image. Si vous désactivez cette option, vous aurez simplement un carré rouge immobile à l'écran.
    Plus haut, nous avons mentionné la fonction texture2D, et nous allons l'utiliser pour saisir la couleur du pixel sur lequel nous travaillons et en obtenir la transparence. La valeur de retour de texture2D est un
      vec4 , où les composants sont le rouge, le vert, le bleu et l'alpha, dans cet ordre. Nous pouvons accéder au canal alpha en mettant un point suivi d'un a ou d'un w après le nom de la variable. Cela correspond à RGBA et XYZW, respectivement.
    Voici le code mis à jour :
    // Color Overlay Fragment Shader varying vec2 v_vTexcoord ;
       void main() {
       vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord) ; gl_FragColor = vec4(1.0, 0.0, 0.0, texColor.a) ; }
    
    Nous assignons maintenant un nouveau vec4 à gl_FragColor, où le canal rouge est maximisé, les canaux vert et bleu sont à zéro et le canal alpha est le même que celui de la texture originale. La sortie ressemble à
      ressemble à ceci :
    Voilà ce que nous cherchions ! Nous avons remplacé la couleur de chaque pixel par du rouge, mais nous avons gardé
      le canal alpha intact.
    Devoir changer le shader à chaque fois que nous voulons utiliser une couleur différente n'est pas une bonne idée, d'autant plus que nous aurions besoin d'avoir un shader séparé pour chaque couleur que nous voulons. Au lieu de cela, nous allons transmettre les informations de couleur au shader en utilisant un uniforme.
      Pour ce faire, nous devons d'abord obtenir un pointeur vers l'uniforme. Nous le ferons dans l'événement Create de notre objet qui contient le sprite en ajoutant :
    // Créer un événement _uniColor = shader_get_uniform(shdrColorOverlay, "u_colour") ; _color = [1.0, 1.0, 0.0, 1.0] ;
    Tout ce que nous devons faire est d'appeler shader_get_uniform() pour obtenir un pointeur sur l'uniforme. Les paramètres que nous devons passer sont le shader
      (sans guillemets car nous voulons passer l'ID que GameMaker génère pour nous) et le nom de la variable de l'uniforme dans le shader, cette fois sous forme de chaîne. Ce nom doit correspondre exactement à celui du code du shader pour que cela fonctionne.
      pour que cela fonctionne. Nous avons également ajouté une variable de couleur afin que nous puissions la modifier au moment de l'exécution et qu'elle se souvienne de nos changements.
    Maintenant, le code dans notre événement de dessin sera légèrement modifié pour passer la variable uniforme.
    // Événement de dessin shader_set(shdrColorOverlay) ;
       shader_set_uniform_f_array(_uniColor, _color) ; draw_self() ;
       shader_reset() ;
    
    C'est le même code que précédemment, mais avant de dessiner quoi que ce soit, nous devons transmettre toutes les valeurs uniformes au shader. Dans ce cas, nous passons la couleur comme un tableau de flottants. Quant au shader, nous allons le modifier pour inclure l'uniforme et l'utiliser,
      ainsi il devient :
    // Shader defragment de superposition de couleurs varying vec2 v_vTexcoord ; uniform vec4 u_color ; void main() {
       vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord) ; gl_FragColor = vec4(u_color.rgb, texColor.a) ; }
    
    Nous déclarons une variable avec le même nom que dans le shader de création (u_color) et nous la passons comme les trois premières composantes du vecteur gl_FragColor, en profitant du swizzling. Si nous compilons
      nous devrions voir ceci :
    Maintenant le shader est beaucoup plus utile et réutilisable. C'est à vous d'ajouter des fonctionnalités supplémentaires.
      si vous avez besoin qu'il définisse la couleur (en utilisant la variable _color) pendant l 'exécution.
     
  
   Shadernoir et blanc
  
    Réaliser un shader noir et blanc est un excellent moyen d'en apprendre davantage sur le fonctionnement des shaders, et beaucoup de débutants commencent par essayer de le faire, car conceptuellement c'est assez simple : prendre chaque pixel et lui attribuer une nuance de gris. Mais est-ce simple ? Pas
      pas tout à fait...
    
    Lorsqu'on utilise la couleur RVB, si les trois composantes ont la même valeur, on obtient un ton gris. L'approche naïve de la création d'un shader pour utiliser cette idée serait d'additionner les trois canaux de couleur (rouge, vert et bleu), puis de les diviser par trois. Après
      Ensuite, vous assignez la valeur aux trois canaux, créant ainsi un ton gris. Voici à quoi ressemble ce shader de fragment :
    // Shader defragment noir et blanc vec2 variable v_vTexcoord ; vec4 variable v_vColour ;
       void main() {
       vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord) ; float gray = (texColor.r + texColor.g + texColor.b) / 3.0 ; gl_FragColor = v_vColour * vec4(gray, gray, gray, texColor.a) ; }
    
    Vous avez peut-être remarqué que dans le code gl_FragColor, nous multiplions vec4 avec une variable appelée v_vColour. Il s'agit d'une variable transmise par le
      vertex shader qui nous indique la couleur du vertex associé à ce pixel. C'est toujours une bonne idée de multiplier la couleur finale calculée par la couleur du vertex. Dans la plupart des cas, cela ne fera rien, mais si vous avez changé la couleur du vertex en GML,
      cela le reflétera (en utilisant des fonctions telles que draw_sprite_ext() ou draw_sprite_general() pour
      changer la image_blend).
    Quant à l'événement de tirage au sort, il est assez simple puisque nous n'avons pas d'uniforme à passer :
    // Événement de dessin shader_set(shdrBlackAndWhite) ;
       draw_self() ;
       shader_reset() ;
    
    Compilons et voyons ce que nous avons.
    C'est déjà très bien, non ? Eh bien, oui et non... il existe une solution plus "correcte", puisqu'au lieu
      d'additionner les composants et de les diviser par trois, nous multiplions chaque composant par les valeurs standard NTSC pour le noir et le blanc. Voici le code modifié du fragment shader:
    // Shader defragment noir et blanc variant vec2 v_vTexcoord ;
       void main() {
       vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord) ; float gray = dot(texColor.rgb, vec3(0.299, 0.587, 0.114)) ; gl_FragColor = vec4(gray, gray, gray, texColor.a) ; }
    
    Nous utilisons le produit scalaire comme raccourci pour multiplier chaque composant de texColor avec les pondérations correctes, puis les additionner. Si vous n'êtes pas familier avec le produit scalaire, c'est essentiellement ce qui se passe :
    float gray = (texColor.r * 0.299) + (texColor.g * 0.587) + (texColor.b * 0.114) ;
    Au final, cela ressemble beaucoup, mais c'est techniquement plus correct.
    
     
  
   Shaderarc-en-ciel
  
    Notre dernier exemple de shader est amusant et peut être utilisé pour ajouter de la vie au texte, aux boutons et à d'autres choses. Nous allons commencer simplement et ajouter des fonctionnalités progressivement, car ce shader est hautement personnalisable. Il y a beaucoup de choses à couvrir pour cet exemple,
      donc si vous vous sentez un peu perdu ou confus, veuillez revenir en arrière et relire certaines des sections ci-dessus.
    La première chose que nous voulons faire est de colorer les pixels avec chaque teinte, en fonction de la position horizontale du pixel. Pour ce faire, il faut définir la position x comme étant la teinte, puis convertir le format HSV (teinte, saturation, luminosité) en format RGB (rouge, vert,
      et bleu). Pour cela, nous devons écrire une fonction d'aide dans notre fragment shader qui prend les valeurs HSV et renvoie un vecteur RVB. Nous utiliserons une seule fonction qui fera cela sans avoir besoin d'aucune déclaration à l'adresse if,
      car l'utilisation de conditionnels dans le code du shader rend les shaders très lents et doit être évitée.
    Voici à quoi ressemble le shader à ce stade :
    // Fragment Shader variable vec2 v_vTexcoord ; variable vec4 v_vColour ;
       vec3 hsv2rgb(vec3 c)  {
       vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0) ; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www) ; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y) ; }
      
       void main() {
       vec3 col = vec3(v_vTexcoord.x, 1.0, 1.0) ; float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a ; gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha) ; }
    
    Il se passe un peu plus de choses ici que dans les exemples précédents, mais la plupart d'entre elles devraient être assez évidentes pour vous maintenant. Tout d'abord, il y a notre fonction hsv2rgb, qui prend un vec3 avec notre couleur HSV
      et renvoie une autre vec3 avec notre conversion RVB. Dans la fonction principale, nous commençons par créer notre couleur HSV, où la teinte est notre position x, et nous laissons la saturation et la luminosité à 1,0 pour le moment. Ensuite, nous récupérons
      l'alpha de la texture afin qu'elle ne colore que le personnage du sprite et non l'ensemble du rectangle du sprite (comme nous l'avons fait dans l'exemple de superposition de couleurs, ci-dessus). Enfin, nous définissons notre couleur de fragment comme étant notre couleur HSV convertie en RVB avec l'alpha, multipliée par la couleur de sommet (bonne pratique).
      par la couleur du sommet (c'est une bonne pratique de toujours faire cela).
    Quant à notre code de tirage, il est trivial pour l'instant :
    // Événement de dessin shader_set(shdrRainbow) ;
       draw_self() ;
       shader_reset() ;
    
    Voyons ce qu'on a :
    Nous sommes proches de ce que nous voulons, mais il y a un problème : nous ne voyons pas toutes les couleurs en même temps dans chaque image de l'animation.
      de l'animation, et les couleurs semblent changer de façon aléatoire. La raison en est que nous avons supposé que v_vTexcoord nous a donné les coordonnées du sprite, commençant dans le coin supérieur gauche (0,0) et finissant dans le coin inférieur droit
      (1,1), ce qui est standard dans les shaders. Cependant, pour des raisons d'optimisation, GameMaker regroupe autant de textures que possible dans ce que l'on appelle une page de texture. 
      c'est à cela que ressemble notre texture :
    Comme expliqué ci-dessus, v_vTexcoord nous donne les coordonnées absolues du sprite dans cette page de texture entière,
      mais ce que nous voulons, c'est une valeur comprise entre 0,0 et 1,0 qui ne couvre que notre sprite actuel. Ce processus est appelé normalisation (obtenir une valeur et la traduire en une plage de 0 à 1). Pour normaliser nos valeurs horizontales, nous devons connaître les valeurs de x0 et x1 dans le sprite actuel.
      valeurs de x0 et x1 dans l'image ci-dessus. Heureusement, GameMaker possède une fonction qui nous donne l'emplacement de chaque coin de notre sprite dans la page de texture. Tout d'abord, nous devons aller dans l'événement Create et créer un uniforme pour transmettre ces données à
      le shader:
    // Créer un événement _uniUV = shader_get_uniform(shdrRainbow, "u_uv") ;
    Et nous modifions l'événement draw pour obtenir les valeurs et les passer au shader:
    // Événement de dessin shader_set(shdrRainbow) ;
       var uv = sprite_get_uvs(sprite_index, image_index) ; shader_set_uniform_f(_uniUV, uv[0], uv[2]) ; draw_self() ;
       shader_reset() ;
    
    La fonction sprite_get_uvs() prend un sprite et un index, et renvoie un tableau avec des tonnes d'informations,
      comme les coordonnées de chaque coin, combien de pixels ont été coupés pour l'optimiser, etc. Nous sommes intéressés par deux de ces valeurs : les coordonnées gauche et droite du sprite, qui sont stockées respectivement dans uv[0] et uv[2]. Dans le fragment shader, nous allons maintenant utiliser ces valeurs pour calculer la position horizontale normalisée de la manière suivante :
    // Fragment Shader varying vec2 v_vTexcoord ; varying vec4 v_vColour ;
       uniform vec2 u_uv ;
       vec3 hsv2rgb(vec3 c)  {
       vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0) ; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www) ; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y) ; }
      
       void main() {
       float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]) ; vec3 col = vec3(pos, 1.0, 1.0) ; float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a ; gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha) ; }
    
    Ici, nous ajoutons la variable uniforme en haut du fichier avec le même nom que nous avons utilisé dans l'événement de création. Ensuite, nous calculons la position horizontale normalisée en translatant notre coordonnée actuelle x vers l'origine (
      v_vTexcoord.x - u_uv[0] ), puis nous la divisons par la largeur du sprite pour obtenir une valeur comprise entre 0 et 1 (u_uv[1] - u_uv[0]).
    Le résultat est :
    Nous y voilà ! C'est exactement ce que nous voulions. Nous pouvons voir toutes les couleurs du spectre à l'intérieur
      notre sprite.
    Cela peut vous satisfaire, mais nous pouvons nous amuser davantage avec ce shader. Et si nous ajoutions un décalage aux couleurs en fonction du temps pour produire du mouvement ? Pour ce faire, nous aurons besoin de deux variables supplémentaires pour la vitesse et le temps.
      Nous aurons également besoin de deux uniformes supplémentaires, un pour chacune des nouvelles variables, de sorte que l'événement Create devient :
    // Créer un événement _uniUV = shader_get_uniform(shdrRainbow, "u_uv") ; _uniTime = shader_get_uniform(shdrRainbow, "u_time") ; _uniSpeed = shader_get_uniform( shdrRainbow, "u_speed") ; _time = 0 ; _speed = 1.0 ;
    Nous devons également augmenter le temps à chaque image, donc dans le Step Event nous ajoutons :
    // Événement d'étape _time += 1 / room_speed ;
    Passons maintenant à l'événement draw pour envoyer ces uniformes au shader:
    // Événement de dessin shader_set(shdrRainbow) ;
       var uv = sprite_get_uvs(sprite_index, image_index) ; shader_set_uniform_f(_uniUV, uv[0], uv[2]) ; shader_set_uniform_f(_uniSpeed, _speed) ; shader_set_uniform_f(_uniTime, _time) ; draw_self() ;
       shader_reset() ;
    
    Enfin, nous allons retourner dans notre shader pour utiliser réellement ces variables maintenant. Ce que nous allons faire, c'est multiplier la vitesse par le temps et l'ajouter à la position, comme ceci :
    // Fragment Shader variable vec2 v_vTexcoord ; variable vec4 v_vColour ;
       uniforme vec2 u_uv ; uniforme float u_speed ; uniforme float u_time ;
       vec3 hsv2rgb(vec3 c)  {
       vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0) ; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www) ; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y) ; }
      
       void main() {
       float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]) ; vec3 col = vec3((u_time * u_speed) + pos, 1.0, 1.0) ; float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a ; gl_FragColor = v_vColour * vec4(hsv2rgb(col),
      alpha) ;
       }
    
    Si vous avez tout fait correctement, vous devriez voir quelque chose comme ceci :
    Pour terminer ce shader, nous allons ajouter quelques uniformes supplémentaires pour le personnaliser encore plus.
      Les deux premiers servent à contrôler la saturation et la luminosité. Le suivant, que nous appellerons "section", a pour fonction de permettre à l'utilisateur de passer un nombre entre zéro et un pour déterminer le pourcentage du spectre entier que nous voyons à un moment donné.
      à un moment donné. Enfin, nous ajouterons une variable appelée "mix", qui spécifiera dans quelle mesure nous voulons mélanger la couleur de notre shader avec la couleur de la texture originale (1.0 est tout arc-en-ciel, 0.0 est toute la texture). Comme toujours, commençons par ajouter les variables à
      l'événement Create :
    // Créer un événement _uniUV = shader_get_uniform(shdrRainbow, "u_uv") ; _uniTime = shader_get_uniform(shdrRainbow, "u_time") ; _uniSpeed = shader_get_uniform( shdrRainbow, "u_speed") ; _uniSection
         = shader_get_uniform(shdrRainbow, "u_section") ; _uniSaturation = shader_get_uniform(shdrRainbow, "u_saturation") ;  _uniBrightness = shader_get_uniform( shdrRainbow, "u_brightness") ; _uniMix =
     shader_get_uniform(shdrRainbow, "u_mix") ;
       _time = 0 ; _speed = 1.0 ; _section = 0.5 ; _saturation = 0.7 ; _brightness = 0.8 ; _mix = 0.5 ;
    Notre événement de tirage au sort change pour inclure ces uniformes comme ceci :
    // Événement de dessin shader_set(shdrRainbow) ;
       var uv = sprite_get_uvs(sprite_index, image_index) ; shader_set_uniform_f(_uniUV, uv[0], uv[2]) ; shader_set_uniform_f(_uniSpeed, _speed) ; shader_set_uniform_f(_uniTime, _time) ;  shader_set_uniform_f(_uniSaturation, _saturation) ; shader_set_uniform_f(_uniBrightness, _brightness) ; shader_set_uniform_f(_uniSection, _section) ; shader_set_uniform_f(_uniMix, _mix) ; draw_self() ;
       shader_reset() ;
    
    Comme pour le shader, nous devons passer la saturation et la luminosité à la couleur, ce qui affectera la couleur générée par notre fonction d'aide. La section doit être multipliée par notre position pour réduire la portée. Nous allons également saisir la texture entière
      afin de pouvoir calculer notre couleur finale en mélangeant la couleur de la texture avec la conversion RVB de notre couleur. Le dernier paramètre de la fonction mix détermine la quantité de la deuxième couleur que nous voulons ajouter. Ceci est notre code de shader final :
    // Fragment Shader varying vec2 v_vTexcoord ; varying vec4 v_vColour ;
       uniform vec2 u_uv ; uniform float u_speed ; uniform float u_time ; uniform float u_saturation ; uniform float u_brightness ; uniform float u_section ; Uniform float u_mix ;
       vec3 hsv2rgb(vec3 c)  {
       vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0) ; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www) ; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y) ; }
      
       void main() {
       float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]) ; vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord) ;       vec3 col = vec3(u_section * ((u_time * u_speed) + pos), u_saturation, u_brightness) ; vec4 finalCol = mix(texColor, vec4(hsv2rgb(col), texColor.a), u_mix) ;      gl_FragColor = v_vColour * finalCol ; }
    
    Et voici notre résultat final !
    
     
  
   
  C'est la fin de ce petit guide et vous devriez maintenant avoir une meilleure compréhension du fonctionnement des shaders et de certaines des utilisations qu'on peut en faire. Vous devriez prendre le temps de jouer avec les shaders que vous avez créés en suivant ce guide, et essayer de
    d'expérimenter avec eux pour faire d'autres choses - que diriez-vous de créer un shader de flou, ou un shader qui fait un écran monochrome de style gameboy ? - car les shaders sont un outil incroyablement puissant pour ajouter de la complexité visuelle et du style à vos jeux.
   
  YoYo Games tient à remercier Alejandro Hitti et Amazon pour nous avoir permis de reproduire ce guide. Vous pouvez trouver la version originale sur le blog des développeurs d'Amazon.
   
  
    
      
        Retour : Informations complémentaires
        Suivant : Guide des primitives et de la construction de sommets
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

