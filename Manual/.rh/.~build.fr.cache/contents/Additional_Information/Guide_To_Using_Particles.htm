
  
  Guide d'utilisation des particules
  Ce guide est destiné à ceux d'entre vous qui veulent comprendre comment utiliser et créer des particules. Cette page couvrira à la fois les fonctions duGameMaker Language et les actions de type
   Drag and Drop™ pour les particules, donc si vous n'avez jamais utilisé de particules auparavant, nous espérons que ce guide pourra vous aider à démarrer car elles sont très utiles et assez amusantes à réaliser.
    amusantes à réaliser.
  Avant d'aller plus loin, nous devrions probablement expliquer ce qu'est réellement une particule... Fondamentalement, une particule est une ressource graphique qui possède certaines propriétés définies par un système de particules. Ces propriétés ne peuvent pas être manipulées
    directement pour les particules individuelles , mais sont modifiées collectivement par le code ou les actions qui sont utilisés pour définir le système auquel il appartient. Ils sont très utiles pour créer de beaux effets flashy - ou des effets subtils et discrets - dans un jeu sans la surcharge du CPU.
    - dans un jeu sans la surcharge du processeur qu'implique l'utilisation d'instances.
  Nous avons mentionné les systèmes de particules, alors expliquons ce que c'est avant de continuer. Pensez à un système de particules comme à un conteneur que vous utiliserez pour contenir vos particules prêtes à être utilisées. Vous pouvez utiliser du code ou des actions pour définir l'aspect visuel des particules.
    particules, puis elles sont placées dans le "conteneur" (le système de particules) afin que vous puissiez le sortir et l'utiliser à tout moment et partout où vous en aurez besoin par la suite.
  Avant de mettre en place un système et de créer des particules, il est important de savoir quelques petites choses... La première est que la plupart du code d'un système de particules n'est appelé qu'une seule fois dans le jeu, généralement dans un type d'objet contrôleur dans la première pièce ou le premier niveau.
    Ce n'est pas toujours le cas, mais pour des raisons de simplicité, nous utiliserons ce scénario pour ce bref guide car c'est la façon la plus courante d'utiliser les particules. En effet, un système de particules, une fois créé, reste en mémoire et est prêt à être utilisé.
    Une fois créé, un système de particules reste en mémoire et est prêt à être utilisé à tout moment. Par conséquent, si vous le créez plus d'une fois, cela peut rapidement augmenter l'utilisation de la mémoire et provoquer un décalage important, voire même faire planter le jeu. Pour des raisons de simplicité, dans ce guide, vous allez créer
    un système de particules global qui peut être utilisé par n'importe quelle instance du jeu à tout moment.
   
  Créer un système de particules
  
    Pour commencer, vous devez définir le système de particules et lui donner un nom afin de pouvoir l'utiliser. Comme il s'agira d'un système global que tout objet pourra utiliser, vous le ferez dans un objet contrôleur ou dans une fonction d'initialisation exécutée au début du jeu.
      du jeu. Le GML ressemblerait à ceci :
    
    global.P_System = part_system_create_layer("Instance_Layer", false) ;
    Et en utilisant DnD™ :
    Notez que le nom de couche fourni doit être une couche valide dans la pièce où le système sera utilisé,
      sinon aucune particule ne sera visible. Notez également que nous avons mis le drapeau "persistant" (à la fois dans le code et dans DnD™) à false. Un système de particules persistant est un système qui "persiste" dans toutes les pièces sans avoir à le détruire et à le recréer pour chaque pièce.
      pour chaque pièce. Cependant, pour garder les choses simples pour ce guide, nous n'utiliserons pas la persistance.
    C'est donc le système créé, mais qu'en est-il des particules ? Nous devons les définir aussi, sinon le système est inutile et ne fait rien.
     
  
  Définir un type de particule
  
    Pour utiliser une particule dans un système, vous devez d'abord définir ses propriétés générales. Celles-ci sont comme les propriétés des objets, mais elles ne s'appliquent que de manière générale aux particules individuelles. Cela signifie que si vous donnez aux particules une vitesse de mouvement minimale de 1 et une vitesse de mouvement maximale de 2, toute particule créée dans un système sera considérée comme un objet.
      de 1 et une vitesse de mouvement maximale de 2, toute particule créée par le système aura une vitesse aléatoire entre 1 et 2 pixels par pas, et dans l'ensemble elle aura une vitesse moyenne de 1,5. Vous devez nommer et ajouter votre première particule au système
      système en utilisant le GML suivant dans le même objet que celui utilisé pour créer le système :
    
    global.Particle1 = part_type_create() ;
    Et pour ceux d'entre vous qui utilisent DnD™:
    Notez qu'en utilisant DnD™, nous cochons également l'option blend . Cela active le mélange additif pour la particule, dont nous parlerons un peu plus bas.
    Vous avez maintenant un système et une particule à y placer, mais vous n'êtes pas encore prêt à créer vos effets exceptionnels ! Vous devez encore définir les propriétés de la particule, c'est-à-dire son apparence - sa vitesse, sa rotation, son alpha etc... Il y a beaucoup de
      de détails qui peuvent être utilisés pour définir un effet de particule, donc ci-dessous un aperçu des paramètres les plus importants et ensuite un extrait de code et DnD™qui les utilise tous :
    
      shape: La forme de la particule est le sprite intégré qu'elle utilisera, la valeur par défaut étant la constante pt_shape_pixel. Il existe également une fonction permettant d'ajouter une particule personnalisée si nécessaire. part_type_sprite() -
        ou l'action Set Particle Sprite.
      taille: Définit les paramètres de taille pour le type de particule. Vous spécifiez la taille de départ minimale, la taille de départ maximale et l'augmentation de la taille à chaque étape (utilisez un nombre négatif pour une diminution de la taille). Il s'agit d'une valeur scalaire qui
        modifiera l'échelle x/y de l'image de base de manière égale.
      colour: Définit la couleur de la particule si une seule couleur est utilisée. Si deux ou trois couleurs sont fournies, il s'agira du mélange de couleurs, qui passera de l'une à l'autre au cours de sa durée de vie.
      alpha: Définit la valeur alpha de la particule entre 0 et 1. Si une seule valeur est passée, ce sera l'alpha de la particule, si deux ou trois valeurs sont passées, l'alpha se mélangera entre elles pendant la durée de vie de la particule.
        vie de la particule.
      speed: Définit les propriétés de vitesse pour le type de particule. Vous spécifiez une vitesse minimale et maximale et une valeur aléatoire entre les limites données est choisie lors de la création de la particule. Vous pouvez indiquer une augmentation de la vitesse à chaque étape,
        et même utiliser un nombre négatif pour ralentir la particule (la vitesse ne sera jamais inférieure à 0).
      direction: Définit les propriétés de direction pour le type de particule. Là encore, vous spécifiez un éventail de directions (en degrés dans le sens inverse des aiguilles d'une montre - 0 indique un mouvement vers la droite, 90 indique un mouvement vers le haut, etc...). Par exemple, pour laisser
        la particule se déplacer dans une direction aléatoire, vous choisirez un minimum de 0 et un maximum de 360 comme valeurs. Vous pouvez également spécifier une augmentation de la direction pour chaque étape (peut également être négative).
      orientation: Définit les propriétés d'angle d'orientation pour le type de particule. Vous spécifiez l'angle minimum, l'angle maximum et l'augmentation à chaque étape. Vous pouvez également indiquer si l'angle donné doit être relatif à la direction actuelle du mouvement ou absolu.
        Vous pouvez également indiquer si l'angle donné doit être relatif à la direction actuelle du mouvement ou absolu, par exemple, en définissant toutes les valeurs à 0 mais relatif à true, l'orientation de la particule suivra précisément la trajectoire de la particule.
      mélange: Définit s'il faut utiliser le mélange additif ou le mélange normal pour le type de particule. Ceci est défini dans une fonction lors de l'utilisation de GML et dans le cadre de l'initialisation de la particule lors de l'utilisation de DnD™. Le mélange additif
        signifie que les particules utiliseront le mode de fusion bm_add, leur donnant un aspect "lumineux" là où elles se chevauchent, et les mélangeant également avec tout ce qui est dessiné en dessous (sprites, arrière-plans, tuiles, etc...).
        - Très utile pour les effets de feu et de magie (par exemple), mais mieux vaut ne pas le faire pour quelque chose comme la fumée. Expérimentez pour voir les différences ! Notez que si vous activez cette option, le batching des textures sera interrompu lors de la création des particules.
        Il faut en tenir compte car cela peut affecter les performances, surtout sur les mobiles.
      vie: Définit les limites de la durée de vie, en pas (images de jeu) pour le type de particule. Comme les paramètres précédents, il y a une valeur minimale et maximale et les particules dureront un nombre aléatoire de pas dans ces valeurs. Ainsi, une durée de vie de 30
        min et 30 max fera que la particule existera pendant exactement 30 pas, mais une durée de vie de 20 min et 60 max fera que chaque particule existera pendant un nombre aléatoire de pas entre 20 et 60.
    
    Maintenant, avant de vous présenter le code pour définir la particule, parlonsun instant de "wiggle"... Croyez-le ou non, "wiggle" est une propriété de la particule et peut être défini pour plusieurs des paramètres ci-dessus
      individuellement. Lorsque vous voyez "wiggle" comme argument pour une fonction ou une action de particule, cela signifie que si vous placez un nombre entre 1 et 20, la particule va "s'agiter" ou fluctuer entre les valeurs min et max de la propriété,
      1 étant une oscillation lente et 20 une oscillation très rapide. Ainsi, une vitesse de particule minimale de 2 et maximale de 5 avec une oscillation de 20 oscillera très rapidement entre les vitesses minimale et maximale pendant la durée de vie de chaque particule créée.
    NOTE: Il existe d'autres propriétés mineures des particules que nous ne couvrons pas ici, afin de garder les choses aussi simples que possible pour commencer. Voir les pages appropriées pour les détails complets des propriétés des particules.
    Regardons maintenant un peu de code qui définit une particule :
    
    //Ceci définit la forme des particules part_type_shape(global.Particle1,pt_shape_pixel) ;
       //Ceci définit la taille part_type_size(global.Particle1,1,1,0,2) ;
       //Ceci définit sa couleur. Il existe trois codes différents pour cela part_type_color1(global.Particle1,c_white) ;
       /Ceci définit son alpha. Il existe trois codes différents pour cela part_type_alpha1(global.Particle1,1) ;
       //The particles speed part_type_speed(global.Particle1,0.50,2,-0.10,0) ;
       //The direction part_type_direction(global.Particle1,0,359,0,20) ;
       //Ceci modifie la rotation de la particule part_type_orientation(global.Particle1,0,0,0,0,true) ;
       /Ceci est le mode de fusion, soit additif, soit normal part_type_blend(global.Particle1,1) ;
       //C'est sa durée de vie en étapes part_type_life(global.Particle1,5,30) ;
    
    Pour créer cette même définition de particule dans DnD™, nous aurions besoin de ces actions :
    Voilà, c'est fait ! Nous avons maintenant défini nos particules et elles sont prêtes à être utilisées.
     
  
  Créer des particules directement dans le jeu
  
    Il y a deux façons de créer des particules, et chacune a ses avantages et ses inconvénients. Vous pouvez utiliser des émetteurs pour faire éclater les particules ou les faire ruisseler , ou vous pouvez créer des particules directement sur un point.
      Le choix de l'une ou l'autre dépend de ce que vous essayez de faire et de l'effet que vous voulez créer, mais nous allons commencer par la plus simple des deux, qui consiste à créer des particules directement. En GML, nous utiliserions la fonction suivante :
    
    part_particles_create(global.P_System, x, y, global.Particle1, 10) ;
    et dans DnD™ce serait :
    Ce seul code/action ci-dessus créera 10 particules aux coordonnées x/y données du type "Particle1".
      à partir de notre système global. C'est simple ! L'avantage de cette ligne de code/action est qu'elle peut être utilisée n'importe où sans problème. Par exemple, si vous la placez dans l'événement Global Left Pressed pour la souris d'un objet et que vous changez les valeurs x/y de la variable mouse_string.
      x/y pour la position mouse_x/y, cela créera des particules à la position de la souris chaque fois que vous appuyez sur le bouton. Ou si vous avez une fusée, vous pouvez placer ceci dans l'événement step et avoir des particules de fumée à chaque pas (bien que 1 ou 2 seraient probablement mieux que 10 !).
      2 serait probablement mieux que 10 !). Vous pouvez même lui faire créer des particules sur une zone en changeant les coordonnées x/y de façon aléatoire, par exemple :
    
    repeat(50) { var xx = x + 20 - random(40) ; var yy = y + 20 - random(40) ; part_particles_create(global.P_System, xx, yy, global.Particle1, 1) ; }
    Le code ci-dessus créera 50 particules à une position aléatoire dans une zone carrée de 40px.
      carré.
    
     
  
  Créer des particules avec des émetteurs
  
    Puisque nous avons expliqué la manière simple de créer des particules, passons maintenant à la manière légèrement plus complexe, qui consiste à utiliser des émetteurs . Les émetteurs sont une autre partie du système de particules qui doit être définie avant d'être utilisée.
      Nous allons donc créer un émetteur global, comme nous l'avons fait pour le système et les particules. Nous devons également décider si nous voulons avoir un émetteur statique (immobile) ou non et si nous allons faire éclater les particules ou les faire ruisseler .
      Nous devons également décider sur quelle zone et quel type de distribution l'émetteur va utiliser.
    Que signifie tout cela ? Eh bien, un emitter statique est un emitter que vous pouvez définir une fois et oublier car il ne bougera pas pendant toute la durée du jeu, par exemple : pensez à un feu de bois - il ne bouge pas, il émet juste des flammes et est donc statique.
      Il est donc statique, mais une boule de feu nécessite un émetteur dynamique et se déplace à travers l'écran. Pour ce qui est de l'éclatement ou du flux, un éclatement est une explosion ponctuelle de particules, tandis qu'un flux est un flux constant de particules à chaque étape.
      à chaque pas. En ce qui concerne la zone et la distribution, avec les émetteurs, vous pouvez définir une zone d'émission des particules (qui peut être un rectangle, une ellipse, un losange ou une ligne) ainsi que la courbe de distribution (gaussienne, gaussienne inverse ou linéaire).
    Les images suivantes illustrent les différents types de forme de zone disponibles pour les émetteurs :
     
     
     
     Et les courbes de distribution (linéaire, gaussienne et gaussienne inverse) sont illustrées ici :
    
    Vous trouverez ci-dessous un exemple du code et des actions nécessaires pour définir deux émetteurs, qui seraient normalement placés dans l'événement Create d'un objet contrôleur, juste après avoir défini le système de particules. L'un sera statique et diffusera des particules sur toute la
      de la pièce entière, tandis que l'autre sera dynamique et suivra la souris pour éclater tous les 30 pas à partir d'une petite ellipse :
     
    global.Particle1_Emitter1 = part_emitter_create(global.P_System) ; global.Particle1_Emitter2 = part_emitter_create(global.P_System) ;
       //Set up the area that will emit particles part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear) ; part_emitter_region(global.P_System, global.Particle1_Emitter2,
      mouse_x-10, mouse_x+10, mouse_y-10, mouse_y+10, ps_shape_ellipse, ps_distr_gaussien) ;
       //Set the first to stream 10 particles every step part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10) ;
       //Ceci peut maintenant être oublié car il fonctionnera jusqu'à ce qu'on lui dise d'arrêter... //Set the alarm[0] event to burst the emitter2 particles... alarm[0] = 30 ;
    Donc, ici nous créons deux émetteurs de particules qui sont assignés au système de particules que nous avons créé
      au départ. Les fonctions/actions pour créer ces émetteurs nous permettent de définir une zone dans la pièce sur laquelle ils émettront des particules, ainsi que de donner le type de particule à émettre, et la forme et la distribution à utiliser dans la zone définie. Les fonctions/actions de
      renvoient une valeur numérique, qui est la valeur d'identification de l'émetteur, et nous la stockons dans une variable afin de pouvoir utiliser d'autres fonctions d'émetteur pour cibler ces émetteurs.
    Maintenant, nous avons du code/DnD™ pour diffuser des particules (ces particules seront émises à chaque étape du jeu sans que nous ayons à faire quoi que ce soit d'autre), mais nous voulons aussi ajouter un événementAlarm[0] pour faire éclater les particules à des intervalles spécifiques.
      intervalles spécifiques :
    
    part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x - 10, mouse_x + 10, mouse_y - 10, mouse_y + 10, ps_shape_ellipse, ps_distr_gaussian) ; part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30) ; alarm[0] = 30 ;
    Une explosion de particules est simplement une explosion ponctuelle de particules provenant de l'émetteur, plutôt qu'un flux constant de particules à chaque étape du jeu.
      constant à chaque étape du jeu.
    Mais que faire si vous voulez que plusieurs objets émettent des particules ? Un émetteur global ne peut se trouver qu'à un seul endroit à la fois. Vous devrez donc créer des émetteurs locaux dans chaque objet. Ces émetteurs utiliseront toujours le système de particules global et toutes les particules
      qui s'y trouvent, mais ils peuvent avoir des formes et des tailles différentes et se déplacer avec l'objet, ce qui est idéal pour les fusées, les balles ou autres. Le code à utiliser est exactement le même que ci-dessus, mais sans le préfixe "global" devant le nom des émetteurs.
      devant les noms des émetteurs.
    C'est la création de particules traitée mais il y a une autre chose qui est très importante... Le nettoyage lorsque vous avez terminé avec eux.
     
  
  Le nettoyage
  
    Comme mentionné au début, une fois créé, un système de particules (et ses particules, émetteurs etc...) est stocké en mémoire pour une utilisation instantanée. Super, mais que se passe-t-il lorsque vous redémarrez le jeu ? Ou si votre joueur meurt et recommence la pièce ? Eh bien, si vous
      ne gérez pas le jeu correctement, vous obtenez une fuite de mémoire. C'est le cas lorsque quelque chose a été créé et utilise de la mémoire, mais a été "déréférencé", ce qui signifie que GameMaker n'y a plus accès. Ce genre de chose va
      Ce genre de chose va lentement consommer de la mémoire et provoquer un décalage dans votre jeu ou même bloquer l'ordinateur, provoquant un plantage de votre jeu, et c'est un problème assez courant chez les nouveaux utilisateurs de systèmes à particules.
    Comment éviter cela ? Eh bien, GameMaker Studio 2 dispose de GML et DnD™pour supprimer de la mémoire les systèmes de particules et leurs émetteurs et particules lorsqu'ils ne sont pas utilisés et avec un peu de planification lors de l'utilisation du code/des actions suivantes, vous pouvez facilement éviter
      ce problème potentiel.
    La première chose à faire est de décider où vous allez créer le système et comment vous allez l'utiliser. Vous pouvez créer un système global dans l'événement de début de partie d'un objet qui se trouve dans votre première pièce (comme un menu ou un écran titre),
      mais cela signifie que si vous redémarrez le jeu à l'aide de la fonction game_restart() il sera recréé et provoquera une fuite de mémoire. Ou vous
      pourriez créer un système local dans une instance de n'importe quelle room, mais là encore, si vous quittez la room, le système sera inaccessible et provoquera une fuite de mémoire. Pour éviter cela, vous devriez avoir quelque chose comme ceci dans la balise Événement de fin de partie      ou le Événement de nettoyage de votre objet :
    part_type_destroy(global.Particle1) ; part_emitter_destroy(global.P_System, global.Particle1_Emitter) ; part_emitter_destroy(global.P_System, global.Particle2_Emitter) ; part_system_destroy(global.P_System) ;
    
    Cela supprimera de la mémoire les particules, les émetteurs et le système définis, afin que vous puissiez redémarrer le jeu ou changer de pièce.
      le jeu ou changer de pièce. N'oubliez pas qu'après avoir réfléchi à l'endroit le plus approprié pour créer le système, pensez aussi à l'endroit le plus approprié pour détruire le système !
     
  
   
  Vous connaissez maintenant les bases des particules, des systèmes de particules et des émetteurs, et vous pouvez donc les ajouter à votre jeu ! Mais avant de vous précipiter et d'ajouter des effets de particules à tout, veuillez noter que si les particules sont moins gourmandes en ressources CPU que les instances, elles ne sont pas la solution à tout.
    Mais avant de vous précipiter et d'ajouter des effets de particules à tout, veuillez noter que si les particules sont moins gourmandes en CPU que les instances, elles ne sont pas la solution à tout, car elles provoquent un décalage si vous en avez des milliers à la fois. La meilleure chose à faire est d'expérimenter et de les utiliser avec précaution pour "étoffer" visuellement un jeu et lui donner un peu plus d'attrait sans en faire trop.
    l'utiliser.
   
   
  Titre de la liste déroulante
  
    Tapez le texte de votre liste déroulante ici
  
   
   
  
    
      
        Retour : Informations complémentaires
        Suivant : Guide d'utilisation des shaders
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

