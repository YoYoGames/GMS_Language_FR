
  
  Le système de fichiers
  Lorsque vous utilisez les fonctions du système de fichiers ou les fichiers inclus dans GameMaker Studio 2, il est essentiel de savoir exactement comment fonctionne le système de fichiers et ce qui se passe en coulisses.
    le système de fichiers fonctionne et ce qui se passe en coulisses. A cette fin, cette section est conçue pour expliquer et clarifier la manière exacte dont les choses sont stockées, où elles sont stockées et quelles peuvent être les limites ou les solutions de contournement de ce système.
    ce système.
  La première et la plus importante chose à noter à propos des fonctions de fichier est qu'elles sont limitées - en général et par défaut - au bac à sable. Cela signifie que GameMaker Studio 2 ne peut pas enregistrer ou charger des fichiers à partir d'un endroit qui ne fait pas partie du pack de jeu ou du stockage local de l'appareil sans l'intervention explicite de l'utilisateur, et même dans ce cas, cette intervention est limitée aux seules plates-formes cibles Windows, macOS et Ubuntu(Linux).
  IMPORTANT ! Il est toutefois possible de désactiver la mise en bac à sable sur les cibles de bureau(Windows, macOS et Ubuntu(Linux)) en cochant l'option Désactiver le bac à sable du système de fichiers dans les options de jeu de la plate-forme cible. Vous le faites à vos risques et périls, et bien que cela ouvre l'enregistrement et le chargement des fichiers et vous permette d'accéder aux fichiers n'importe où sur le système donné, il peut encore être limité par les permissions du système d'exploitation, et vous ne pourrez pas écrire
    dans le répertoire_programme dossier.
  Pour comprendre le bac à sable, il faut d'abord savoir qu'il existe deux zones distinctes pour les fichiers :
  
    Le lot de fichiers: il s'agit de l'endroit où sont stockés tous les fichiers emballés avec le jeu exécutable, y compris les fichiers que vous avez ajoutés à la liste d'actifs Fichiers inclus de l'IDE GameMaker Studio 2 (qui sont des fichiers externes que vous souhaitez emballer avec le jeu).
      sont les fichiers externes que vous souhaitez inclure dans le jeu).
    La zone de sauvegarde - il s'agit d'une zone de stockage du dispositif dans laquelle le jeu peut écrire en toute sécurité et le jeu a la garantie qu'il s'agit d'une zone accessible en écriture.
  
  Le schéma suivant peut vous aider à mieux visualiser cela :
  
  REMARQUE: Vous ne pouvez jamais écrire dans le répertoire du groupe de fichiers (programme).
  Lorsque votre jeu est mis en sandbox, les deux zones cibles - le répertoire bundle et la zone de stockage locale - sont disponibles sur chaque plate-forme cible, mais sur chacune d'elles, elles fonctionneront légèrement différemment. Cependant, GameMaker Studio 2 a fait abstraction de l'essentiel de ce qui peut et ne peut pas être fait.
    l'essence de ce qui peut et ne peut pas être fait, ce qui facilite le reciblage des jeux sur plusieurs environnements.
  Pour commencer, il faut comprendre ce que l'on entend quand on parle de la working_directory. Il s'agit d'un synonyme pour les deux
    emplacements de sauvegarde possibles (comme illustré par le diagramme ci-dessus) et lorsque vous utilisez ce répertoire, il fera l'une des deux choses suivantes, selon que vous êtes en train de lire ou d'écrire, et selon que le fichier que vous lisez a été modifié ou non :
  
    Opérations de lecture - working_directory vérifie d'abord la zone de sauvegarde pour voir si le fichier auquel on accède s'y trouve, et si c'est le cas, il l'utilise. Cependant, si le fichier n'existe pas dans la zone de sauvegarde, il vérifie alors la zone de regroupement des fichiers et l'utilise (si le fichier recherché est un fichier inclus dans votre jeu).
      et l'utilise (si le fichier recherché est un fichier inclus dans votre jeu).
    Opérations d'écriture - Cela ne peut se produire que dans la zone de sauvegarde.
  
  REMARQUE: en général, GameMaker Studio 2 se charge de tout cela pour vous et vous avez rarement besoin d'utiliser la variable intégrée working_directory.
  En utilisant ces deux règles simples, nous pouvons maintenant voir comment fonctionnent les fonctions suivantes (il s'agit d'exemples pour vous aider à visualiser le processus pour les différentes fonctions disponibles) :
  
    directory_create() (et les autres fonctions du répertoire) ne fonctionneront que dans la zone de sauvegarde .
    les fonctions du système de fichiers renverront des informations sur les fichiers à partir du paquet et de la zone de sauvegarde , mais n'écriront que dans la zone de sauvegarde.
      mais n'écriront que dans la zone de sauvegarde .
    les fonctions d'écriture de fichiers texte, binaires ou INI créeront un nouveau fichier dans la zone de sauvegarde s'il n'en existe pas déjà un, en copiant toutes les informations des fichiers originaux inclus dans le paquet de jeu s'ils existent.
      Notez que les fichiers originaux resteront dans la partie en lecture seule du répertoire de sauvegarde, mais ils ne seront pas référencés tant qu'une version existe dans la section en lecture/écriture de la zone de sauvegarde.
  
  Sur le Windows, macOS et Ubuntu(Linux), il existe deux façons de sauvegarder et de charger des fichiers depuis l'extérieur de la sandbox, soit en utilisant les fonctions get_open_filename() et
    get_save_filename() (ces deux fonctions exigent que l'utilisateur sélectionne une zone pour le chargement et la sauvegarde et la chaîne de retour
    peut alors être utilisée dans le reste des fonctions de fichiers pour contourner le bac à sable - voir les descriptions des fonctions dans la section langage du manuel pour plus de détails). L'autre moyen consiste à désactiver complètement le bac à sable à partir des options de jeu de la plate-forme cible (disponible uniquement pour les cibles de bureau, comme indiqué plus haut sur cette page).
  En HTML5, il est également possible de charger des fichiers depuis un serveur en dehors de la sandbox, mais cela ne doit être fait qu'en utilisant la fonction buffer_load_async() comme
    Le chargement synchrone a été déprécié sur la plupart des navigateurs et sera éventuellement obsolète. Cela signifie que les fichiers chargés de cette manière doivent être enregistrés en tant que fichiers binaires - par exemple, vous pouvez enregistrer un *.ini en tant que chaîne de caractères
    (voir ini_close() pour plus de détails), puis l'écrire dans un tampon qui peut ensuite être enregistré et chargé à l'aide des fonctions asynchrones. Notez
    que si vous chargez des images en utilisant sprite_add() celles-ci sont déjà traitées de manière asynchrone.
  Vous devez également savoir que chaque plateforme cible possède sa propre zone de sauvegarde dans laquelle les fichiers et les répertoires peuvent être écrits et lus. Vous trouverez ci-dessous une liste de ces zones pour chaque cible lorsqu'elle est en sandbox :
  
    Windows et Windows UWP: Windows a tous les fichiers dans le répertoire %localappdata%\<Game Name> (sur Windows 7, il s'agit du répertoire /Users/<User Name>/AppData/Local/<Game Name> ).
    HTML5: Tout se fait par le biais du stockage local.
    macOS: Le stockage dépendra du fait que l'application est sandboxée ou non (selon les règles d'Apple, le chemin étant généralement ~/Library/Application Support/<Game Name>).
    Ubuntu (Linux): Les fichiers sont stockés à l'adresse Home/.config/gamename où "Home" est le répertoire personnel de l'utilisateur. /home/<username>
    iOS / tvOS: Le stockage est l'emplacement standard (tel que vu par iTunes).
    Android: Les fichiers sont dans l'emplacement standard (qui est invisible sauf si l'appareil est rooté) /data/<package name>.
  
  Il convient de noter que le module cible HTML5 a une limite de stockage local (qui peut être comprise entre 1 et 5 Mo selon le navigateur), ce qui signifie que vous ne serez pas autorisé à enregistrer des sprites de grande taille, des captures d'écran, etc.
   
   
   
  
    
      
        Retour : Informations complémentaires
        Suivant : Opérateurs binaires et binaires
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

