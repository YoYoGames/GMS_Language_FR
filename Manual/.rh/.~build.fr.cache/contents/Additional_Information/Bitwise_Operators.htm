
  
  Opérateurs binaires et binaires
  Au début de l'ère informatique, le binaire et l'hexadécimal étaient un mode de vie, probablement parce que les langages de haut niveau (comme le BASIC) étaient tout simplement trop lents à exécuter. Par exemple, la multiplication de 32 x 32 aurait pu prendre
    plusieurs cycles d'unité centrale pour être réalisée en utilisant le BASIC, mais avec le binaire, elle est effectuée en une seule opération et en un seul cycle d'unité centrale.
  De nos jours, cependant, avec la puissance d'un PC de base, vous n'avez plus à vous soucier de cela et vous pouvez faire les choses à la "longue", puisque la vitesse de la machine et la construction plus complexe de son unité centrale compensent les inconvénients de cette approche.
    cette approche. C'est bien sûr une excellente nouvelle, car cela signifie que vous ne devez plus optimiser chaque ligne de code que vous écrivez, mais si c'est le cas, devez-vous vraiment vous soucier du binaire ?
  La réponse est sans aucun doute "oui, vous devriez". S'il est vrai que vous pouvez toujours obtenir des gains de vitesse - et ceux-ci peuvent parfois être significatifs - l'utilisation du binaire et de l'hexadécimal permet de mieux comprendre le fonctionnement du CPU et peut également conduire à l'écriture d'un meilleur code.
    d'écrire un meilleur code, d'être capable de mieux emballer les données et de simplifier certaines tâches. Cette page va vous expliquer un peu ce qu'est le binaire et comment il peut être utilisé dans vos jeux.
  Examinons d'abord la théorie binaire la plus élémentaire - comment les nombres sont créés. Jetez un coup d'oeil à ce tableau :
  000 = 0 001 = 1 010 = 2 100 = 4
  Chaque 1 ou 0 représente un seul bit de données, et comme vous pouvez le voir, cela signifie qu'en binaire, 10 est égal à 2 ! Chaque bit représente 2 fois la valeur précédente, le premier bit étant égal à 1. Donc le bit 2 = 2,
    bit 3 = 4, bit 4 = 8 et ainsi de suite (comme indiqué ci-dessous dans cette table d'octets ) :
  00000001 = 1 00000010 = 2 00000100 = 4 00001000 = 8 00010000 = 16 00100000 = 32 01000000 = 64 10000000 = 128
  C'est bien si vous voulez des nombres qui sont une puissance de 2, mais comment créer des nombres plus complexes ? Eh bien, un seul nombre binaire ne peut stocker qu'un 0 ou un 1, et c'est tout, donc pour des nombres plus complexes, nous devons ajouter des bits ensemble. Si par exemple nous
    voulions faire 6, nous ajouterions 4 et 2 ensemble comme ceci.
  00000010 = 2 00000100 = 4 00000110 = 6
  C'est le cas de tous les nombres binaires, et de la façon dont l'ordinateur compose tout nombre en interne. Prenons un nombre un peu plus compliqué comme autre exemple : 23. Le nombre 23 est en fait composé de 1+2+4+16 ou 00010111. Que diriez-vous d'un exemple beaucoup plus complexe : 196 ? Eh bien, il est composé de 128+64+4 ou 11000100. En fait, ce n'est pas si complexe que ça !
  Si l'on commence à utiliser des valeurs en dehors de la plage d'un octet (qui peut stocker des nombres de 0 à 255), le suivi devient toutefois un peu plus difficile. Par exemple, 217 361 est 110101000100010001 en binaire. Ou encore, 1+16+256+etc.... Les règles sont les mêmes quelle que soit la valeur exprimée - chaque nombre est créé par l'addition de plusieurs bits.
  Maintenant, comment effectuer des opérations mathématiques sur ces valeurs ? Disons que vous voulez stocker true ou false comme valeur. Habituellement, les compilateurs utilisent un INT (un
    INT est généralement défini comme un nombre signé de 32 bits - signé signifie simplement qu'il peut avoir une valeur positive ou négative, tandis que non signé signifie qu'il ne peut être que positif) et l'affectera simplement à 0 ou 1.
      N'ayant que 2 états, une valeur de true / false est idéale à stocker dans un bit, et si nous faisions cela, nous pourrions stocker 32 true / false bits pour chaque
      INT plutôt qu'un seul, puisqu'un INT est composé de 32 bits.
  Comment ferions-nous cela ? Assez facilement, en fait :
  flags = flags | 1 ;
  L'opérateur "|" est un bitwise OR, ce qui signifie que l'instruction ci-dessus ORs 1 dans la valeur contenue dans la variable flags. Si vous vous
    Si vous vous souvenez de ce qui s'est passé précédemment, l'utilisation d'un 1 activera le premier bit. Si nous voulions définir le deuxième bit, nous ferions ceci :
  flags = flags | 2 ;
  Nous avons OR en 2, car le motif binaire 00000010 est égal à 2. Alors que fait exactement l'opérateur binaire OR? Eh bien, il fusionne tous les bits en une seule valeur,
    comme ceci :
  010110100 // Valeur 1 110011001 // Valeur 2 110111101 // Valeur 1 OU Valeur 2
  Voici ce que l'on appelle une table de vérité pour l 'opérateur OR :
  00 | 00 = 00 00 | 01 = 01 01 | 01 = 01 01 | 00 = 01
  Donc, là où il y a une valeur avec 2 zéros, elle restera zéro. L'avantage d'utiliser des bits comme celui-ci comme un état true/false, est qu'ils vous permettent de définir plusieurs bits comme "drapeaux" en une seule opération,
    ce que vous ne pourriez pas faire avec une valeur booléenne normale. Par exemple, disons que le bit 1 est un drapeau "actif" et que le bit 3 est un drapeau "visible". Nous pourrions les activer tous les deux en faisant ceci :
  flags = flags | 5;
  C'est parce que 5 est 00000101 en binaire, et en suivant la règle ci-dessus, la variable "flags" obtiendra ces deux bits fusionnés avec les siens. Ainsi, même si le bit 1 était déjà activé, l'opération fonctionne toujours et le bit 3 sera également activé.
    et le bit 3 sera maintenant aussi activé.
  Et pour effacer les drapeaux ? C'est là qu'intervient l'opération "&" AND " bitwise ". Quand vous AND quelque chose, les bits qui sont mis dans le masque sont conservés,
    tandis que les bits qui sont clairs dans le masque, sont supprimés - comme ceci :
  01110010101 // Valeur 1 00110000100 // Valeur 2 00110000100 // Valeur 1 ET valeur 2
  Comme vous pouvez le voir, lorsqu'il y a un 1 dans chaque valeur, le 1 est conservé, et lorsqu'il y a un mélange de 0 et de 1, ceux-ci sont remis à 0. Voici la table de vérité pour AND:
  00 & 00 = 00 01 & 00 = 00 00 & 01 = 00 01 & 01 = 01
  Ainsi, ce n'est que lorsqu'il y a un bit à chaque endroit qu'il sera conservé. Ce que cela signifie, c'est que de la même manière que vous pouvez activer plusieurs drapeaux en même temps, vous pouvez également effacer plusieurs drapeaux en même temps. Par exemple, reprenons le cas ci-dessus, mais cette fois-ci en les effaçant.
    Nous voulons effacer les bits 1 et 3 (ce qui nous donne la valeur 5), mais en nous rappelant la table de vérité ci-dessus, nous voulons conserver tous les autres bits et effacer les bits 1 et 3. Ce serait un "masque" binaire de 11111111111111111111111111111010 (32bits).
    Ce masque conserve tous les bits actuellement activés, mais efface les deux bits que nous voulons réellement effacer. Donc si j'avais une valeur de 1000111011 et que je voulais effacer les bits 1 et 3 en utilisant le masque ci-dessus, cela donnerait ceci...
  0000000000000000001000111011 // Valeur 111111111111111111111111111010 // Masque 0000000000000000001000111010 // Valeur ET Masque
  C'est très bien, mais si nous devions le faire à chaque fois que nous avons besoin d'effacer des drapeaux, cela deviendrait fastidieux. Ce dont nous avons besoin, c'est d'un moyen de retourner les bits facilement (et de préférence sans coût pour le CPU). Heureusement, il existe un moyen simple de le faire en utilisant l'opérateur "
    ~ " NOT.
  L'opérateur NOT est exactement ce qu'il dit - pas ces bits. Voici une table de vérité pour NOT.
  ~00 = 11 ~01 = 10 ~10 = 01 ~11 = 00
  Cet opérateur rend la suppression des drapeaux très simple, et mieux encore, il s'agit généralement d'une optimisation au moment de la compilation, ce qui signifie que si vous utilisez un nombre constant (c'est-à-dire pas une variable), le compilateur inversera les bits automatiquement pour vous. Prenez cette instruction
    où nous voulons effacer à nouveau les bits 1 et 3 :
  a = a & ~5 ;
  Cela se résume en fait à "a & 11111111111111111111111111111010". Cela rend la vie assez simple en termes d'effacement des drapeaux.
  Le dernier opérateur que nous voulons examiner est "^" EOR (Exclusive OR, parfois appelé XOR), cet opérateur inverse les bits des deux valeurs.
    valeurs. Voici la table de vérité de EOR:
  0 ^ 0 = 0 0 ^ 1 = 1 1 ^ 0 = 1 1 ^ 1 = 0
  Cette fonction est curieuse, mais incroyablement utile. Par exemple, disons que nous voulons un compteur qui compte simplement de 0 à 1 et revient à 0 (en basculant entre 0 et 1), nous pourrions en ajouter un et faire un IF pour voir s'il est arrivé à
    2, puis le remettre à 1. Ou... nous pourrions ajouter 1 et ensuite AND avec 1 (depuis 01+01 = 10, et 10 & 01 = 0) ou nous pouvons faire ceci :
  a = a ^ 1 ;
  La première fois qu'il est exécuté, il s'agit de 0 ^ 1 = 1, puis la deuxième fois de 1 ^ 1 = 0, ce qui permet de faire basculer les choses de 0 à 1.
  Ainsi, OR (|), AND(&), NOT(~) et EOR(^)
    nous permettent de manipuler les bits avec une relative facilité, nous permettant, au niveau le plus simple, de contrôler plusieurs bits à la fois. Nous pouvons évidemment utiliser ces opérations à d'autres fins lors du développement de nos jeux, comme le masquage de sprites, les opérations sur les entiers MOD (à l'aide de AND) ou les compteurs en boucle.
  Nous pouvons donc effectuer des opérations simples sur les bits, mais examinons les choses plus complexes, en commençant par la question suivante : comment un ordinateur fait-il une addition ? Prenons un exemple très simple : 1+1.
  00000001 00000001
     00000010
  
  Comme pour les additions normales, on additionne des nombres et on déborde dans la colonne suivante, mais contrairement à une addition décimale normale, on ne peut aller que de 0 à 1, et non de 0 à 9. Ainsi, l'ajout de 1+1 signifie que nous débordons sur 10.
    Examinons maintenant un exemple plus complexe.
  01011011 = 91 00101101 = 45 10001000 = 136
  C'est évidemment plus difficile à voir ici, mais les débordements s'enchaînent jusqu'à ce qu'il n'y ait plus de uns dans une colonne. Il convient de noter que les ordinateurs ne peuvent ajouter (ou soustraire, multiplier ou diviser) que deux nombres à la fois. Prenons l'exemple de 19 + 19 + 19.
    En tant qu'être humain, nous pouvons ajouter tous les 9 ensemble, reporter le 2 et continuer ! Mais les ordinateurs ne peuvent pas faire cela - ce qu'ils peuvent faire, c'est ceci : (19 + 19) + 19. Ils effectuent donc chaque calcul par blocs de 2.
  Les calculs binaires qui nous intéressent le plus en tant que programmeurs sont la multiplication et la division. Les ordinateurs ne multiplient que par 2, et pour faire plus, ils décomposent un nombre, puis additionnent tous les résultats. Prenons d'abord quelques exemples très simples.
    exemples très simples. 4 * 2 = 8. Pour multiplier par 2 en binaire, nous décalons tous les bits vers la GAUCHE d'une unité. Comme ceci :
  00000100 * 2 = 00001000 = 8
  Dans ce cas, tous les bits se sont déplacés d'une unité vers la gauche, ce qui fait passer le bit 3 au bit 4 et fait passer la valeur de 4 à 8. Que diriez-vous d'un nombre plus grand ?
  101 = 01100101 * 2 = 11001010 = 202
  Encore une fois, tous les bits se déplacent sur un, et c'est un multiple de 2. Alors, qu'en est-il d'un multiple de 4 ? Facile, on décale tout à gauche de 2, plutôt que de 1. Que diriez-vous de 16, ou 128 ? Cela nécessiterait un décalage vers la gauche de 4 bits, ou de 7 bits respectivement. C'est incroyablement
    incroyablement utile ; cela signifie que nous pouvons effectuer des multiplications simples en déplaçant simplement les bits. Pour ce faire, nous utilisons l'opérateur de décalage vers la gauche <<. Voici quelques exemples :
  00000001 << 1 = 000000010 = 2 00000001 << 2 = 000000100 = 4 00000001 << 3 = 000001000 = 8 00000001 << 4 = 000010000 = 16 00000001 << 5 = 000100000 = 32 00000001 << 6 = 001000000 = 64 00000001 << 7 = 010000000 = 128 00000001 << 8 = 100000000 = 256< 5 = 000100000 = 32 00000001 << 6 = 001000000 = 64 00000001 << 7 = 010000000 = 128 00000001 << 8 = 100000000 = 256
  Maintenant, en plus d'être très utile pour les multiplications rapides/simples, c'est aussi très utile pour définir des bits spécifiques, sans avoir à calculer la valeur du bit. Disons que nous voulons régler le bit 27, quel est ce nombre ? (67108864 au fait !), eh bien
    nous pouvons utiliser la syntaxe ci-dessus pour activer facilement des drapeaux comme celui-ci :
  a = a | (1 << 27)
  Ok... donc en fait, ce serait le bit 26 de la façon dont nous avons décrit les choses jusqu'à présent (puisque les bits commençaient à un), mais en fait... les bits commencent au bit 0, et vont vers le haut, pas au bit 1. Donc, bien qu'il y ait 32 bits dans un INTEGER, les bits vont de 0 à 31.
    de 0 à 31, et non de 1 à 32. C'est en fait assez utile, car nous pouvons maintenant définir des constantes pour les nombres de bits.
  Disons que le bit 27 est un drapeau actif, et que le bit 0 est un drapeau explosif. Comment pouvons-nous activer les deux ?
  ACTIF = 27 ; BOOM = 0 ; A = A | (1 << ACTIF) | (1 << BOOM) ;
  Cela peut sembler beaucoup de code, mais si ces nombres sont des constantes, le compilateur précompilera ces opérations en une seule valeur, de sorte que nous nous retrouvons avec ceci comme code réel.
  A = A | 13421772 ;
  Pour effacer ces bits (comme nous l'avons vu ci-dessus), il suffit d'utiliser le modificateur NOT, comme ceci :
  A = A & ~((1 << ACTIF) | (1 << BOOM)) ;
  Ce système nous permet donc d'activer et de désactiver tous les bits que nous voulons, et il nous permet également de compresser massivement les structures de données. La compression des structures de données est une bonne chose, parce que si vous utilisez moins de mémoire, vous avez moins de ratés de cache, et votre code s'exécute tout simplement
    plus rapidement. Disons-le ainsi : qu'est-ce qui est le plus rapide, copier 32 Mo de données ou 4 Mo ? Eh bien, il est clair que 4 est plus rapide. Donc si vous pouvez regrouper tous vos drapeaux en un seul accès mémoire, c'est bien !
  Maintenant, regardons rapidement comment on effectue une division, et pourquoi cela va être si utile. La division s'effectue en décalant les bits vers la droite à l'aide de l'opérateur de décalage vers la droite >>. Prenons
    un nombre simple - 64 - et divisons-le par 32 :
  64 / 32 = 01000000 >> 5 = 00000010
  Vous décalez donc le bit unique vers le bas de 5 (ce qui est le nombre de décalages requis pour 32 - voir ci-dessus), ce qui nous donne 2. Mais que se passe-t-il s'il y a d'autres bits ? Voyons cela :
  68 / 32 = 01000100 >> 5 = 00000010
  Alors voilà.... C'est exactement la même chose. Les bits que nous avons décalés vers le bas sont simplement perdus. C'est en fait très utile, car lors de la division vers le bas, si nous avons besoin du reste, il existe un moyen encore plus simple de l'obtenir, que nous aborderons dans un instant. Mais
    Mais d'abord, prenons un exemple pratique. J'ai une position X et Y, et je veux obtenir la cellule de la grille dans laquelle elle se trouve, la grille ayant une taille de 32x32. Cette méthode nous permet de stocker des objets, des collisions, des drapeaux - toutes sortes de choses, et d'y accéder
    très rapidement. C'est parti :
  var X_index = x >> 5 ; var Y_index = y >> 5 ; cell_data = mygrid[# X_index,Y_index] ;
  Et si on voulait le reste ? Peut-être que ce reste est utilisé comme une sorte d'indicateur d'ordre ou autre. Quelle que soit la raison, obtenir le reste est aussi simple que de faire un AND:
  var remainder = x & 31 var X_Index = x >> 5 ;
  Vous avez peut-être remarqué que nous avons utilisé plusieurs lignes de code ici (comme c'est souvent le cas), mais il ne s'agit que de quelques instructions très rapides. Mais pourquoi 31 ? Eh bien, comme le bit 5 est 32, alors tous les bits en dessous seront 31, et c'est le reste maximal.
    maximum, c'est donc avec cela que nous utilisons AND (nous pourrions aussi utiliser (1 << 5) - 1, ce qui donnerait 32 - 1 = 31). Maintenant, si je devais faire cela sans comprendre le système
    binaire, ça ressemblerait à ça :
  var r = x mod 32 ; var X_Index = floor(x / 32) ;
  Alors pourquoi est-ce bien pire ? Eh bien, pour diviser par 32, nous devons exécuter une division en virgule flottante - ce qui prend évidemment du temps, mais pour faire le mod 32, vous devez en fait en faire un autre ! Si nous faisions cela
    en assembleur, nous obtenons les DEUX valeurs en une seule division, mais ce n'est pas le cas dans les langages de haut niveau (enfin... pas très souvent), et il faut donc faire tout le travail deux fois. Cela s'ajoute, surtout si vous faites une boucle serrée avec beaucoup de calculs
    comme ceci. Les divisions d'entiers utilisant le décalage de bits comme indiqué ci-dessus aident vraiment à optimiser votre jeu.
  Comme il peut s'agir d'un concept assez complexe à appréhender et à appliquer à des situations de programmation réelles, vous trouverez ci-dessous une série de courts exemples pouvant être appliqués à tout jeu réalisé avec GameMaker Studio 2.
  Alignement des tuiles
  
    Les développeurs deGameMaker Studio 2 utilisent souvent la fonction place_free(), puis, lorsqu'une collision est détectée, ils essaient de déplacer lentement l'objet en bouclant autour d'une position x ou y tout en continuant à exécuter cette fonction, ou en utilisant la fonction move_outside_all().
    Alors, quel est le moyen le plus rapide de le faire ? Eh bien, si nous utilisons des tuiles de puissance 2, nous disposons d'une méthode très simple qui est également très rapide. Si nous nous déplaçons vers la droite, et que nous sommes entrés dans un bloc de collision, alors comme nous le savons, tout est aligné sur 32.
      aligné sur 32, nous devons donc aligner le sprite sur une limite de 32 pixels - de préférence celle de gauche - afin que le sprite soit déplacé HORS de la collision. C'est vraiment facile, en connaissant les règles que nous avons utilisées ci-dessus pour obtenir le reste, et en sachant
      comment obtenir l'inverse des bits, nous pouvons simplement faire ceci :
    x = x & ~31 ;
    C'est exact, c'est TOUT ce qu'il faut pour s'aligner sur une limite de 32 pixels. En changeant le 31, on peut s'aligner sur ce que l'on veut, tant que c'est une puissance de 2 (ce qui équivaut à diviser par 32, puis à multiplier par 32, ce qui supprime les bits inférieurs).
      les bits inférieurs).
    Si nous voulions nous aligner sur la droite, nous ferions ce qui précède, mais nous ajouterions 32 pour le déplacer dans la tuile suivante. C'est simple. Tout ceci rend le code de collision monumentalement plus rapide et vous permet d'utiliser le temps du CPU là où vous en avez vraiment besoin.
    
  
  Clés et portes
  
    Disons que vous avez un niveau avec quelques portes, et une clé pour chacune. Comment pouvez-vous facilement marquer une clé pour une porte spécifique ? Eh bien, normalement, il suffit d'attribuer un ID à la clé et à la porte. Et si vous vouliez qu'une clé ouvre 2 ou 3 portes ? C'est simple. Vous utilisez un MASQUE.
      Un seul bit est attribué à la porte, comme suit :
    door_id = 1 ; // 0001
    Les autres seraient quelque chose comme :
    door_id=2 ; // 0010door_id=4 ; // 0100door_id=8 ; // 1000etc...
    Si nous voulions que la clé ouvre les portes 1 et 3, la clé aurait la valeur MASK de 5 (soit 101 en binaire). Si nous effectuons un AND de cette valeur et que le résultat est "non nul", nous savons que la clé peut ouvrir la
      porte. Vous pouvez également avoir des clés qui n'ouvrent rien en ayant un MASK de 0. Voir le code ci-dessous pour la vérification réelle :
    if ((key_id & door_id) ! = 0) { opendoor() ; }
    
  
  Compteurs en boucle
  
    Disons que nous voulons un simple compteur d'animation, allant de 0 à 15 (car nous avons 16 images d'animation). Normalement, vous feriez une incrémentation, puis une vérification à l'adresse if pour envelopper le nombre, mais pour cet exemple, utilisons l'opérateur AND(&).
      utilisons l'opérateur AND(&):
    compteur = (compteur + 1) & 15 ;
    Comme 16 est une puissance de 2, nous pouvons réduire ce nombre par 1 et l'utiliser comme masque, que nous pouvons ensuite utiliser pour envelopper la valeur de notre compteur. Si le compteur passe de 15 à 16, nous obtenons le motif binaire 10000, et si nous AND qui
      avec 15 (motif binaire 01111), nous obtenons 00000 (simplement zéro). Cela signifie que le code ci-dessus est utile pour envelopper des valeurs dans la gamme d'une puissance de 2.
     
  
  Contrôle du pouvoir des 2
  
    Et si vous vouliez vérifier si quelque chose est une puissance de 2 ? Eh bien, voici une petite astuce... Ceci retournera true si la valeur donnée est une puissance de 2 :
    function is_pow2(_val) { return _val & (_val - 1)) == 0 ; }
    Donc, si nous avions le numéro 51 (110011), qu'est-ce que cela ferait ? Eh bien, on obtient ceci... 110011 & 110010, ce qui nous laisse évidemment false, car il reste beaucoup de bits
      après AND. Si nous avions 64 (1000000), alors cela devient ceci... 1000000 & 0111111 qui nous laisse 0, donc c'est true.
    
  
  Alignement de l'index
  
    Voici un petit bout de code pour aligner les puissances de 2 nombres. (1,2,4,8,16 et ainsi de suite). Cela peut être très utile pour l'allocation de la mémoire, ou pour s'assurer que vous écrivez les données aux limites appropriées. Dans cet exemple, _val1 doit être
      aligné sur _val2 octets, où _val2 est un nombre de puissance 2. Cette petite fonction arrondit à la prochaine limite du nombre désiré.
    fonction align_pow2(_val1, _val2) { return _val1 + (_val2 - 1)) & ~(_val2 - 1) ; }
    
    
  
   
   
   
  
    
      
        Retour : Informations complémentaires
        Suivant : Tables de types
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

