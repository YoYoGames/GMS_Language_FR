 Guide des primitives et de la construction de sommets Ce guide explique brièvement comment créer et utiliser des primitives à l' aide de formats de sommets et de tampons de sommets personnalisés. En général, lorsque vous commencez à travailler avec la 3D, les effets spéciaux, les processus de dessin complexes ou les shaders vous n'avez pas à vous soucier trop du format de sommet utilisé, car GameMaker Studio 2 configurera et transmettra automatiquement les données de sommet pour vous. Cependant, il est parfois nécessaire de créer vos propres données de sommets et de les formater en conséquence, en particulier lorsque vous avez besoin d'augmenter la vitesse ou que vous souhaitez transmettre des informations supplémentaires. Par exemple, le format de sommet standard comprend une position 3D x, y, z, une couleur (avec alpha) et des coordonnées de texture UV, qui, si vous le créez vous-même, ressembleraient à ceci:vertex_format_begin(); vertex_format_add_position_3d();
     vertex_format_add_colour();
     vertex_format_add_textcoord();
     my_format = vertex_format_end(); Cependant, si vous n'utilisez (par exemple) qu'un shader pour manipuler la position du sommet, il n'est pas nécessaire de passer par les données de couleur ou de texture. Dans ce cas, vous créeriez votre propre format comme suit:vertex_format_begin(); vertex_format_add_position_3d();
     my_format = vertex_format_end(); Au total, il existe cinq attributs de sommet différents que vous pouvez utiliser lors de la définition d'un format de sommet: Couleur Normal Positionner Position 3D Coordonnée de la texture En général, vous devez toujours fournir une position ou une position 3D dans le cadre du format, mais toutes les autres sont facultatives. Vous devez noter qu'une fois que vous avez créé votre format de sommet, l'ordre dans lequel vous avez défini les attributs de sommet doit être respecté lors de la construction de vos primitives. Donc, si vous avez défini un format de sommet comme coordonnées de position, de couleur et de texture, vous devez ajouter ces attributs à la primitive dans le même ordre, sinon vous obtiendrez une erreur. Notez également que comme toute autre ressource dynamique, un format de sommet nécessite de la mémoire et doit donc être supprimé lorsqu'il n'est pas nécessaire à l'aide de la fonction vertex_format_delete(). Toutes les primitives que vous créez sont conservées dans un tampon de sommets. Celui-ci doit être créé au préalable, puis référencé par les fonctions utilisées pour construire votre primitive. Le tampon de vertex peut être réutilisé autant de fois que nécessaire pour créer différentes primitives, ou il peut être «gelé» pour maintenir un type primitif spécifique pendant la durée de votre jeu ou niveau (ce qui est l'approche la plus rapide, donc si vous savez qu'une primitive que vous construisez ne changera pas, vous devez toujours utiliser cette option). Un exemple d'une primitive de triangle unique en cours de construction est illustré dans le code suivant:// CREATE EVENT v_buff = vertex_create_buffer(); vertex_begin(v_buff, global.my_format); vertex_position(v_buff, 10, 10); vertex_colour(v_buff, c_white, 1); vertex_texcoord(v_buff, 0, 0); vertex_position(v_buff, 110, 10);    vertex_colour(v_buff, c_white, 1); vertex_texcoord(v_buff, 1, 0); vertex_position(v_buff, 110, 110); vertex_colour(v_buff, c_white, 1); vertex_texcoord(v_buff, 1, 1); vertex_end(v_buff);
    
     // DRAW EVENT var tex = sprite_get_texture(spr_Background, 0); shader_set(shd_shimmer);
     vertex_submit(v_buff, pr_trianglelist, tex); shader_reset();
   Ici, nous avons d'abord créer notre tampon de sommets dans l'événement de création de l'instance, puis nous commençons la définition des différents sommets qui composent notre primitive de triangle, en donnant la position, la couleur et la coordonnée UV de texture pour chacun des trois points que nous voulons utiliser. Nous terminons ensuite la définition de sommet, et nous savons que le tampon de sommet avec ces données de sommet est stocké dans la variable "v_buff". REMARQUE: Si le contenu du tampon doit être mis à jour en permanence, le tampon sera créé, compte tenu des données de sommet, puis détruit à nouveau - après avoir été dessiné - le tout dans la même étape. Nous dessinons ensuite le contenu du tampon de vertex dans l'événement Draw à l'aide d'un shader. C'est un exemple très simple, et c'est essentiellement la façon dont GameMaker Studio 2 fonctionne en interne, c'est-à-dire: lorsque vous dessinez un sprite, GameMaker crée un tampon de sommets avec quatre sommets créant deux triangles (qui forment un carré, également appelé "quad"), et textures ces deux triangles avec l'image du sprite. Lorsque nous dessinons ce sprite, nous soumettons le tampon de sommets et son contenu est dessiné à l'écran. Vous remarquerez que lorsque nous soumettons le tampon de vertex pour le dessin, nous fournissons un type primitif. Le type de primitive que vous utilisez peut être un point, une liste de lignes ou une bande, ou une liste ou une bande de triangles, mais vous n'êtes pas autorisé à utiliser des ventilateurs de triangle car la plupart du matériel mobile n'acceptera pas ce type de primitive. N'oubliez pas de formater correctement votre tampon de sommets pour le type de primitive qui va être utilisé pour le dessiner. Par exemple, dessiner une primitive à deux triangles sous forme de liste de triangles nécessite 6 points, mais en tant que bande triangulaire, il ne nécessite que 4 points. Le type que vous utilisez dépend de vous et dépendra de ce que vous souhaitez dessiner et de l'effet que vous souhaitez obtenir. Un dernier point important à noter lorsque vous utilisez vos propres tampons de sommets de cette manière est la façon dont cela affecte les lots de sommets envoyés au GPU. Lorsque vous créez un tampon de vertex, vous créez le niveau le plus bas de données graphiques. Ainsi, lorsque vous dessinez, tout ce qui se passe est que GameMaker Studio 2 envoie votre tampon directement à la carte graphique. Pour cette raison, si vous voulez un meilleur traitement par lots, vous devez le résoudre vous-même et stocker les éléments que vous souhaitez regrouper dans le même tampon. Comme nous l'avons déjà mentionné ci-dessus, les formats de sommets sont construits en utilisant ensemble les 5 types d'attributs suivants (ajoutés via le vertex_format_add_* fonction): Couleur Normal Positionner Position 3D Coordonnée de la texture Dans le shader GLSL ES, ces types sont reconnus à l'aide des 4 attributs suivants: Couleur Normal Positionner Coordonnée de la texture Maintenant, cela peut sembler étrange car il semble que nous puissions spécifier plus de types d'attributs dans notre format de vertex que nous ne le pouvons dans le shader vertex. Cependant, dans le shader position et la position 3D sont traitées comme le même attribut, sauf que la position ne devrait avoir que les coordonnées «x» et «y» alors que la position 3D a les coordonnées «x», «y» et «z». Alors, comment mappez-vous ce qui est dans votre format de sommet à la façon dont vous définissez les attributs dans votre shader ? Commençons par regarder un ensemble typique d'attributs du shader par défaut:attribute vec3 in_Position;        // (x,y,z) //attribute vec3 in_Normal;        // (x,y,z) unused in this shader. attribute vec4 in_Colour;          // (r,g,b,a) attribute vec2 in_TextureCoord;    // (u,v) Et voici un morceau de code qui met en place un format de sommet compatible avec ce shader:vertex_format_begin(); vertex_format_add_position_3d();
     vertex_format_add_colour();
     vertex_format_add_textcoord();
     my_format = vertex_format_end(); Maintenant, comment l' shader est-il mis en correspondance avec le type de format de sommet? C'est juste basé sur la convention de dénomination: "in_Position" correspond à vertex_format_add_position / _3d()"in_Colour" maps to vertex_format_add_colour()"in_TextureCoord" maps to vertex_format_add_textcoord()
      
     Maintenant, les choses deviennent plus délicates lorsque vous avez plusieurs attributs du même type, mais les choses sont toujours basées sur la même convention de dénomination. Nous allons maintenant chercher à fournir des coordonnées de couleur et de texture supplémentaires, car il ne peut y avoir qu'un seul attribut Position et un attribut Normal dans le shader ou de sommet, mais il peut y avoir plusieurs attributs de couleur ou de texture. Lors de l'ajout d'attributs de couleur supplémentaires à votre shader, un nombre doit être ajouté à la fin de l' shader pour indiquer à quelle entrée particulière dans le format de sommet l'attribut correspond. Voici un exemple - d'abord le format des sommets:vertex_format_begin(); vertex_format_add_position_3d();
     vertex_format_add_colour();
     vertex_format_add_colour();
     vertex_format_add_textcoord();
     my_format = vertex_format_end(); Et maintenant les attributs de shaderattribute vec3 in_Position;      // (x,y,z) attribute vec4 in_Colour0;       // (r,g,b,a) attribute vec4 in_Colour1;       // (r,g,b,a) attribute vec2 in_TextureCoord;  // (u,v) Dans ce cas in_Colour0 cartes au premier vertex_format_add_colour() et in_Colour1 correspond à la seconde. Les coordonnées de texture sont gérées légèrement différemment de la couleur. En gros, tout ce qui n'est pas appelé in_Position, in_Normal ou l'un des in_Colour[0 ... ] Les attributs sont traités comme une coordonnée de texture. L'ordre dans lequel ils sont définis, dans la liste des attributs du shader, indique à quel attribut dans le format de sommet ils sont mappés. Consultez l'exemple GMLvertex_format_begin(); vertex_format_add_position_3d();
     vertex_format_add_colour();
     vertex_format_add_textcoord();
     vertex_format_add_textcoord();
     vertex_format_add_textcoord();
     my_format = vertex_format_end(); Et le shader ressemblerait à ceci:attribute vec3 in_Position;      // (x,y,z) attribute vec4 in_Colour;        // (r,g,b,a) attribute vec2 in_myTexcoord;    // (u,v) attribute vec2 in_TextureCoord;  // (u,v) attribute vec2 in_Something;     // (u,v) Dans cet exemple, in_myTexcoord, in_TextureCoord et in_Something mapper aux trois attributs de coordonnées de texture successifs définis dans le format de sommet. Vous pouvez trouver une liste complète de toutes les fonctions requises pour créer des formats de sommets, des tampons de sommets et des primitives à partir de la page suivante: Primitives et formats de sommets  Retour: Informations complémentaires Suivant: Guide d'utilisation de Blendmodes © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

