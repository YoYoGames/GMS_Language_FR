
  
  Meilleures pratiques en matière de programmation
  Sur cette page, nous allons aborder certaines "meilleures pratiques" lors de la programmation de votre jeu, tout en expliquant un peu le fonctionnement interne de GameMaker Studio 2. Toutefois, avant de poursuivre, il convient de noter deux points très importants : 1.
    points très importants :
  
    Il s'agit d'un guide, et non d'une méthode définitive et parfaite à 100 % pour écrire votre jeu ! Les choses mentionnées ici sont généralement plus sur l'échelle de l'organisation et de la micro-optimisation et devraient être incorporées dans vos habitudes de programmation lorsque vous vous sentez à l'aise avec GML et que vous pensez qu'elles sont appropriées.
      programmation lorsque vous vous sentirez à l'aise avec GML et que vous penserez qu'elles sont appropriées.
    Si votre jeu fonctionne bien et que vous êtes satisfait des choses telles qu'elles sont, ne vous précipitez pas pour tout changer juste pour obtenir quelques FPS supplémentaires. Vous devez trouver un équilibre entre un code lisible, flexible et modulaire et le temps et l'énergie nécessaires pour changer les choses, ainsi que le gain global au final.
      temps et l'énergie nécessaires pour changer les choses, ainsi que le gain global à la fin. En gros, si ce n'est pas cassé, ne le réparez pas et gardez ce que vous avez appris ici pour votre prochain projet.
  
  Ceci étant dit, poursuivons et examinons quelques conseils généraux pour écrire un bon code GML, que vous pouvez appliquer à tout moment...
  
  Style de programmation
  
    Lorsqu'il s'agit d'écrire du code, chacun a son style. Le style dans lequel vous programmez est la façon dont vous placez vos parenthèses, dont vous indentez les lignes, dont vous déclarez et nommez les variables, etc.
      et est essentiel pour que votre code soit clair et lisible pour les autres (et pour votre futur moi, lorsque vous devrez revenir à ce projet après avoir travaillé sur autre chose).
    Il existe de très nombreux styles de programmation, et certains diront que le leur est le meilleur à utiliser, mais la vérité est que presque tous les styles conviennent tant que vous êtes cohérent dans votre utilisation et que tout est clair et évident.
      que vous l'utilisez et que la signification de chaque élément est claire et évidente .
    L'image ci-dessus est un exemple de déclaration de fonction dans un script pour illustrer les points ci-dessus. Vous
      pouvez voir qu'il utilise les commentaires de style JSDoc pour expliquer clairement ce qu'il fait, et le style de codage est cohérent, avec des indentations de 4 espaces, des caractères de soulignement utilisés pour les variables locales, la sortie enregistrée, etc...
    Notez également que si l'éditeur de scripts vous permet de plier le code à chacune des parenthèses ouvrantes/fermantes, vous pouvez utiliser les balises #region et #endregion pour séparer des parties de votre code et améliorer considérablement la lisibilité, en particulier lorsqu'il s'agit de scripts volumineux contenant plusieurs fonctions.
      la lisibilité, en particulier lorsqu'il s'agit de scripts plus importants contenant plusieurs fonctions. Les régions peuvent également être commentées - voir la section Édition de cette page du manuel) :
    Lorsque vous écrivez du code, vous devez savoir que lors de la compilation de votre jeu final, GameMaker Studio 2 supprime les
      les commentaires, supprime les sauts de ligne et les espaces inutiles, substitue les valeurs constantes/macro/enum et compresse généralement votre code dans le cadre du processus. Cela signifie que vous pouvez ajouter autant d'espaces blancs que vous le souhaitez autour de votre code et que vous n'avez pas à vous soucier de l'absence d'espaces blancs.
      vous n'avez pas besoin de vous soucier de garder vos commentaires courts ou de les utiliser avec parcimonie.
     
  
  Utiliser les variables locales
  
    Pour poursuivre sur le point précédent concernant le style de programmation, une chose que beaucoup de débutants font est de faire tenir le plus de choses possibles dans une ligne de code. Par exemple :
    draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y))) ;
    Bien qu'il ne soit pas complètement illisible, il est inefficace (la fonction point_direction() est appelée deux fois, par exemple) et il est désordonné et peu agréable à regarder. Il serait bien mieux exprimé comme suit
    var p_dir = point_direction(x, y, mouse_x, mouse_y) ; var local_x = x + lengthdir_x(100, p_dir) ; var local_y = y + lengthdir_y(100, p_dir) ; draw_sprite(sprite_index, image_index, local_x, local_y) ;
    La mémoire et les ressources nécessaires pour créer ces variables locales sont négligeables, et sont largement compensées par le bénéfice instantané que vous (ou toute autre personne lisant le code plus tard) tire de sa clarté. La même idée devrait être appliquée aux fonctions, où
      vous devez attribuer des noms sensés aux variables d'entrée, et utiliser un formatage clair et des variables locales si nécessaire pour rendre le code aussi lisible que possible.
    Les variables locales sont rapides à traiter dans le jeu, alors exploitez-les au maximum. Si une expression apparaît deux fois ou plus dans un bloc de code ou un script, pensez à lui créer une variable locale. Lorsque vous utilisez les cibles du compilateurYoYo (YYC), si vous faites référence à global ou à des variables d'instance plusieurs fois dans une fonction ou un bloc de code, il est particulièrement avantageux de les affecter à une variable locale au début de votre code
      et de référencer ensuite cette variable locale, ce qui permet d'obtenir de bien meilleures performances.
     
  
  Tableaux
  
    Lestableaux sont rapides à utiliser et nécessitent moins de mémoire que les structures de données, mais ils peuvent être encore optimisés. Lorsque vous créez un tableau, la mémoire qui lui est allouée dépend de sa taille.
      devriez essayer d'initialiser un tableau à sa taille maximale, même si vous ne prévoyez pas de le remplir avant. Par exemple, si vous savez que vous avez besoin d'un tableau pour contenir un maximum de 100 valeurs, vous l'initialiserez tout de suite à 100 emplacements,
      en utilisant la array_create() fonction :
    tableau = tableau_créé(100, 0) ;
    Cela alloue la mémoire en un seul "morceau" avec toutes les valeurs du tableau définies à la valeur par défaut de 0. Cela permet de garder les choses rapides, car autrement, chaque fois que vous ajoutez une nouvelle valeur au tableau, la mémoire entière doit être réallouée à nouveau.
    REMARQUE: Sur la cible HTML5, l'affectation des tableaux de cette manière ne s'applique pas et vos tableaux doivent être initialisés à partir de 0 pour cette cible ! Vous pouvez facilement gérer cela en vérifiant la variable os_browser, par exemple :
    si (os_browser == browser_not_a_browser)
    {
    array_create(100, 0) ;
    }
sinon
    {
    for (var i = 0 ; i < 100 ; ++i ;)
        {
        array[i] = 0 ;
        }
    }
    Vous pouvez également libérer la mémoire associée à un tableau en donnant à la variable utilisée la valeur 0. Ainsi, pour effacer le tableau dans l'exemple de code ci-dessus, il suffit d'utiliser la commande
    réseau = 0 ;
    Notez également que les tableaux sont transmis par référence, mais qu'ils sont copiés dans leur intégralité lorsqu'une modification est apportée (ce comportement est appelé " copy on write"). Ainsi, si vous passez un tableau à une fonction, vous passez une référence au tableau d'origine.
      le tableau d'origine et toutes les valeurs qui y seront lues proviendront de la source d'origine. C'est agréable et rapide, mais si vous devez modifier l'une des valeurs du tableau, le tableau lui-même est dupliqué au moment de l'écriture et toutes les modifications apportées doivent être renvoyées par la fonction, sinon elles seront perdues.
      Cette méthode est beaucoup plus lente et consomme plus de mémoire. Faites donc attention à la façon dont vous utilisez les tableaux dans les fonctions.
    Toutefois, vous pouvez éviter ce comportement de copie en écriture en utilisant l'accesseur spécial de tableau @, qui donne un accès direct au tableau sous-jacent. Par exemple :
    // Appeler une fonction, en passant notre tableau my_function(my_array) ;
    
    // La fonction ressemble à ceci :
       function my_function(_a) {
       // Le tableau sera copié et la copie modifiée, // ce qui vous obligera à utiliser "return _a", plus tard _a[0] = 100 ; // Cela modifiera directement le tableau ORIGINAL et // il n'est pas nécessaire de le retourner _a[@0]
      = 100 ; }
    
     
  
  Structures de données
  
    Dans GameMaker Studio 2, les structures de données ont été optimisées pour être beaucoup plus rapides que dans les versions précédentes de GameMaker. Elles doivent toujours être nettoyées (détruites) lorsqu'elles ne sont pas utilisées pour libérer de la mémoire.
      Elles doivent toujours être nettoyées (détruites) lorsqu'elles ne sont pas utilisées afin de libérer de la mémoire, et elles peuvent toujours être plus lentes que les tableaux, par exemple, mais la facilité d'utilisation et les fonctions supplémentaires permettant de traiter les données qu'elles contiennent compensent souvent la différence de vitesse minime, alors n'ayez pas peur de les utiliser dans vos jeux.
      jeux.
    
    Il convient de noter que de toutes les structures de données, les cartes DS en particulier sont très rapides, tant en lecture qu'en écriture, ce qui en fait une excellente option pour tous les types de tâches.
    Nous avons précédemment mentionné les accesseurs pour les tableaux, mais ils sont également disponibles pour les structures de données, ce qui peut aider à nettoyer votre code et à le rendre beaucoup plus facile à lire.
     
  
  Collisions
  
    Il existe plusieurs façons de gérer les collisions dans GameMaker Studio 2, et la plupart d'entre elles s'accompagnent d'une légère surcharge du processeur. Les fonctions collision_ et point_, place_ et instance_ s'appuient toutes sur la vérification de la boîte englobante avec toutes les instances d'un type donné dans la pièce.
      toutes les instances d'un type donné dans la pièce, et bien qu'une certaine optimisation soit intégrée au moteur pour limiter ces vérifications, les collisions ne sont jamais la chose la plus efficace à gérer. Si vous commencez à utiliser des collisions précises, les performances se
      Si vous commencez à utiliser des collisions précises, les performances se détérioreront sensiblement, car vous devrez non seulement effectuer des contrôles de bounding box, mais aussi des contrôles par pixel, ce qui est très lent. Un blog technique de YoYo Games aborde ce sujet ici :
    
      Les risques d'une détection précise des collisions
    
    Cela ne veut pas dire que vous ne devez pas utiliser ces fonctions, car elles peuvent être très pratiques. Cependant, vous devez savoir lesquelles utiliser et à quel moment, car elles fonctionnent toutes légèrement différemment et ont des vitesses différentes. En règle générale, les fonctions
      place_ sont plus rapides que les fonctions instance_, qui sont plus rapides que les fonctions collision_ et point_. Lisez donc les pages du manuel consacrées à chacun de ces types de fonctions.
      du manuel pour chacun de ces types de fonctions et veillez à choisir la plus appropriée à chaque situation.
    Vous pouvez également envisager de créer un système de collision basé sur les tuiles, qui peut être créé à l'aide des fonctions de carte de tuiles ou même d'un tableau 2D personnalisé ou d'une grille DS.
      un tableau 2D personnalisé ou une grille DS. Ces systèmes seront très rapides et contribueront à augmenter la vitesse de votre jeu. Cependant, si vous utilisez un terrain irrégulier ou des murs et des objets qui ne s'alignent pas sur une grille, ils ne seront peut-être pas appropriés. Vous pouvez trouver un
      tutoriel très simple sur les collisions de tuiles à partir du lien vidéo suivant
    
      Collisions des tuiles dans GameMaker Studio 2
    
     
  
  Échanges de textures et lots de sommets
  
    Si vous allumez le superposition de débogagevous verrez qu'il y a deux chiffres entre parenthèses en haut de votre écran lors du test. Le premier est le nombre
      de textures échangées et le second est le nombre de lots de vertex. Un certain nombre de facteurs influencent ces chiffres et vous n'arriverez jamais à les réduire à (0) (0) car le moteur a besoin d'un ou de deux de chaque
      chaque étape, mais vous devriez essayer de réduire ces valeurs autant que possible.
    Pour les échanges de textures, la meilleure façon de procéder est d'optimiser la façon dont vos sprites et vos arrière-plans sont stockés sur la page des textures.
      sont stockés sur la page de texture. Cela se fait à partir des propriétés du sprite, et vous pouvez créer des pages de texture dans l'éditeur de groupe de textures. Si vous avez un certain nombre
      d'images qui ne sont utilisées que dans le menu principal (par exemple), regroupez-les sur une page de texture distincte. De même si vous avez des images spécifiques à un niveau, ou le joueur et les ennemis,
      etc. En gros, vous voulez les regrouper par utilisation afin de réduire les échanges autant que possible. De plus, pour optimiser la VRAM, vous pouvez utiliser les différentes fonctions prefetch et flush pour charger et retirer les textures de la mémoire selon les besoins.
    REMARQUE: comme nous l'avons mentionné au début de cette page, si votre jeu fonctionne bien avec un taux de rafraîchissement décent, ne vous inquiétez pas trop des échanges de textures... surtout lorsque vous créez des projets sur les cibles de bureau. Ces optimisations sont meilleures lorsqu'elles sont
      Ces optimisations sont plus efficaces lorsqu'elles sont utilisées avec des jeux volumineux ou sur des appareils mobiles bas de gamme, et lorsqu'elles sont mal utilisées, elles peuvent avoir un impact négatif sur les performances.
    Les informations sur les sommets sont envoyées par "lots" au GPU pour le dessin, et en général, plus le lot est grand, mieux c'est. Il faut donc éviter de "casser" le lot lors du dessin, car cela augmente le nombre de lots de sommets envoyés au GPU.
      le GPU. Il y a un certain nombre de choses qui peuvent casser le lot, les principales étant les modes de fusion, le réglage de la couleur de dessin, le réglage de l'alpha de dessin, et le dessin en utilisant les formes et les primitives intégrées.
      primitives intégrées.
    
    Ainsi, si vous avez un certain nombre d'instances de balles qui utilisent le mode de fusion bm_add, par exemple, vous devrez créer un nouveau lot de vertex pour chacune d'entre elles, ce qui n'est certainement pas une bonne chose ! Au lieu de cela, ayez un objet contrôleur
      dans votre jeu qui dessine toutes les balles à la place, comme ceci :
    gpu_set_blendmode(bm_add) ; with (obj_BULLET) { draw_self() ; }  gpu_set_blendmode(bm_normal) ;
    
    REMARQUE: cela ne s'applique pas uniquement à l'utilisation de bm_add - tout changement de mélange interrompra le lot et aura un impact sur les performances.
    De cette façon, toutes les balles seront dessinées dans le même lot. Cette méthode peut être appliquée à l'alpha et à la couleur de dessin aussi, et en fait une utilisation judicieuse des fonctions gpu_set_blendenable(),
      gpu_set_alphatestref(), et gpu_set_alphatestenable() peut
      améliorer grandement les performances et peuvent être activées/désactivées selon les besoins dans le code de votre projet, bien qu'elles ne soient pas appropriées pour tous les types de graphiques ou de projets.
    NOTE: Si vous n'avez pas besoin que l'instance se dessine elle-même lorsque vous utilisez un contrôleur de cette manière, vous pouvez simplement ajouter un commentaire dans le Draw Event pour supprimer le dessin par défaut, ou rendre l'instance invisible (bien que cela empêche tout code de s'exécuter pour l'instance dans tous les événements de dessin).
      l'instance (bien que cela empêche tout code de s'exécuter pour l'instance dans tous les événements de dessin).
    Une autre façon de réduire ces chiffres est de désactiver l'option Separate Texture Page pour les sprites, sauf si cela est absolument nécessaire. Chaque image stockée de cette manière est envoyée sur sa propre page de texture et mise en lots différemment.
      sur une page de texture normale est préférable. Vous pouvez ensuite obtenir les coordonnées UVS en utilisant la fonction sprite_get_uvs() fonction
      et les stocker dans des variables pour une utilisation ultérieure. Cela peut représenter une petite quantité de code supplémentaire, mais l'amélioration que vous obtiendrez en vaut la peine. Notez que cette méthode ne permet pas de répéter les textures !
    Comme pour tous ces conseils, si cela vous rend la vie plus difficile de le changer et que votre jeu fonctionne bien, ne vous en faites pas trop...
     
  
  Particules
  
    Lesparticules offrent un moyen très rapide et efficace de créer des effets dynamiques dans votre jeu, et en général, elles offrent de bonnes performances. Toutefois, il convient de noter que
      l'utilisation de l'additive blending, de l'alpha blending et de l'colour blending sur les particules peut diminuer ces performances, en particulier sur les cibles mobiles, donc si vous n'en avez pas besoin, ne l'utilisez pas ! Le mélange additif, en particulier, peut augmenter considérablement les lots de vertex.
      et doit être utilisé avec précaution.
    Notez que sur la cible HTML5 non WebGL, le fait d'avoir des particules multicolores et changeantes nécessitera beaucoup de mise en cache des images et sera très lent. Cependant, comme les sprites de particules peuvent être animés, vous pouvez créer un sprite animé dont les sous-images changent de couleur.
      qui changent de couleur et l'utiliser à la place pour la particule. Cela ressemblera toujours à un changement de couleur progressif, mais ne nécessitera pas la création constante d'images en cache.
    Vous pouvez en savoir plus sur les particules en consultant la page Guide d'utilisation des particules.
     
  
  Surfaces
  
    Enfin, nous allons aborder brièvement l'utilisation des surfaces, car GameMaker Studio 2 offre une optimisation assez importante pour leur utilisation dans vos jeux : la possibilité d'activer et de désactiver le tampon de profondeur.
      d'activer et de désactiver le tampon de profondeur.
    Lorsque vous utilisez des surfaces comme d'habitude, GMS2 crée en fait une surface et un tampon de profondeur correspondant pour assurer un triage correct de la profondeur lorsque vous dessinez quelque chose en 3D. Cependant, pour la plupart des jeux 2D, ce tampon de profondeur supplémentaire n'est tout simplement pas nécessaire.
      prend de l'espace mémoire et du temps de traitement supplémentaires qui pourraient être utilisés pour d'autres choses. C'est là que la fonction surface_depth_disable() vient
      dans le jeu...
    Cette fonction peut être appelée avant de créer une surface pour désactiver la génération du tampon de profondeur. Toutes les surfaces créées par la suite n'auront pas de tampon de profondeur créé pour elles. Vous pouvez activer/désactiver cette fonction selon vos besoins, et vous pouvez même l'appeler une fois au début du jeu pour désactiver les tampons de profondeur pour toutes les surfaces suivantes.
      une fois au début du jeu pour désactiver les tampons de profondeur pour tous les appels de surface ultérieurs (et dans la plupart des jeux 2D, c'est parfait). Cela n'augmentera pas les performances, mais c'est certainement quelque chose à garder à l'esprit si votre jeu repose fortement sur les surfaces.
      sur les surfaces et pourrait empêcher votre jeu de manquer de mémoire sur les appareils à faible spécification.
  
   
  Outre les principaux éléments mentionnés ci-dessus, il existe d'autres éléments plus généraux qui peuvent contribuer aux performances et qui sont également considérés comme des "bonnes pratiques" :
  
    n'ayez pas peur d'utiliser les fonctions trigonométriques car (contrairement à la croyance populaire) elles sont assez rapides, surtout si on les compare aux particules, collisions, cordes, etc...
    ne pas mettre de code qui ne sert pas à dessiner des choses dans les événements Draw
    utiliser une alarme pour appeler tout code qui ne doit pas être appelé à chaque étape (plutôt que de l'ajouter à l'événement Step de toute façon)
  
  Mais, comme nous l'avons mentionné au début de la page, toutes ces optimisations sont facultatives et si votre jeu fonctionne bien avec 60 lots de vertex, 80 échanges de textures, du blending additif, etc., alors ne vous en faites pas trop ! Gardez simplement ces choses à l'esprit
    lorsque vous programmerez votre prochain jeu...
   
   
   
  
    
      
        Retour : Informations complémentaires
        Suivant : Le système de fichiers
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

