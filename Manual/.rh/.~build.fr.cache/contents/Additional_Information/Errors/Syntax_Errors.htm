
  
  Erreurs de syntaxe
  Le premier niveau de signalement des erreurs lorsque vous programmez vos jeux dans GameMaker Studio 2 se trouve dans l'éditeur de code ou de DnD™, et il s'agit du vérificateur de syntaxe. Lorsque vous redressez votre code - ou ajoutez vos actions
    - GameMaker vérifie qu'il respecte la syntaxe établie pour le langage et signale les problèmes qu'il trouve afin que vous puissiez les corriger avant de lancer le jeu ou de compiler un exécutable.
  Ces erreurs se répartissent en deux grandes catégories :
  
     Avertissements: Ils sont affichés pour les choses qui peuvent être une erreur, mais qui peuvent ne pas l'être, et qui n'empêcheront probablement pas le jeu de se compiler, mais qui pourraient provoquer des erreurs d'exécution.
      le jeu de compiler, mais qui peuvent provoquer des erreurs d'exécution. Les causes les plus courantes de ces avertissements sont lorsqu'une variable est utilisée dans une expression et qu'elle n'a pas encore été définie ailleurs, ou lorsqu'une variable a été définie mais n'a pas été utilisée.
      pas été utilisée.
     Erreurs: Il s'agit de problèmes qui ne permettent pas au jeu de se compiler, et encore moins de s'exécuter.
      Ils doivent être corrigés avant de continuer à travailler sur le code. Le tableau ci-dessous montre les causes les plus courantes de ces erreurs.
  
  Les erreurs de syntaxe seront mises à jour au fur et à mesure que vous écrirez votre code (il y aura une courte pause entre le moment où vous tapez quelque chose et celui où les erreurs apparaissent dans cette fenêtre, afin d'éviter que des erreurs soient signalées pour un code inachevé), et suivront le format suivant :
  [objet] - [événement] - [numéro de ligne] - [position dans la ligne] : [chaîne d'erreur].
  Ou si l'erreur est dans un script, elle le sera :
  [script] - [numéro de ligne] - [position dans la ligne] : [chaîne d'erreur].
  Un double clic sur  sur l'une des erreurs affichées dans la console de sortie vous amènera à la ligne de l'événement ou du script de l'objet qui contient l'erreur afin que vous puissiez la modifier.
    afin que vous puissiez la modifier.
  Il convient de noter que certaines de ces erreurs seront affichées à des endroits spécifiques de votre code, mais l'erreur réelle peut être causée par quelque chose d'autre, ou un seul problème peut provoquer plusieurs messages d'erreur :
  Dans l'image ci-dessus, les trois erreurs  ont été provoquées par une seule erreur - l'utilisation d'un point-virgule ";" au lieu d'une virgule "," à la ligne 220 pour la fonction variable_instance_exists().
  Le tableau ci-dessous énumère les différentes erreurs de syntaxe et leurs principales causes :
   
  
    
      
        Erreur
         Type 
        Description
      
      
        Référence malformée [val]
        
        Cela signifie qu'il y a une erreur interne de validation de l'AST (vous ne devriez jamais voir cette erreur, mais si c'est le cas, pensez à remplir un rapport de bogue à partir du menu Aide). 
      
      
        Séquence d'échappement de caractères hexadécimaux malformée 
        
        Cela peut se produire lorsque vous avez utilisé la valeur hexadécimale d'un caractère d'échappement dans une chaîne de caractères et que celle-ci n'a pas le bon format.
      
      
        Nœud inattendu [val]
        
        Cela signifie qu'il y a une erreur interne de validation de l'AST (vous ne devriez jamais voir cette erreur, mais si c'est le cas, pensez à remplir un rapport de bogue à partir du menu Aide). 
      
      
        Exception lors de l'analyse de [val].
        
        Cela signifie qu'il y a une erreur interne de validation de l'AST (vous ne devriez jamais voir cette erreur, mais si c'est le cas, pensez à remplir un rapport de bogue à partir du menu Aide). 
      
      
        Référence d'identification malformée [val]
        
         
      
      
        Expression inutile [val] utilisée comme une déclaration
        
        Cette erreur se produit lorsque le vérificateur syntaxique détecte une expression (indiquée par [val]) alors qu'il attendait une déclaration. Par exemple, le code suivant produira l'erreur car il s'attend à l'opérateur ternaire ? mais rencontre 32 :
          temp_x = x < (room_width / 2)  32: room_width - 32;
      
      
        Référence de tableau malformée [val]
        
        Cela signifie que vous avez essayé de référencer un tableau d'une manière incorrecte, et [val] montrera la référence.
      
      
        Opérateur binaire inattendu [val]
        
        Cette erreur se produit lorsque vous utilisez l'un des opérateurs binaires à un endroit où il ne devrait pas être utilisé, [val] montrant où.
      
      
        Chaîne littérale non terminée
        
        Cette erreur se produit lorsque vous ouvrez une chaîne de caractères à l'aide de @“ ou “ mais que vous ne la fermez pas avant la fin du code.
      
      
        Les guillemets simples ne sont plus autorisés pour les chaînes de caractères
        
        Cette erreur se produit lorsque vous essayez d'utiliser des chaînes de caractères entre guillemets simples, par exemple : "Hello World", au lieu de guillemets doubles, par exemple : "Hello World".
      
      
        Erreur de syntaxe inattendue
        
        Cette erreur dénote une erreur de syntaxe que l'analyseur syntaxique n'est pas en mesure d'identifier plus précisément.
      
      
        J'ai obtenu "[val1]", je m'attendais à "[val2]".
        
        Cela se produit lorsque le vérificateur syntaxique attend une certaine valeur ou un certain symbole, mais en obtient une autre, où [val1] est le symbole ou la valeur actuelle, et [val2] est le symbole ou la valeur attendue. Par exemple :
          Got "{", expected "("
      
      
        J'ai obtenu "[val1]", je m'attendais à "[val2]" ou "[val3]".
        
        Comme ci-dessus, mais pour les cas où il y a plusieurs symboles attendus possibles.
      
      
        Expression attendue
        
        Cette erreur se produit lorsque le vérificateur syntaxique attend une expression mais qu'elle n'est pas fournie.
      
      
        Déclaration [val] vide
        
        Cela se produit lorsque vous terminez une instruction en la laissant vide. Par exemple, le code suivant donnera l'erreur (notez le point-virgule de fin) :
          if (x < 0);
      
      
        Les appels de fonctions imbriquées ne sont pas autorisés
        
        Cela peut se produire lorsque vous essayez d'imbriquer des appels de fonction dans une déclaration, par exemple :
          ds_list_find_value(list, 0)).sprite_index
      
      
        L'utilisation de [val] n'est pas autorisée dans la version d'essai de GameMaker Studio 2.
        
        Ce message signifie que la fonction ou le symbole indiqué pour [val] n'est pas disponible dans le cadre de la licence d'essai de GameMaker Studio 2.
      
      
        Nombre d'arguments pour la fonction [val1] attendu [val2] got val[3]
        
        Cette erreur vous indique que vous n'avez pas fourni le nombre correct d'arguments à la fonction indiquée pour [val1], qui attend le nombre indiqué dans [val2] mais obtient ceux indiqués dans [val3].
      
      
        Nombre d'arguments pour la fonction [val1] attendue [val2] - [val3] obtenue [val4].
        
        Comme ci-dessus, mais pour une gamme d'arguments.
      
      
        Duplicate enum entry found
        
        Cette erreur vous indique que vous avez dupliqué un nom d'entrée de variable enum. 
      
      
        Duplicate enum found
        
        Cette erreur vous indique que vous avez défini deux ou plusieurs enums avec le même nom.
      
      
        Nom de variable manquant dans globalvar
        
        Cela vous indique que vous avez utilisé la déclaration globalvar mais que vous avez omis de fournir un nom de variable.
      
      
        Nom de variable manquant dans var
        
        Cela vous indique que vous avez utilisé la déclaration var mais que vous avez omis de fournir un nom de variable.
      
      
        Aucune #région correspondante trouvée pour #endregion
        
        Cette erreur signifie que vous avez déclaré une région de fin dans votre code, sans définir une région de début.
      
      
        Unclosed #region trouvé à la fin du script
        
        Cette erreur signifie que vous avez déclaré une région quelque part dans le code mais que vous n'avez pas défini de région finale pour celle-ci.
      
      
        Opérateur terminal inattendu [val]
        
        Cela signifie qu'il y a une erreur interne de validation de l'AST (vous ne devriez jamais voir cette erreur, mais si c'est le cas, pensez à remplir un rapport de bogue à partir du menu Aide). 
      
      
        Opérateur unaire inattendu [val]
        
        Cela se produit lorsqu'un opérateur unaire (comme +, -, =, etc...) a été trouvé dans votre code à un endroit où il n'est pas attendu, où [val] vous montrera l'opérateur.
      
      
        Opérateur ternaire inattendu [val].
        
        Cette erreur signifie que vous avez utilisé une des parties de l'opérateur ternaire de manière incorrecte quelque part dans votre code, où [val] indique la partie qui est en erreur.
      
      
        Try doit avoir une clause catch ou finally
        
        Cette erreur signifie que vous avez appelé la fonction try mais que vous avez omis d'inclure une clause catch ou finally.
      
      
        La macro [val] existe déjà
        
        Vous pouvez obtenir cette erreur lorsque vous essayez de définir une macro [val] portant le même nom qu'une macro déjà définie.
      
      
        Référence de variable malformée, obtenu [val].
        
        Cela signifie qu'il y a une erreur interne de validation de l'AST (vous ne devriez jamais voir cette erreur, mais si c'est le cas, pensez à remplir un rapport de bogue à partir du menu Aide). 
      
      
        Affectation à une expression d'égalité multi-relationnelle - GML ne prend pas en charge les affectations multiples dans une expression.
        
        Cette erreur vous indique qu'il y a un problème avec une affectation multi-opérateur (également appelée affectation composée) qui n'est pas prise en charge par le langage GameMaker. Cela inclut des choses comme "*=" ou "/=",
          etc...
      
      
        La macro [val] est inutilisée
        
        Cela se produit lorsque la macro [val] n'est pas utilisée dans votre code.
      
      
        Variable [val] référencée une seule fois
        
        Cela signifie que la variable donnée [val] n'est référencée qu'une seule fois dans votre code.
      
      
        Variable non assignée [val] référencée
        
        Cela signifie que la variable [val] a été référencée dans votre code, mais qu'aucune valeur ne lui a été attribuée auparavant.
      
      
        Seules les fonctions qui sont déclarées comme constructeurs peuvent utiliser l'héritage.
        
        Cette erreur vous indique que vous avez essayé d'utiliser l'héritage sur une fonction qui n'a pas été déclarée comme constructeur.
      
      
        Attribut de fonction inconnu [val]
        
        Cette erreur signifie que vous avez essayé d'utiliser un modificateur de fonction ([val]) invalide ou non identifié lors de la déclaration d'une fonction in-kine (un modificateur de fonction est quelque chose comme le mot-clé constructor, qui est supporté). 
      
      
        L'argument hérité "\"[val]\" ne fait pas partie des arguments de la fonction.
        
        Cette erreur se produit lorsque vous essayez de référencer un argument dans une fonction héritée qui n'a pas été déclaré dans la définition de la fonction parente.
      
      
        [val] Code de création
        
        Cela se produit lorsque vous avez une erreur [val] dans le code de création de la pièce quelque part.
      
    
  
   
   
   
  
    
      
        Retour : Rapport d'erreur
        Suivant : Erreurs de compilation
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

