 Erreurs de syntaxe Le premier niveau de rapport d'erreur lors de la programmation de vos jeux dans GameMaker Studio 2 trouve dans l' DnD™, et c'est le vérificateur de syntaxe. GameMaker votre code - ou ajoutez vos actions - GameMaker vérifie qu'il respecte la syntaxe établie pour le langage et signale tous les problèmes qu'il trouve afin que vous puissiez les résoudre avant de lancer le jeu ou de compiler un exécutable. Ces erreurs se répartissent en deux catégories principales: Avertissements: ceux-ci sont affichés pour des choses qui peuvent être une erreur, mais qui peuvent ne pas l'être et qui n'empêcheront probablement pas le jeu de se compiler, mais pourraient provoquer runtime erreurs d'exécution. Les causes les plus courantes de ces avertissements sont lorsqu'une variable est utilisée dans une expression et qu'elle n'a encore été définie nulle part ailleurs, ou lorsqu'une variable a été définie mais n'a pas été utilisée. Erreurs: ce sont des problèmes qui ne permettront pas au jeu de se compiler, et encore moins de s'exécuter. Ceux-ci doivent être corrigés avant de faire quoi que ce soit avec le code. Le tableau ci-dessous en montre les causes les plus courantes. Les erreurs de syntaxe seront mises à jour au fur et à mesure que vous écrivez votre code (il y aura une courte pause entre la saisie de quelque chose et les erreurs apparaissant dans cette fenêtre pour éviter que des erreurs ne soient signalées pour du code non terminé), et suivront le format:[object] - [event] - [Line Number] - [Position In Line]: [error string] Ou si l'erreur est dans un script, ce sera:[script] - [Line Number] - [Position in line]: [error string] Double clic sur l'une des erreurs affichées dans la console de sortie vous amènera à la ligne de l'événement d'objet ou du script qui contient l'erreur afin que vous puissiez la modifier. Il convient de noter que certaines de ces erreurs seront affichées à des endroits spécifiques de votre code, mais l'erreur réelle peut être causée par quelque chose ailleurs, ou un seul problème peut provoquer plusieurs messages d'erreur: Dans l'image ci-dessus, les trois des erreurs ont été provoquées par une seule erreur - l'utilisation d'un point-virgule "; "au lieu d'une virgule", "à la ligne 220 pour la fonction variable_instance_exists(). Le tableau ci-dessous répertorie les différentes erreurs de syntaxe et leurs principales causes: Erreur Taper Description  Référence malformée [val] Cela signifie qu'il y a une erreur de validation AST interne (vous ne devriez jamais voir cette erreur, mais si vous le faites, veuillez envisager de déposer un rapport de bogue à partir du menu d'aide )  Séquence d'échappement de caractères hexadécimaux malformée Cela peut se produire lorsque vous avez utilisé la valeur hexadécimale pour un caractère d'échappement dans une chaîne et que le format est incorrect.  Nœud inattendu [val] Cela signifie qu'il y a une erreur de validation AST interne (vous ne devriez jamais voir cette erreur, mais si vous le faites, veuillez envisager de déposer un rapport de bogue à partir du menu d'aide )  Exception lors de l’analyse de [val] Cela signifie qu'il y a une erreur de validation AST interne (vous ne devriez jamais voir cette erreur, mais si vous le faites, veuillez envisager de déposer un rapport de bogue à partir du menu d'aide )  Référence d'ID incorrecte [val]  Expression inutile [val] utilisée comme instruction Cette erreur se produit lorsque le vérificateur de syntaxe détecte une expression (affichée dans [val]) à l'endroit où il attendait une instruction. Par exemple, le code suivant lèvera l'erreur car il attend l'opérateur ternaire? mais rencontre 32:  temp_x = x < (room_width / 2)  32: room_width - 32; Référence de tableau incorrecte [val] Cela signifie que vous avez essayé de référencer un tableau d'une manière incorrecte, et [val] affichera la référence.  Opérateur binaire inattendu [val] Cette erreur se produit lorsque vous utilisez l'un des opérateurs binaires à un endroit où il ne devrait pas être utilisé, avec [val] indiquant où.  Chaîne non terminée littérale Cette erreur se produit lorsque vous ouvrez une chaîne à l'aide de @“ ou “ mais vous ne le fermez pas avant la fin du code.  Les guillemets simples ne sont plus autorisés pour la chaîne Cette erreur se produit lorsque vous essayez d'utiliser des chaînes entourées de guillemets simples, par exemple: «Hello World», au lieu de guillemets doubles, par exemple: «Hello World».  Erreur de syntaxe inattendue Cette erreur dénote une erreur de syntaxe que l'analyseur ne parvient pas à identifier plus précisément.  Vous avez "[val1]", attendu "[val2]" Cela se produit lorsque le vérificateur de syntaxe attend une valeur ou un symbole mais en obtient un différent, où [val1] est le symbole ou la valeur actuelle et [val2] le symbole ou la valeur attendue. Par exemple:  Got "{", expected "(" Vous avez "[val1]", attendu "[val2]" ou "[val3]" Comme ci-dessus, mais lorsque plusieurs symboles attendus sont possibles.  Expression attendue Cette erreur se produit lorsque le vérificateur de syntaxe attend une expression mais aucune n'est fournie.  Instruction [val] vide Cela se produit lorsque vous mettez fin à une instruction et que vous la laissez vide. Par exemple, le code suivant donnera l'erreur (notez le point-virgule de fin):  if (x < 0); Les appels de fonction imbriqués ne sont pas autorisés Cela peut se produire lorsque vous essayez d'imbriquer des appels de fonction dans une instruction, par exemple:  ds_list_find_value(list, 0)).sprite_index L'utilisation de [val] n'est pas autorisée dans la version d'essai de GameMaker Studio 2 Ce message signifie que la fonction ou le symbole indiqué pour [val] ne peut pas être utilisé sous la licence d'essai de GameMaker Studio 2.  Nombre d'arguments pour la fonction [val1] attendu [val2] obtenu val [3] Cette erreur vous indique que vous n'avez pas fourni le nombre correct d'arguments à la fonction affichée pour [val1], qui attend le nombre indiqué dans [val2] mais obtient ceux indiqués dans [val3].  Nombre d'arguments pour la fonction [val1] attendu [val2] - [val3] obtenu [val4] Comme ci-dessus uniquement pour une gamme d'arguments.  Entrée d'énumération en double trouvée Cette erreur vous indique que vous avez dupliqué un nom d'entrée de variable d'énumération  Enum en double trouvé Cette erreur vous indique que vous avez défini deux ou plusieurs énumérations avec le même nom.  Nom de variable manquant dans globalvar Cela vous indique que vous avez utilisé le globalvar déclaration mais omis de fournir un nom de variable.  Nom de variable manquant dans var Cela vous indique que vous avez utilisé le var déclaration mais omis de fournir un nom de variable.  Aucun #region correspondant trouvé pour #endregion Cette erreur signifie que vous avez déclaré une région de fin dans votre code, sans définir de région de début.  #Région non fermée trouvée à la fin du script Cette erreur signifie que vous avez déclaré une région quelque part dans le code mais que vous n'avez défini aucune région de fin pour celle-ci.  Opérateur de terminal inattendu [val] Cela signifie qu'il y a une erreur de validation AST interne (vous ne devriez jamais voir cette erreur, mais si vous le faites, veuillez envisager de déposer un rapport de bogue à partir du menu d'aide )  Opérateur unaire inattendu [val] Cela se produit lorsqu'un opérateur unaire (comme +, -, =, etc...) a été trouvé dans votre code à un endroit où il n'est pas attendu, où [val] vous montrera l'opérateur.  Opérateur ternaire inattendu [val] Cette erreur signifie que vous avez mal utilisé l'une des parties de l'opérateur ternaire quelque part dans votre code, où [val] montre la partie qui est en erreur.  Try doit avoir une clause catch ou finally Cette erreur signifie que vous avez appelé le try fonction mais ont omis d'inclure un catch ou finally clause.  La macro [val] existe déjà Vous pouvez obtenir cette erreur lorsque vous essayez de définir une macro [val] avec le même nom que celle qui a été précédemment définie.  Référence de variable incorrecte, obtenu [val] Cela signifie qu'il y a une erreur de validation AST interne (vous ne devriez jamais voir cette erreur, mais si vous le faites, veuillez envisager de déposer un rapport de bogue à partir du menu d'aide )  Affectation à une expression d'égalité multi-relationnelle - GML ne prend pas en charge plusieurs affectations dans une expression Cette erreur vous indique qu'il y a un problème avec une affectation multi-opérateur (également appelée affectation composée) qui n'est pas prise en charge par le GameMaker Language. Cela inclut des éléments tels que "*= " ou "/= ", etc...  La macro [val] n'est pas utilisée Cela se produit lorsque la macro [val] est inutilisée n'importe où dans votre code.  Variable [val] référencée une seule fois Cela signifie que la variable [val] donnée n'est référencée qu'une seule fois dans votre code.  Variable non attribuée [val] référencée Cela signifie que la variable [val] a été référencée dans votre code, mais qu'aucune valeur n'a été attribuée auparavant.  Seules les fonctions déclarées comme constructeurs peuvent utiliser l'héritage Cette erreur vous indique que vous avez essayé d'utiliser l'héritage sur une fonction qui n'a pas été déclarée en tant que constructeur.  Attribut de fonction inconnu [val] Cette erreur signifie que vous avez essayé d'utiliser un modificateur de fonction invalide ou non identifié ([val]) lors de la déclaration d'une fonction in-kine (un modificateur de fonction est quelque chose comme le constructor mot-clé, qui est pris en charge).  L'argument hérité \ "[val] \" n'est pas dans les arguments de fonction Cette erreur se produit lorsque vous essayez de référencer un argument dans une fonction héritée qui n'a pas été déclarée dans la définition de fonction parent.  [val] Code de création Cela se produit lorsque vous avez une erreur [val] dans le code de création de salle quelque part.  Retour: Rapport d'erreurs Suivant: Erreurs du compilateur © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

