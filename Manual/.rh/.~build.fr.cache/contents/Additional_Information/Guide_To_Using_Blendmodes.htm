
  
  Guide d'utilisation des Blendmodes
  Si vous utilisez GameMaker Studio 2 depuis un certain temps, vous avez certainement rencontré des modes de fusion, et vous les avez probablement utilisés dans vos jeux.
    Les modes de fusion sont un excellent moyen de modifier la façon dont un élément est dessiné pour obtenir des effets graphiques intéressants et spécifiques, mais savez-vous comment ils fonctionnent et comment les utiliser ? Il s'agit d'un sujet qui peut être source de confusion.
    Dans cette section, nous espérons dissiper une partie du mystère qui entoure les modes de fusion et vous permettre de les utiliser au maximum dans vos jeux.
   
  APERÇU
  Les modes de mélange indiquent à votre jeu de dessiner certaines choses en les mélangeant avec tout ce qui a été dessiné auparavant. Tout ce que vous dessinez à l'écran est composé de quatre éléments : rouge, vert, bleu et alpha.
    l'écran à l'aide du mode de fusion bm_normal. Ce mode de fusion dessine tous les pixels avec leur couleur et leur valeur alpha essentiellement inchangées (bien que, plus tard dans cette section, vous verrez que ce n'est pas tout à fait vrai...),
    mais GameMaker Studio 2 dispose d'un certain nombre de modes de fusion intégrés qui peuvent être définis pour modifier ce comportement.
  Lorsque GameMaker Studio 2 dessine un pixel, il y a une couleur source ( la couleur du pixel que vous allez dessiner) et une couleur de destination ( la couleur qui se trouve déjà dans le pixel vers lequel nous dessinons). Lorsque
    détermine la nouvelle couleur du pixel, GameMaker combinera les couleurs source et destination en fonction du mode de fusion, comme indiqué ci-dessus. Chaque composante des couleurs est stockée comme une valeur à virgule flottante entre 0 et 1,
    et la nouvelle couleur est calculée en multipliant chaque composante de la couleur source par un certain facteur et en multipliant chaque composante de la couleur de destination par un autre facteur, puis en additionnant les résultats composante par composante.
   
  MODES DE FUSION DE BASE
  GameMaker Studio 2 utilise la fonction gpu_set_blendmode() pour modifier le mélange que votre jeu utilise pour le dessin. Vous devez appeler cette fonction avant (par exemple) de dessiner
    un sprite, puis la rétablir après, comme ceci :
  gpu_set_blendmode(bm_add) ; draw_self() ;
     gpu_set_blendmode(bm_normal) ;
  
  Ce code dessine le sprite d'instance en utilisant un mode de fusion additif . Le mode de fusion additif est défini à l'aide de l'une des constantes GML disponibles, qui sont au nombre de quatre pour les modes de base :
  bm_normal bm_add
     bm_subtract
     bm_max
  
  Nous avons déjà vu à quoi ressemble le site bm_normal - puisque c'est ce qui est proposé par défaut ! - alors continuons à regarder les trois autres avec un peu plus de détails...
  
   
  bm_add
  
    Ce mode de fusion additionne les couleurs des pixels source et destination (mais n'affecte pas les valeurs alpha). Par exemple, si votre image d'arrière-plan est une couleur unie avec une valeur RVB de (100,15,70), et que vous dessinez ensuite un rectangle avec une valeur RVB de
      RVB de (120,25,30), alors (en utilisant bm_add) les valeurs RVB finales pour chaque pixel du rectangle seront (220,40,100). Notez que les valeurs de couleur ne peuvent pas dépasser 255 (ou être inférieures à 0), donc tout ce qui est supérieur à cette valeur sera fixé à 255.
    L'utilisation de ce mode de fusion
      est un excellent moyen d'obtenir cet aspect "néon". Il est le plus souvent utilisé pour les effets d'éclairage, les lasers ou tout ce que vous voulez faire apparaître comme une lueur ou une luminescence.
    
  
  bm_subtract
  
    Ce mode de fusion est un peu différent du précédent, car il fonctionne sur la base d'un pourcentage plutôt que d'une valeur directe. Ce pourcentage est ce qui sera soustrait de la couleur de destination (la couleur du pixel dessiné). Pour mieux expliquer cela
      Pour mieux expliquer cela, prenons un exemple.
    Imaginez que vous souhaitiez réduire de 25 % la valeur rouge de tous les pixels dessinés dans une zone de la pièce. Vous devrez d'abord obtenir 25 % de 255, puis convertir cette valeur en une valeur de couleur RVB, et enfin l'utiliser avec bm_subtract pour dessiner sur la zone.
      Quelque chose comme ceci :
    var red = (25 / 100) * 255 ;var col = make_colour_rgb(red, 0, 0) ;gpu_set_blendmode(bm_subtract) ;draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false) ;gpu_set_blendmode(bm_normal) ;
    En suivant la même règle, si vous vouliez simplement réduire la luminosité d'un arrière-plan de 50 %, vous auriez une couleur composée de 50 % de rouge, 50 % de vert et 50 % de bleu, c'est-à-dire : RVB (128, 128, 128). Ce mode de fusion est principalement utilisé pour dessiner des ombres, ou créer
      des effets de fondu intéressants.
    
  
  bmax
  
    Ce mode de fusion est plus complexe à expliquer, mais il multiplie essentiellement les couleurs source par l'alpha source, puis les ajoute aux valeurs des couleurs de destination multipliées par les valeurs inverses des couleurs source. Les mathématiques réelles derrière bm_max (et les autres modes de fusion)
      (et les autres modes de fusion) seront abordés dans la deuxième partie de notre article, mais tout ce que vous devez savoir, c'est que le résultat sera une couleur plus "saturée" et plus brillante, sans pour autant aboutir à la même brillance blanche pure que l'utilisation de bm_add.
    Ce mode de fusion peut être utile lorsque
      vous devez dessiner des images qui se chevauchent sans qu'elles deviennent si lumineuses qu'elles ne sont pas visibles. Les parties claires deviendront plus lumineuses, mais elles devraient conserver un certain niveau de couleur et de teinte. Notez cependant que la valeur alpha de l'image source
      aura également une influence sur l'effet final lorsque vous utilisez ce mode de fusion.
  
   
  Vous connaissez maintenant les principes de base de l'utilisation d'un mode de fusion dans GameMaker Studio 2. Il prend les valeurs RVB et alpha de l'image source (ce qui est dessiné) et les mélange avec les valeurs RVB et alpha de l'image de destination (ce qui est également dessiné).
    également). Ce mélange s'effectue en multipliant les composantes individuelles de chaque couleur de pixel et de chaque valeur alpha par différentes quantités, en fonction des effets que l'on souhaite obtenir. Grâce à ces connaissances, vous pouvez commencer à utiliser des modes de fusion dans vos jeux pour obtenir
    lasers lumineux, des ombres réalistes ou des effets de transition saturés, mais il y a encore beaucoup à apprendre ! Nous examinons ci-dessous les modes de fusion étendus, et explorons un peu les mathématiques qui les sous-tendent, afin que vous puissiez créer vos propres effets de fusion, tels que la multiplication ou la saturation.
    propres effets de fusion, comme la multiplication ou la superposition.
   
  Modes de mélange étendus
  Ci-dessus, nous avons parlé de la fonction gpu_set_blendmode()mais nous allons maintenant nous intéresser à gpu_set_blendmode_ext().
    Il s'agit (comme son nom l'indique) d'une fonction étendue permettant de définir des modes de fusion personnalisés , mais comment cela fonctionne-t-il ? Voyons d'abord la réponse technique sèche avant d'aller plus loin :
  
    La fonction gpu_set_blendmode_ext(src, dest) indique le mode de fusion à utiliser pour la couleur source et la couleur de destination. La nouvelle couleur est un facteur multiplié par la source et un autre facteur multiplié par la destination.
      la destination. Ces facteurs sont définis par cette fonction. Pour comprendre cela, la source et la destination ont toutes deux une composante rouge, verte, bleue et alpha. Ainsi, la source est (Rs, Gs, Bs, As) et la destination est
      (Rd, Gd, Bd, Ad). Toutes les valeurs sont considérées comme étant comprises entre 0 et 1.
  
  Maintenant, bien que ce texte soit correct et explique ce que font les modes de fusion, il n'est pas vraiment intuitif... alors entrons un peu plus dans les détails et expliquons de quoi il s'agit.
  Lorsque nous parlons de la source , nous parlons de la couleur et des valeurs alpha du pixel qui est dessiné, et lorsque nous parlons de la destination , nous parlons de la couleur et des valeurs alpha du pixel sur lequel il est dessiné.
    sur lequel il est dessiné. Pour simplifier les choses, nous pouvons écrire la couleur source sous la forme de ses composantes, comme ceci :
  
    (Rs, Gs, Bs, As) = le RGB et l'Alpha de la couleur que vous allez dessiner.
  
  Et la destination serait comme ceci :
  
    (Rd, Gd, Bd, Ad) = le RGB et l'Alpha de la couleur sur laquelle vous allez dessiner.
  
  Ainsi, lorsque nous dessinons quelque chose à l'écran, notre processeur graphique effectue les opérations suivantes pour chaque pixel :
  couleur_pixel_finale = (Rs,Gs,Bs,As) * facteur_de_blend_source + (Rd,Gd,Bd,Ad) * facteur_de_blend_destination
  Les facteurs de fusion mentionnés ci-dessus sont définis dans GameMaker Studio 2 par un certain nombre de constantes GML, et chacune d'entre elles représente un facteur par lequel les valeurs R, G, B et A de la source ou de la destination doivent être multipliées. Les facteurs disponibles
    sont les suivants
  
    bm_zero: le facteur de mélange est (0, 0, 0, 0)
    bm_one: le facteur de mélange est (1, 1, 1, 1)
    bm_src_colour: Le facteur de mélange est (Rs, Gs, Bs, As)
    bm_inv_src_colour: Le facteur de mélange est (1-Rs, 1-Gs, 1-Bs, 1-As)
    bm_src_alpha: Le facteur de mélange est (As, As, As, As)
    bm_inv_src_alpha: Le facteur de mélange est (1-As, 1-As, 1-As, 1-As, 1-As)
    bm_dest_alpha: Le facteur de mélange est (Ad, Ad, Ad, Ad)
    bm_inv_dest_alpha: Le facteur de mélange est (1-Ad, 1-Ad, 1-Ad, 1-Ad)
    bm_dest_colour: Le facteur de mélange est (Rd, Gd, Bd, Ad)
    bm_inv_dest_colour: Le facteur de mélange est (1-Rd, 1-Gd, 1-Bd, 1-Ad)
    bm_src_alpha_sat: Le facteur de mélange est (f, f, f, 1) ; f = min(As, 1-Ad)
  
  Les quatre modes de fusion "de base" dont dispose GameMaker Studio 2 sont en fait des composites de deux de ces facteurs de fusion.
  Exemple de fonctionnement de bm_normal
  
    Il est temps d'examiner un exemple pratique de la manière dont tout cela peut être utilisé pour le dessin dans GameMaker Studio 2. Pour cela, nous allons nous pencher sur bm_normal, qui est vraiment.. :
    gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha) ;
    L'un des problèmes que l'on rencontre avec les modes de fusion est la visualisation des résultats. Pour montrer les mathématiques qui se cachent derrière, nous utiliserons ce mode de fusion comme sujet de test car c'est celui que tout le monde utilise le plus et nous savons exactement à quoi nous attendre.
      ce qu'il faut en attendre. Imaginons que nous dessinions un rectangle de couleur (128, 255, 64, 255) sur un fond de couleur (64, 128, 255, 255) :
    Donc,
      notre mode de fusion ressemble à ça :
    Source : (128, 255, 64, 255) = (0,5, 1, 0,25, 1)Destination : (64, 128, 255, 255) = (0,25, 0,5, 1, 1)bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0, 0, 0, 0)(Rs,Gs,Bs,As)
      * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha(0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)(0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)
    Comme vous pouvez le voir, nous multiplions les valeurs de destination par 0, ce qui leur donne également une valeur de 0, ce qui signifie que les couleurs sources restent inchangées, de sorte que notre valeur de couleur finale est (128, 255, 64, 255). Vous pouvez voir comment l'inclusion de l'alpha affecte également
      cette valeur :
    Source (128, 255, 64, 128) = (0,5, 1, 0,25, 0,5)Destination : (64, 128, 255, 255) = (0,25, 0,5, 1, 1)bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0,5, 0,5, 0,5, 0,5)bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As, 1-As) = (0,5, 0,5, 0,5,
      0,5)(Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha(0,5, 1, 0,25, 0,5) * (0,5, 0,5, 0.5, 0,5) + (0,25, 0,5, 1, 1) * (0,5, 0,5, 0,5, 0,5)(0,25, 0,5, 0,125, 0,25) + (0,125, 0,25, 0,5, 0,5) = (0,375, 0,75, 0,625, 0,75)
      = (96, 192, 159, 192)
    Cela donne une couleur finale de pixel (96, 192, 159, 192), et donnera une image comme celle montrée ci-dessous :
    
    J'espère que vous voyez maintenant clairement ce que font les facteurs du mode de fusion, et comment les combiner peut modifier ce qui est dessiné pour créer des effets intéressants. Nous allons maintenant examiner un exemple pratique de la façon dont vous pouvez combiner ces facteurs pour créer vos propres
      modes de fusion personnalisés.
      
      
  
  Maintenant que vous connaissez le fonctionnement des modes de fusion et que vous avez vu un exemple de leur utilisation dans le dessin de tous les jours, voyons quelque chose de plus complexe...
   
  CRÉER VOS PROPRES MODES DE FUSION
  En utilisant les différents facteurs disponibles, vous pouvez créer vos propres modes de fusion pour obtenir des options de fusion qui ne vous sont pas accessibles normalement. Dans cet exemple, nous allons créer un effet de multiplication comme celui utilisé dans Photoshop. Nous pouvons
    pouvons simuler ce mode de fusion en utilisant deux de nos constantes de facteurs de mode de fusion mentionnées ci-dessus, comme ceci :
  gpu_set_blendmode_ext(bm_dest_colour, bm_zero) ;
  Avant de dessiner quelque chose à l'aide de ce mode de fusion, regardons à quoi il devrait ressembler dans Photoshop :
  En utilisant notre mode de fusion étendu, nous obtenons ce qui suit :
  (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) Couleur source * couleur dest + couleur dest * zéro = couleur source * couleur dest
  Le facteur de fusion bm_zero supprime effectivement la couleur de destination de l'équation (puisque zéro fois quelque chose est zéro), ce qui nous laisse avec la couleur source multipliée par le facteur de fusion de la couleur de destination.
    d'où le nom "multiplier" du mode. Pour utiliser ce mode dans GameMaker Studio 2, il vous suffit de placer quelque chose comme ceci dans votre événement de dessin:
  gpu_set_blendmode_ext(bm_dest_colour, bm_zero) ; draw_self() ;
     gpu_set_blendmode(bm_normal) ;
  
  L'image suivante est tirée d'un projet de test dans GameMaker utilisant ce code exact :
  Pouvez-vous voir la différence ? Probablement pas ! Il y aura, cependant, une certaine déviation
    entre les deux en raison des différences entre les outils de rendu utilisés, mais c'est presque exactement ce à quoi vous vous attendez. Notez cependant que tous les modes de fusion utilisés par les programmes artistiques ne sont pas disponibles dans GameMaker Studio 2, car certains d'entre eux peuvent forcer les valeurs de couleur à être modifiées.
    En effet, certains d'entre eux peuvent forcer les valeurs de couleur à dépasser 255 et ainsi créer des effets spéciaux, mais cela ne signifie pas que vous ne pouvez pas créer des imitations passables de ces effets, ou même de tout nouveaux effets, en les utilisant.
  Il est intéressant de noter qu'avec GameMaker Studio 2, vous pouvez aller encore plus loin en utilisant la fonction gpu_set_blendmode_ext_sepalpha().
    Celle-ci vous permet de séparer la composante alpha des différents facteurs du mode de fusion et de les utiliser individuellement pour créer encore plus de combinaisons possibles. Nous ne couvrirons pas cette fonction ici car elle est déjà expliquée en profondeur dans le manuel,
    mais elle mérite d'être mentionnée pour que vous sachiez que vous pouvez l'utiliser.
   
  SURFACES ET ALPHA
  Une dernière chose mérite d'être soulignée à propos des modes de fusion, à savoir la manière dont ils affectent la composante alpha d'une couleur. Lorsque vous dessinez simplement sur la surface de l'application ou
    le tampon d'affichage, vous n'avez pas vraiment besoin de prendre en compte la valeur alpha de destination car elle sera toujours égale à un. Cependant, les surfaces que vous créez vous-même sont différentes,
    puisque vous pouvez donner à une surface n'importe quelle valeur alpha comprise entre zéro et un. Cela donne lieu à des effets intéressants, contraires à ce que la plupart des gens attendent.
  Pour illustrer cela, nous allons voir comment dessiner en utilisant la valeur de base par défaut bm_normal. La plupart des gens pensent que si une surface est nettoyée avec un alpha de 0, et que l'on dessine quelque chose avec un alpha de 0,5, on obtiendra un alpha de 0,5.
    0,5 également... mais ce n'est pas le cas et beaucoup de gens pensent qu'il s'agit d'un "bug" dans la façon dont GameMaker Studio 2 rend les choses. Cependant, comme vous allez le voir, ce n'est pas du tout un bug !
  Supposons que vous ayez une surface dont chaque pixel est à l'alpha 0, puis que vous y dessiniez un cercle à l'alpha 0,5 en utilisant le mode de fusion bm_normal. La surface entière aura toujours l'alpha 0, mais dans le cercle, l'alpha sera en fait de 0,25,
    depuis :
  0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25
  Si vous dessinez ensuite un autre cercle dans le cercle existant, également avec un alpha de 0,5, l'alpha à l'extérieur des cercles sera de 0, entre les cercles de 0,25 et dans le plus petit cercle de 0,375 :
  0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375
  Si vous deviez continuer à dessiner un certain nombre de cercles de 0,5 alpha sur une surface de 0 alpha, puis dessiner cette surface sur la pièce, vous pourriez le voir clairement :
  Si vous ne savez toujours pas ce qu'est l'alpha, essayez de l'imaginer comme une couleur comme les autres. Il se comporte comme
    Il se comporte comme une couleur et tous les calculs sur lui sont effectués de la même manière. Il n'est simplement pas vraiment visible, alors que l'effet qu'il a sur les autres couleurs l'est. Ce qui nous amène à la dernière chose à noter lorsque vous utilisez des surfaces et des modes de fusion (même bm_normal)...
  Même si l'alpha de la surface est de 0, les composantes de couleur sont toujours là, elles existent et influencent toutes les opérations de mélange.. Ainsi, dessiner sur une surface à alpha zéro qui a été nettoyée en utilisant la couleur rouge (par exemple) mélangera les couleurs sources avec les couleurs de destination et donnera des effets différents de ceux que vous pensez.
    par exemple) mélangera les couleurs d'origine avec les couleurs de destination et donnera des effets différents de ceux que vous pouvez imaginer. L'image ci-dessus a été créée sur une surface compensée en noir sur un fond noir, mais si nous compensons la surface avec la couleur rouge, nous obtenons
    ceci à la place :
  J'espère que vous pouvez maintenant comprendre par vous-même pourquoi cela se produit en utilisant les formules que j'ai décrites ci-dessus et en appliquant les chiffres appropriés
    pour bm_normal.
   
   
   
  
    
      
        Retour : Informations complémentaires
        Suivant : Rapports d'erreurs
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

