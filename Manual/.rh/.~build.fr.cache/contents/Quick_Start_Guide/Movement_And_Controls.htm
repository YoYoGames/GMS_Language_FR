
  
  Mouvement et contrôles
  La section précédente de ce Guide de démarrage rapide a donné quelques exemples pour dessiner des objets à l'écran, mais dessiner des objets ne sert pas à grand chose si vous ne pouvez pas les déplacer... donc dans cette section nous allons vous donner
    Dans cette section, nous vous donnerons donc quelques exemples de mouvements pour vos objets, ainsi que des schémas de contrôle de base pour différents types de jeux. Tous les exemples sont donnés en utilisant le Drag and Drop™(DnD™) ainsi que le langage GameMaker(GML), vous pouvez donc utiliser celui avec lequel vous vous sentez le plus à l'aise.
    plus à l'aise. Notez que nous n'expliquerons pas les choses en profondeur ici, car nous voulons que vous commenciez à créer des choses aussi vite que possible, nous vous encourageons donc à explorer tous les liens au fur et à mesure et à utiliser la fonction "recherche" du manuel pour rechercher des informations supplémentaires.
    du manuel pour rechercher des informations supplémentaires sur tout ce dont vous n'êtes pas sûr.
  Avant d'aller plus loin, vous pouvez créer un nouveau projet ( GML ou DnD™) à partir de la page de démarrage, et ajouter (ou créer) quelques sprites ainsi qu'un ou deux objets - car nous vous donnerons du code que vous pourrez tester en les utilisant.
    code que vous pourrez tester en les utilisant - et assurez-vous que le projet dispose d'une salle pour y placer des instances. Ne vous préoccupez pas trop de l'apparence des sprites que vous créez, car même un simple carré blanc fera l'affaire.
    vous pouvez commencer à travailler sur les exemples listés ci-dessous.
   
  Se déplacer vers la souris
  
    L'une des façons les plus simples de faire bouger un objet et d'interagir avec le joueur est d'utiliser la souris. Dans cet exemple, nous allons vous montrer comment utiliser un code de base pour qu'un objet se déplace vers l'endroit où l'utilisateur a cliqué sur le bouton gauche de la souris.
       .
    Pour commencer, ouvrez un objet, attribuez-lui un sprite, puis donnez-lui un événement Global Left Mouse Down:
    
    Nous utilisons les événements de souris globaux parce qu'ils détectent un clic n'importe où dans la salle, alors que les événements de souris ordinaires ne détecteront un clic que si la souris clique effectivement dans la boîte de délimitation de l'instance. Dans cet événement, nous voulons ajouter ce DnD™ou GML:
    
    move_towards_point(mouse_x, mouse_y, 2) ;
    Ici, nous demandons à l'instance de se déplacer vers une position sur l'écran, dans ce cas la position "mouse_x" et "mouse_y" ("mouse_x"
      et "mouse_y" sont des variables  intégrées quicontiennent toujours la position actuelle du curseur de la souris). Le DnD™
      fait cela en réglant les variables "direction" et " speed" Variables d'instance,
      tandis que le GML le fait en utilisant la fonction move_towards_point() (qui définit également les variables speed et
      direction  , juste dans une seule fonction facile à utiliser).
    Placez une instance de cet objet dans une pièce et appuyez sur le bouton Play , puis cliquez sur  autour de la pièce pour que l'instance se déplace vers la souris.
      la pièce pour que l'instance se déplace vers la souris :
    Super ! L'instance de l'objet se déplace maintenant vers l'endroit où vous avez cliqué, et si vous maintenez le bouton enfoncé, l'instance continuera à suivre le curseur de la souris.
      continuera à suivre le curseur de la souris. Cependant, il y a un problème... Après avoir cliqué une fois et relâché, l'instance continuera à se déplacer et finira par quitter la pièce ! Il y a plusieurs façons de résoudre ce problème, et celle que vous choisirez dépendra de ce que vous voulez faire.
      dépendra de ce que vous voulez faire, mais la solution la plus simple pour l'instant est d'ajouter simplement un événement Global Mouse Button Released, donc ajoutez-le maintenant à l'objet et donnez-lui ce code :
    
    vitesse = 0 ;
    Avec ceci, l'instance ne suivra le curseur de la souris que tant que le bouton de la souris sera maintenu enfoncé, et lorsque vous relâcherez le bouton, elle cessera de se déplacer. Appuyez sur Play  et testez-le maintenant.
    Avant de quitter cet exemple, il y a un dernier problème que nous devons résoudre... Si vous cliquez et maintenez le bouton de la souris, mais ne déplacez pas le curseur, alors l'instance se déplacera vers le curseur puis "vibrera" autour de lui.
      Ceci est dû au fait que l'instance se déplace plus vite qu'un pixel à la fois et "dépasse" la position, puis essaie de revenir en arrière, puis dépasse à nouveau, etc... (augmentez la vitesse de mouvement à 5 ou quelque chose comme ça pour voir le problème si ce n'est pas immédiatement évident).
      problème si celui-ci n'est pas immédiatement évident).
    Pour résoudre ce problème, nous devons ajouter un Step Event à l'objet avec ce code :
    
    var _dist = point_distance(x, y, mouse_x, mouse_y) ; if _dist <= speed { speed = 0 ; }
    Ici, nous vérifions simplement la distance entre l'instance et la position de la souris, et si cette distance est égale ou inférieure à la vitesse actuelle, nous mettons la vitesse à 0.
      la souris, et nous n'avons pas ce problème de "vibration".
     
  
  Mouvement à 4 et 8 voies avec le clavier
  
    Dès le début de ce guide, nous vous avons montré le code DnD™et GML suivant pour déplacer une instance vers la droite de deux pixels à chaque pas de jeu :
    
    x = x + 2 ;
    Ce type de mouvement est appelé mouvement positionnel , car nous prenons essentiellement l'instance et la replaçons à une nouvelle position à chaque fois que le code est exécuté. Ce que nous allons faire dans cet exemple est de vous montrer comment
      d'utiliser ce type de mouvement pour déplacer une instance dans 4 directions : haut, bas, gauche et droite.
    Pour commencer, ouvrez un objet et attribuez-lui un sprite. Maintenant, nous pourrions ajouter divers événements clavier à ce stade, et pour chacun d'entre eux, faire en sorte que l'instance se déplace dans la direction souhaitée, cependant, nous voulons que le joueur soit capable de se déplacer dans une seule direction à la fois.
      dans une seule direction à la fois et faire cela avec seulement les événements clavier est un peu plus compliqué que de le faire en utilisant du code. Au lieu de cela, nous allons utiliser l'événement Step - que vous devez ajouter maintenant à l'objet - avec ce qui suit.
     DnD™ou GML pour utiliser les touches fléchées pour se déplacer :
    
    if keyboard_check(vk_left) { x = x - 2 ; }  else if keyboard_check(vk_right) { x = x + 2 ; }  else if keyboard_check(vk_up) { y = y - 2 ; }  else if keyboard_check(vk_down) { y = y - 2 ; }
    Nous utilisons une structure " if... else if... else if..." pour nous assurer que l'instance ne se déplacera que dans une seule direction à la fois, et donc que l'instance ne pourra se déplacer que vers le haut, le bas, la gauche ou la droite, mais pas en diagonale.
      en diagonale. Placez une instance de l'objet dans une pièce et appuyez sur le bouton Play   pour le tester maintenant ! Si tout s'est déroulé correctement, vous devriez avoir quelque chose
      comme ceci :
    
    Nous pouvons aussi modifier ce code pour convertir le mouvement à 4 en mouvement à 8 facilement... il suffit de retirer les commandes " else" des blocs de code pour que tout ressemble à ceci :
    
    if keyboard_check(vk_left) { x = x - 2 ; }  if keyboard_check(vk_right) { x = x + 2 ; }  if keyboard_check(vk_up) { y = y - 2 ; }  if keyboard_check(vk_down) { y = y - 2 ; }
    Maintenant, lorsque vous appuyez sur le bouton Play  , cela ressemblera à quelque chose comme ça :
    
    Une dernière chose qui mérite d'être notée pour les utilisateurs codant avec GML .... Lorsque vous utilisez le DnD™, vous pouvez sélectionner la touche du clavier que vous souhaitez utiliser dans une liste déroulante, mais avec GML, ce n'est pas aussi simple. Il y a un certain nombre de constantes de clavier que
      vous pouvez utiliser - comme les constantes des touches fléchées présentées dans le code ci-dessus - mais il n'y a pas de constantes pour les touches alphanumériques. Celles-ci sont gérées de manière légèrement différente, et vous devez utiliser la fonction ord().
      Le code ci-dessous vous montre comment cela fonctionnerait en utilisant WASD au lieu des touches fléchées :
    if keyboard_check(ord("A")) { x = x - 2 ; }  if keyboard_check(ord("D")) { x = x + 2 ; }  if keyboard_check(ord("W")) { y = y - 2 ; }  if keyboard_check(ord("S")) { y = y - 2 ; }
     
  
  Mouvement de la manette de jeu
  
    Nous avons abordé les mouvements de la souris et du clavier, il est donc temps d'aborder les mouvements du gamepad. Nous n'aborderons pas le d-pad, car il fonctionne de la même manière que le clavier (il suffit de modifier les fonctions du clavier
      dans l'exemple ci-dessus pour gamepad_button_check() ou If Gamepad button Down),
      Dans cet exemple, nous allons donc étudier l'utilisation du stick analogique pour les mouvements.
    Pour commencer, nous devons détecter le gamepad utilisé. Les manettes de jeu ont une valeur d'identification de 0 à 11, nous allons donc utiliser une boucle " for" pour détecter l'ID de toute manette de jeu connectée et stocker cette valeur d'identification dans une variable
      pour une utilisation ultérieure. Puisque nous ne voulons détecter que le premier gamepad connecté et non tous les autres, nous utiliserons la commande " break" après avoir détecté un gamepad afin qu'il " casse " la boucle (par exemple, si le premier gamepad connecté n'a pas été détecté, la commande " " ne sera pas utilisée).
      exemple, si le premier gamepad connecté est l'ID 4, alors la boucle ne s'exécutera que 5 fois, vérifiant les valeurs ID 0 - 4 et sortant de la boucle lorsque le gamepad est rencontré). Donc, créez (ou ouvrez) un objet, attribuez-lui un sprite, et ajoutez ensuite
      un Create Event avec ce qui suit :
    
    gamepad_id = -1 ; for (var i = 0 ; i < 12 ; i += 1 ;) { if gamepad_is_connected(i) { gamepad_id = i ; gamepad_set_axis_deadzone(gamepad_id, 0.2) ; break ; }  }
    
    Remarquez que dans le code ci-dessus, nous avons défini le paramètre  zone morte pour le gamepad. Cela s'explique par le fait que les sticks analogiques des différentes marques de manettes de jeu ont une sensibilité différente.
      ils peuvent être si sensibles que si vous ne définissez pas de zone morte, ils peuvent provoquer des mouvements indésirables dans vos jeux. Nous définissons donc la zone morte à une valeur telle que 0,2 pour indiquer à GameMaker Studio 2 d'ignorer toute valeur de manette de jeu inférieure à cette valeur absolue.
    Pour ajouter le mouvement réel, nous aurons besoin d'un Step Event, donc ajoutez-le maintenant et donnez-lui le DnD™ ou GML suivant :
    
    if gamepad_id > -1 { var _h = gamepad_axis_value(gamepad_id, gp_axislh) ; var _v = gamepad_axis_value(gamepad_id, gp_axislv) ; x += _h * 4 ; y += _v * 4 ; }
    Ici, nous vérifions le mouvement horizontal ou vertical du stick gauche . Les fonctions d'axe renvoient une valeur entre -1 et 1, donc pour l'axe horizontal, -1 correspond à la gauche, 0 à l'immobilité et 1 à la droite, et pour l'axe vertical, c'est -1 pour le haut, 0 pour l'immobilité et 1 pour le bas.
      pour le haut, 0 pour ne pas bouger et 1 pour le bas. Notez également que les valeurs sont comprises entre -1 et 1. Ainsi, par exemple, l'axe horizontal peut renvoyer une valeur de 0,5, ce qui signifie que le manche est à mi-chemin entre la position "repos" et la position complètement poussée
      vers la droite. Pour cette raison, nous multiplions ensuite la valeur par 4 (vous pouvez multiplier par n'importe quelle valeur, en fonction de la vitesse à laquelle vous souhaitez que l'instance se déplace) - cela signifie que la vitesse de l'instance variera en fonction de l'ampleur du mouvement effectué sur l'axe du stick.
      mouvement effectué sur l'axe du stick.
    Placez une instance de cet objet dans une pièce et appuyez sur le bouton Play .  puis déplacez-vous en utilisant le stick gauche de votre manette de jeu connectée.
      manette de jeu connectée. Vous devriez voir quelque chose comme ceci :
    
     
  
  Mouvement avancé à 8 voies
  
    Dans ce dernier exemple, nous allons revoir notre code de mouvement à 8 voies et résoudre un problème qu'il présente, à savoir que le mouvement diagonal est en fait plus rapide que le mouvement haut/bas/gauche/droite. C'est simplement parce que lorsque vous vous déplacez en diagonale, vous vous déplacez
      le long de l'hypoténuse d'un triangle rectangle créé par les valeurs de mouvement x/y :
    
    Pour mieux comprendre ce qui se passe, supprimons tout le texte et les sprites et montrons simplement la même ligne de mouvement tournée de 45° pour qu'elle soit horizontale :
    
    Comme vous pouvez le voir, la différence est assez évidente, et si l'instance se déplace de plus de 1 ou 2 pixels par pas, alors il devient très perceptible que le mouvement diagonal est beaucoup plus rapide ! Alors comment limiter cela ? Il y a un certain nombre de façons de procéder
      mais nous allons nous concentrer sur une seule d'entre elles, car elle introduit quelques fonctions et concepts qui vous seront utiles plus tard dans vos jeux.
    Pour gérer cela, nous allons devoir stocker les valeurs d'entrée des touches pressées indépendamment dans desvariables, puis les vérifier et les déplacer en fonction de la combinaison de touches qui a été pressée.
      en fonction de la combinaison de touches qui ont été pressées. Donc, pour cela, vous aurez besoin d'un objet avec un sprite assigné, et vous devrez lui donner un Step Event avec le DnD™ ou GMLsuivant :
    
    NOTE: Nous avons réparti le DnD™ ci-dessus sur deux colonnes pour faciliter la visualisation, mais dans l'éditeur DnD™, il sera placé consécutivement.
    var _left = keyboard_check(vk_left) ; var _right = keyboard_check(vk_right) ; var _up = keyboard_check(vk_up) ; var _down = keyboard_check(vk_down) ; var _hspd = _right - _left ; var _vspd = _down - _up ;
    Nous devrons ajouter un peu plus de code pour bouger réellement, mais avant cela, expliquons un peu tout cela. Nous voulons convertir les mouvements gauche/droite/haut/bas en valeurs de vitesse horizontale et verticale équivalentes, donc pour ce faire, nous récupérons la valeur de chaque touche
      puis nous faisons quelques calculs de base pour obtenir les valeurs de vitesse. Cela fonctionne parce que si une touche est enfoncée, l'action ou la fonction de contrôle renvoie "1", et si elle ne l'est pas , la fonction renvoie "0".
      0. Donc, si - par exemple - la touche droite est enfoncée, vous avez "1 - 0 = 1" pour le " _hspd", et si la touche gauche est enfoncée, vous avez "0 - 1 = -1" pour le " _hspd".
      (et si les deux sont pressés, alors c'est "1 - 1 = 0", donc l'instance ne bougera pas). Rappelez-vous que dans une pièce de GameMaker Studio 2, pour se déplacer vers la droite, nous ajoutons à la position x et pour se déplacer vers la gauche, nous soustrayons.
      Ce code nous donnera une valeur positive ou négative que nous pourrons ajouter ou soustraire pour nous déplacer horizontalement ou verticalement en fonction de la saisie au clavier.
    Maintenant nous pouvons ajouter le code qui déplace réellement l'instance, donc - toujours dans l'événement Step, et après le code ci-dessus - ajoutez ceci :
    
    if (_hspd != 0 || _vspd != 0) { var _spd = 4 ; var _dir = point_direction(0, 0, _hspd, _yspd) ; var _xadd = lengthdir_x(_spd, _dir) ; var _yadd = lengthdir_y(_spd, _dir) ; x = x + _xadd ; y
      = y + _yadd ; }
    Le code ci-dessus vérifie d'abord si l'une des deuxexpressions est vraie, c'est-à-dire si les variables de vitesse horizontale ou verticale sont différentes de 0. Notez comment la vérification GML "
      if " en GML utilise le symbole " ||". Cela signifie " or" en programmation, donc - en langage clair - vous vérifiez que
    si la variable _hspd n'est pas égale à zéro ou si la variable _vspd n'est pas égale à zéro.
    Vous pouvez enchaîner plusieurs expressions dans des contrôles " if" de cette façon, et il existe plusieurs façons différentes d'évaluer ces expressions (pour plus d'informations, veuillez consulter la section sur les expressions ici ).
    La section suivante du code stocke une valeur pour la vitesse de mouvement réelle dans une variable et obtient ensuite une direction en utilisant les valeurs _hspd et _vspd , qui peuvent être -1, 0 ou 1. La fonction de direction
      vérifie à partir de (0, 0) car nous n'utilisons pas les coordonnées de la pièce, et nous voulons plutôt qu'elle soit évaluée comme une direction de 0° à 360° basée sur les valeurs de la variable. Le diagramme suivant illustre ce qui se passe mieux que d'essayer de l'expliquer en
      mots :
    
    REMARQUE: Dans GameMaker Studio 2, la direction est calculée dans le sens inverse des aiguilles d'une montre. Ainsi, 0° et 360° sont à droite, 90° est en haut, 180° est à droite et 270° est en bas.
    Enfin, nous utilisons les lengthdir_x() et lengthdir_y() 
      pour déplacer réellement la variable. Il s'agit de fonctions  vecteur  qui prennent une longueur (distance) et une direction, puis calculent la nouvelle position sur l'axe donné en fonction de ces valeurs (voir les descriptions des fonctions pour une explication approfondie).
      valeurs (voir les descriptions des fonctions pour une explication plus approfondie).
    Cela fait beaucoup de choses à assimiler d'un coup, et ne vous inquiétez pas si vous ne comprenez pas tout ! Cela viendra avec le temps ! Il ne vous reste plus qu'à ajouter une instance de cet objet dans une pièce, puis à appuyer sur le bouton "Play".  ,
      et vous devriez obtenir un mouvement fluide à 8 voies sans aucun des problèmes liés au déplacement en diagonale :
    
  
   
  Avec ces exemples - et les précédents pour le dessin - nous espérons que vous avez acquis suffisamment de connaissances pour commencer à réaliser vos propres projets ! La dernière page de ce guide de démarrage rapide contient un résumé de certaines des choses que vous avez apprises, ainsi que des liens vers d'autres supports pédagogiques.
    ainsi que des liens vers d'autres supports pédagogiques.
   
   
  
    
      
        Retour : Index
        Suivant : Résumé
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

