
  
  Qu'est-ce que la programmation ?
  Dans la section précédente, nous avons décrit comment GameMaker Studio 2 fonctionne pour créer votre jeu, mais quels que soient les sprites, les objets ou les pièces que vous avez ajoutés, rien ne se produira si vous ne l'avez pas programmé 
    pour qu'ils se produisent. Mais, qu'est-ce qu'un programme ?
  Au sens général, un programme est simplement un ensemble d'instructions (ou  déclarations) que vous donnez à l'ordinateur pour lui demander d'effectuer certaines
    tâches. Ces tâches peuvent varier considérablement, allant du simple fait de demander à l'ordinateur de dessiner quelque chose à l'écran, au calcul d'une valeur basée sur une entrée utilisateur et à sa réaction, mais dans tous les cas, il s'agit d'une structure logique qui donnera un résultat.
    Dans la page précédente, nous avons parlé du déplacement d'une instance d'un objet vers la droite de 2 pixels, alors regardons le programme réel qui ferait cela :
  En Drag And Drop™(DnD™), cela ressemblerait à ceci :
  
  Et en utilisant le langage GameMaker(GML), cela ressemblerait à ceci :
  x = x + 2 ;
  Pour comprendre ce qui se passe ci-dessus, nous devons d'abord parler des variables , puis des fonctions et enfin des conditionnels, car ces trois éléments constituent généralement la majeure partie de tout programme.
    l'essentiel de tout programme.
   
  Variables
  
    Les variables sont la pierre angulaire de la programmation, avec les fonctions (que nous aborderons brièvement dans un moment). Une variable est simplement une valeur nommée, et dans le cas ci-dessus, la variable s'appelle "x".
      Maintenant, "x" peut être n'importe quelle valeur, comme -126, ou 583, ou même 1,56378, mais la valeur réelle de "x" n'est pas pertinente car elle peut varier (d'où le nom de " variable "). Ce qui est important
      c'est que nous prenons "x" et que nous lui ajoutons 2. Il est intéressant de noter que dans ce cas, "x" est une variable intégrée , ce qui signifie qu'elle est créée par GameMaker Studio 2 pour tous les objets.
      par GameMaker Studio 2 pour tous les objets, mais vous pouvez également créer vos propres variables.
    Pour créer une variable, il faut la déclarer avant de pouvoir l'utiliser. Déclarer une variable, c'est dire à GameMaker Studio 2 que cette nouvelle variable existe et qu'elle a une valeur initiale. Pour déclarer une variable, il suffit de faire quelque chose comme
      ceci :
    
    ou :
    points = 0 ;
    Une fois qu'une variable a été déclarée, elle peut être utilisée dans d'autres codes ou actions programmés. Ce qu'il y a de bien avec les variables, c'est qu'elles vous permettent de "réutiliser" une valeur à de multiples endroits, sans avoir à vous soucier de ce qu'est cette valeur.
      valeur. Par exemple, disons que vous avez une variable "damage" et que vous l'utilisez à différents endroits pour indiquer à GameMaker Studio 2 d'infliger une certaine quantité de dégâts à d'autres objets du jeu. Nous pouvons déclarer "damage"
      à 20, mais nous décidons plus tard que cette valeur est trop élevée et nous voulons la remplacer par 10. Si nous avions utilisé la valeur 20 au lieu d'une variable, nous aurions dû passer par tout notre code ou toutes nos actions pour changer 20 en 10, ce qui prend du temps et est source d'erreurs.
      d'erreurs. Cependant, l'utilisation d'une variable signifie que nous ne devons la changer qu'une seule fois en 10 lorsque nous la déclarons et que le reste du code ou des actions utiliseront cette nouvelle valeur.
    Il convient de noter qu'il existe de nombreux types de variables, et que chacune d'entre elles peut être utilisée de manière légèrement différente. Nous n'en parlerons pas ici, mais vous pouvez trouver plus d'informations dans la section Présentation du langage GameMaker du manuel.
    Cependant, les variables ne sont que la première partie de l'histoire. La partie suivante est l'utilisation des fonctions...
     
  
  Fonctions
  
    L'autre partie importante de la programmation est l'utilisation de fonctions et de variables. Une fonction est simplement une instruction donnée à l'ordinateur pour qu'il fasse quelque chose, et elle peut avoir des valeurs d'entrée ainsi que des valeurs de sortie (c'est-à-dire que vous pouvez lui donner une valeur, et elle effectuera une opération et retournera une valeur différente).
      une valeur à l'ordinateur, qui effectuera une opération et renverra une valeur différente), bien que toutes les fonctions ne nécessitent pas d'entrée et n'ont pas de sortie. Pour mieux comprendre cela, examinons une fonction intégrée dans GameMaker Studio 2.
    La fonction que nous allons examiner est instance_number()qui, dans DnD™, est l'action Get Instance Count.
      Cette fonction/action va récupérer le nombre d'instances d'un objet donné dans la salle de jeu, et vous l'utiliserez comme ceci :
    
    ou :
    nombre = numéro d'instance(obj_Enemy) ;
    Dans les deux exemples ci-dessus, la fonction prend un ID d'objet comme valeur d'entrée (le paramètre  argument ou paramètre) et donne une valeur de sortie (la valeur de retour ),
      qui est le nombre d'instances de l'objet donné présentes dans la pièce lorsque la fonction/action a été appelée. Notez que nous utilisons une variable pour stocker la valeur de retour, la variable "number". Cette variable peut
      être déclarée avant l'exécution de ce code, ou bien elle sera considérée comme déclarée lors de l'exécution du code et la valeur de retour de la fonction/action lui sera attribuée.
    Il convient de noter que vous n'êtes pas seulement limité à l'utilisation des actions intégrées de GameMaker Language ou de DnD™et que vous pouvez en fait construire vos propres fonctions à utiliser pour étendre les possibilités de programmation (vous pouvez en savoir plus à ce sujet ici pour GML et ici pour DnD™).
    Vous pouvez faire beaucoup de choses avec les fonctions et les variables, mais elles seraient pratiquement inutiles sans la dernière pièce importante de l'histoire de la programmation, les conditionnels...
     
  
  Conditionnels
  
    Une grande partie de la programmation consiste à poser des questions. Ces questions sont généralement simples et peuvent être évaluées à true ou false, et sont appelées conditionnelles (et les valeurs de true et de
      false  sont appelées valeurs booléennes ). La conditionnelle la plus courante et la plus utilisée est la question "if", qui est utilisée pour vérifier si quelque chose est true ou false et
        puis d'agir en conséquence. Un exemple simple serait de retirer un personnage du jeu si sa santé passe en dessous de zéro, ce qui, en langage clair, s'exprimerait ainsi :
    si la variable de caractère "hp" est inférieure ou égale à zéro, alors détruisez-la.
    Pour transformer ce qui précède en code, nous aurions ceci :
    
    ou :
    if (hp <= 0)
       {
       instance_destroy() ;
       }
    Donc, ci-dessus, nous posons la question "si la variable hp est inférieure ou égale à 0" et ensuite, si cette évaluation est vraie, nous appelons la fonction instance_destroy() ou
      l'action Destroy Object Instance. Notez que le "then" (if something... then something...) est implicite et qu'il n'est pas nécessaire de l'ajouter.
      vous n'avez pas besoin de l'ajouter, et notez également que dans le code GML, nous utilisons des accolades {} pour "bloquer" le code que nous voulons exécuter lorsque le " if" évalue true (en
     DnD™cela est symbolisé par l'abandon des actions à droite de l'action "If"). Tout ce qui est ajouté entre les accolades ne sera exécuté que si le " if" évalue à
      true , de sorte que vous pouvez avoir plus d'une déclaration exécutée dans un seul "bloc".
    Une autre chose à noter lors de l'utilisation de la condition "if" est que nous pouvons y ajouter une déclaration "else", de sorte que la condition deviendrait alors " si quelque chose évalue
      à true alors faites quelque chose, sinon faites quelque chose de différent". De cette façon, nous pouvons traiter une expression conditionnelle qui renvoie true  ou  false.
      Donnons un exemple de cela aussi :
    
    ou :
    if (countdown <= 0)
       {
       instance_create_layer(x, y, "Instances", obj_Bullet) ;
       countdown = 30 ;
       } 
       else
      
       {
       countdown = countdown - 1 ;
       }
    Le code ci-dessus se traduit en langage clair par :
    si la variable du compte à rebours est inférieure ou égale à zéro, alors :
       crée une instance de l'objet "obj_Bullet" à la position x/y actuelle sur la couche "instances",
       réinitialise la variable du compte à rebours à 30.
       sinon :
      
       soustraire un à la variable du compte à rebours.
    Ne vous inquiétez pas trop de la partie création d'instance du code ci-dessus, car nous la couvrirons plus en détail dans les sections suivantes. La chose importante à comprendre ici est que vous pouvez créer des expressions conditionnelles qui vérifient
      si quelque chose est true ou false et faire en sorte que votre programme réponde de différentes manières. Cela peut sembler très simple, mais c'est en fait incroyablement puissant et c'est la base de presque tout ce que vous ferez en programmant dans GameMaker.
      tout ce que vous ferez en programmant dans GameMaker Studio 2.
  
   
  Donc, pour répondre à notre question "Qu'est-ce que la programmation ?", nous pouvons dire que la programmation utilise une combinaison d'instructions - qui  peuvent utiliser  variable
   s pour former des  expressions, de fonctions pour effectuer des tâches, et conditionnel
      pour poser des questions - et à exécuter ces instructions simultanément pour atteindre un objectif. Vous pouvez voir ci-dessous un programme légèrement plus complexe en DnD™et GML. Pouvez-vous deviner ce qu'il fait ?
  
  ou :
  si mouse_check_button_pressed(mb_left) == true
     {
     x = mouse_x
     y = mouse_y
     image_blend = c_red ;
     } 
     else
    
     {
     if mouse_check_button_released(mb_left) == true
     {
     image_blend = c_white ;
     } 
     }
  SpoilerLe code ci-dessus vérifie d'abord si un bouton de la souris a été pressé (le bouton gauche de la souris, qui est défini à l'aide de la constante " mb_left"),
    et s'il a été pressé, il déplace l'instance qui exécute le code à la position actuelle de la souris (définie à l'aide des variables intégrées " mouse_x" et " mouse_y") et
    définit également la couleur de fusion de l'instance en rouge. Si le bouton de la souris n'a pas été pressé, alors il vérifie si le bouton de la souris a été relâché, et si c'est le cas, il réinitialise la couleur de mélange de l'instance en blanc (notez que
    encore une fois, nous utilisons des constantes  intégrées - " c_red" et " c_white" - pour définir facilement les couleurs).
  
   
  Avec un peu de chance, vous avez maintenant une idée plus précise de ce qu'est la programmation, alors passons à l'exploration de l'IDE GameMaker Studio 2 et voyons comment ajouter des ressources comme des sprites , des objets et d'autres ressources importantes dont votre jeu aura besoin.
   objets et d'autres ressources importantes dont votre jeu aura besoin.
   
   
   
  
    
      
        Retour : Index
        Suivant : Création de sprites
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

