 Commentaires de script JSDoc Si vous souhaitez que vos fonctions personnalisées soient complétées par le code et afficher les arguments requis, etc. dans l'éditeur de code, vous devez ajouter des commentaires de style JSDoc. Ces commentaires sont utilisés pour indiquer à la fonction de saisie semi-automatique comment la fonction doit être utilisée et remplie dans l' éditeur de script. Le format d'un en-tête de fonction typique serait d'avoir le nom de la fonction, la description de la fonction, puis la liste des différents arguments (paramètres) que la fonction prend, en veillant à commencer chaque ligne avec une triple barre oblique inverse " /// "car cela indique à GameMaker Studio 2 d'analyser le commentaire comme étant de style JSDoc. Les commentaires eux-mêmes doivent recevoir un identifiant (précédé de"@ ") et le contenu, et les identifiants disponibles sont les suivants: Identifiant Teneur@function / @func Le nom complet de la fonction et les arguments de la fonction, par exemple: my_func(x, y, colour).@description / @desc Une description générale de ce que fait la fonction.@param / @arg / @argument Le type d'argument (facultatif), inclus dans {}, le nom de l'argument et une brève description (avec des espaces entre les deux) Pour avoir une idée de comment cela fonctionnerait lors de l'écriture de vos propres fonctions, prenons cet exemple de base:function is_same_object(_id, _obj) {
     if _id.object_index == _obj     {     return true;     } else return false; }
   Tout ce que ce script fait est de vérifier si une instance a le même object_index comme un objet donné et serait appelé simplement comme:if is_same_object(id, obj_Player)     {     instance_destroy()     } Cependant, écrire cela dans l'éditeur de code ne vous montrerait pas les arguments ni ne vous aiderait lors de son utilisation, nous devons donc ajouter une description, un nom de fonction et les arguments sous forme de commentaires JSDoc comme celui-ci:/// @function            is_same_object(id, object) /// @description         Compare an instance object index with that of another. /// @param {real} _id    The unique instance ID value of the instance to check. /// @param {real} _obj
      The object index to be checked against. function is_same_object(_id, _obj) {
     if _id.object_index == _obj     {     return true;     } else return false; }
   Maintenant, lorsque vous appelez cette fonction dans le code n'importe où, vous obtiendrez une aide à la saisie semi-automatique et à l'argument, etc. Dans l'image ci-dessus, la partie supérieure montre la fonction de la saisie semi-automatique et la partie inférieure montre le fonctionnement de l'assistant d'argument en bas. Notez que les parties facultatives «type» et «description» obligatoires de @param ne sont pas affichés par défaut dans le code IDE complet, et pour les voir, vous devez activer les options dans les Préférences GML. Étant donné que les scripts peuvent contenir plusieurs fonctions, vous devez vous habituer à définir la fonction comme ceci avant chacune d'entre elles dans le script, comme ceci:  Retour: L'éditeur de script Suivant: Extraits de code © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

