
  
  ExtensionsiOS / tvOS 
  Pour créer une extension pour iOS ou tvOS, vous devez le faire en deux parties. La première partie consiste à ajouter l'extension elle-même, avec les fichiers requis, etc... et la seconde consiste à créer les fonctions et les macros/constantes dont l'extension a besoin.
    Les fonctions et les constantes sont ajoutées en utilisant des fichiers placeholder pour les regrouper, donc vous ajoutez un placeholder et ensuite vous définissez les fonctions et les macros comme expliqué dans la section ici .
    Pour ajouter le reste des fichiers, vous devez d'abord cocher l'option iOS et/ou la tvOS dans la section Additional Features de l'éditeur pour ouvrir la fenêtre Extension Properties correspondante (l'image ci-dessous montre la fenêtre iOS Properties).
    l'image ci-dessous montre la fenêtre de propriétés iOS, mais la fenêtre tvOS est exactement la même) :
  
  Ici, vous donnez les détails suivants :
  
    Drapeaux du linker / drapeaux du compilateur: Certains frameworks et SDK tiers nécessitent l'ajout de drapeaux de liaison et de compilation supplémentaires pour fonctionner, qui peuvent être spécifiés ici (voir la documentation qui accompagne le SDK ou le framework en question pour plus de détails).
      en question pour plus de détails).
    Nom de la classe: Votre extension peut avoir plusieurs classes, chaque classe ayant ses propres fonctions et constantes. Vous devez donc lui donner un nom qui reflète son objectif.
    Nom de la classe du délégué d'application: Le nom de votre classe de délégué d'application personnalisée. Ce paramètre permet à l'extension de remplacer/étendre la fonctionnalité de base de l'application. Pour utiliser cette fonctionnalité, vous devez procéder comme suit :
      
        Assurez-vous que les fichiers source du délégué portent le même nom que la classe du délégué (par exemple, @interface MyCustomAppDelegate doit être défini dans " MyCustomAppDelegate.h").
        Ajoutez la variable d'environnement ${YYExtAppDelegateIncludes} au début du fichier d'en-tête du délégué de votre application. Elle sera remplacée au moment de la compilation par les fichiers inclus pertinents pour la classe de délégué parent.
        Utilisez la variable d'environnement ${YYExtAppDelegateBaseClass} comme classe de base pour votre délégué d'application personnalisé. Elle sera remplacée lors de la compilation par la classe de délégué de base correcte.
           Pour vous assurer que votre extension fonctionne avec toutes les autres extensions qui utilisent des délégués d'applications personnalisées, vous devez appeler toutes les méthodes de la classe de base à partir des méthodes surchargées de votre classe enfant. Avant d'appeler la méthode de la superclasse, vous devez vous assurer que celle-ci
          est implémentée dans la hiérarchie de la classe pour éviter les erreurs, par ex :
      
     - (BOOL)application :(UIApplication *)application willFinishLaunchingWithOptions :(NSDictionary *)launchOptions {
         // Vérifiez si une superclasse implémente cette méthode et appelez-la if([[self superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions :)]) return [super application:application willFinishLaunchingWithOptions:launchOptions] ; else return TRUE ; }
     
    
    System Frameworks: Ici, vous pouvez ajouter n'importe quel cadre dusystème iOS à votre extension. Vous pouvez les ajouter en cliquant sur le bouton , ce qui ajoutera un cadre virtuel, que vous pourrez ensuite modifier en cliquant lentement sur . Vous pouvez en savoir plus sur les frameworks système disponibles ici. Pour supprimer un framework système, il suffit de le sélectionner puis de cliquer sur le bouton .
    Injecter dans Info.plist: Ici vous pouvez ajouter n'importe quel code à injecter dans le fichier info.plist.
    Cadres et paquets tiers: Cette section permet d'ajouter des bundles tiers et SDK. Comme pour les frameworks système, cliquez sur le bouton  pour les ajouter, puis cliquez lentement sur  pour les modifier. En les sélectionnant puis en cliquant sur , vous les supprimerez (consultez la documentation fournie avec le SDK choisi pour obtenir des informations sur le nom du framework). Si le paquet de frameworks/SDK se trouve sur votre Mac de développement, vous devez ajouter le chemin dans " Enter framework path on Mac ".
      et cliquez sur le bouton , ou si le SDK ou le code source se trouve sur votre PC, utilisez le bouton Add Source.
    CocoaPods: Ici, vous pouvez donner le nom de tous les CocoaPods que l'extension va utiliser à la place (ou en plus) de tous les SDK et frameworks qui ont été ajoutés. Notez qu'il existe une option de jeu pour iOS et pour tvOS permettant d'ajouter un podfile à GameMaker Studio2, qui est nécessaire si vous ajoutez des CocoaPods dans cette section.
    DépendancesCocoaPods: Cette section vous permet de lister les différentes dépendances requises par les CocoaPods ajoutés dans la section précédente. Notez qu'il existe une option de jeu pour iOS et pour tvOS permettant d'ajouter un Podfile.lock à GameMaker Studio2, qui est nécessaire si vous ajoutez des dépendances CocoaPod dans cette section.
  
  Si des cadres de système ou des cadres tiers ont été ajoutés à votre extension, ils seront désormais répertoriés dans la fenêtre Propriétés de l'extension , avec une case à cocher à côté de chacun d'eux. Si vous cochez la case, vous activez la liaison faible.
    ce qui est utile si vous avez besoin de "remplacer" un symbole de la bibliothèque incluse par votre propre valeur, mais il faut noter que cela ralentira l'établissement des liens.
  Pour plus d'informations sur la création d'extensions iOS et tvOS, veuillez consulter la base de connaissancesYoYo Games, et pour des informations sur l'utilisation de CocoaPods
    dans les extensions, veuillez consulter le guide suivant :
  
    iOS et tvOS: utilisation des pods Cocoa
  
   
   
   
  
    
      
        Retour : L'éditeur d'extension
        Suivant : Création d'une extension
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

