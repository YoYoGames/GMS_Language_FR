 Extensions iOS / tvOS Pour créer une extension pour iOS ou tvOS vous devez le faire en deux parties. La première partie serait d'ajouter l'extension elle-même, ainsi que les fichiers requis, etc... et la seconde consiste à créer les fonctions et les macros / constantes dont l'extension a besoin. Les fonctions et les constantes sont ajoutées à l'aide de fichiers d'espace réservé pour les regrouper, vous devez donc ajouter un espace réservé, puis définir les fonctions et les macros comme expliqué dans la section ici. Pour ajouter le reste des fichiers, vous devez d'abord cocher la case iOS et / ou tvOS dans la section Fonctionnalités supplémentaires de l'éditeur pour ouvrir la fenêtre Propriétés d'extension appropriée (l'image ci-dessous montre la fenêtre des propriétés iOS la tvOS est exactement la même): Ici, vous donnez les détails suivants: Indicateurs de liens / indicateurs de compilateur: certains frameworks et SDK tiers nécessitent l'ajout d'indicateurs de liens supplémentaires et d'indicateurs de compilateur pour fonctionner, qui peuvent être spécifiés ici (voir la documentation qui accompagne le SDK ou le framework en question pour plus de détails). Nom de la classe: votre extension peut avoir plusieurs classes, chaque classe ayant ses propres fonctions et constantes, vous devez donc lui donner un nom qui reflète son objectif Nom de classe de délégué d'application: nom de votre classe de délégué d'application personnalisée. Ce paramètre permet à l'extension de remplacer / d'étendre les fonctionnalités principales de l'application. Pour utiliser cette fonctionnalité, vous devez procéder comme suit: Assurez-vous que les fichiers source du délégué portent le même nom que la classe du délégué (par ex. @interface MyCustomAppDelegate doit être défini dans " MyCustomAppDelegate.h ") Ajouter le ${YYExtAppDelegateIncludes} variable d'environnement en haut de votre fichier d'en-tête de délégué d'application. Cela sera remplacé au moment de la compilation par les fichiers d'inclusion appropriés pour la classe de délégué parent. Utilisez le ${YYExtAppDelegateBaseClass} variable d'environnement comme classe de base pour votre délégué d'application personnalisé. Cela sera remplacé au moment de la compilation par la classe de délégué de base correcte. Pour vous assurer que votre extension fonctionne avec toutes les autres extensions qui utilisent des délégués d'application personnalisés, vous devez appeler toutes les méthodes de classe de base à partir de méthodes remplacées dans votre classe enfant. Avant d'appeler la méthode superclass, vous devez vous assurer qu'elle est implémentée dans la hiérarchie des classes pour éviter les erreurs, par exemple:- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
             // Check if any superclasses implement this method and call it     if([[self superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions:)])       return [super application:application willFinishLaunchingWithOptions:launchOptions];            else         return TRUE; }
       Cadres système: Vous pouvez ajouter dans un iOS système cadre est à votre poste. Ceux-ci sont ajoutés en cliquant sur le bouton qui ajoutera un cadre d'espace réservé, que vous pourrez ensuite modifier en cliquant lentement dessus. Vous pouvez en savoir plus sur les frameworks système disponibles ici. Pour supprimer une infrastructure système, sélectionnez-la simplement puis cliquez sur le bouton bouton. Injecter dans Info.plist: Ici, vous pouvez ajouter n'importe quel code à injecter dans le info.plist déposer. Frameworks et bundles tiers: cette section concerne l'ajout de bundles tiers et SDK. Comme pour le cadre système, vous cliquez sur le bouton bouton pour les ajouter, puis cliquez lentement pour les modifier, et en les sélectionnant puis en cliquant sur les supprimera (voir la documentation fournie avec le SDK que vous avez choisi pour plus d'informations sur le nom du framework). Si le bundle framework / SDK se trouve sur votre Mac de développement, vous devez ajouter le chemin dans " Entrez le chemin du framework sur Mac " et cliquez sur le bouton ou si le SDK ou le code source se trouve sur votre PC, utilisez le bouton Ajouter une source. CocoaPods: Ici, vous pouvez donner le nom de tous les CocoaPods que l'extension va utiliser à la place (ou ainsi que) de tous les SDK et frameworks qui ont été ajoutés. Notez qu'il existe une option de jeu pour iOS et pour tvOS pour ajouter un fichier Pod à GameMaker Studio 2, ce qui est requis si vous ajoutez des CocoaPods dans cette section. Dépendances des CocoaPods: Cette section est l'endroit où vous pouvez lister les différentes dépendances requises par les CocoaPods ajoutés dans la section précédente. Notez qu'il existe une option de jeu pour iOS et pour tvOS pour ajouter un Podfile.lock à GameMaker Studio 2, ce qui est requis si vous ajoutez des dépendances CocoaPod dans cette section. Si des cadres système ou des cadres tiers ont été ajoutés à votre extension, ceux-ci seront désormais répertoriés dans la fenêtre Propriétés de l'extension, chacun d'eux ayant une case à cocher à côté. Si vous cochez la case, vous activez la liaison faible, ce qui est utile si vous avez besoin de "remplacer" un symbole de la bibliothèque incluse par votre propre valeur, mais il convient de noter que cela ralentira la liaison. Pour plus d'informations sur la création d' iOS et tvOS, veuillez consulter la base de connaissances YoYo Games, et pour plus d'informations sur l'utilisation de CocoaPods dans les extensions, veuillez consulter le guide suivant: iOS et tvOS: utilisation des cosses de cacao  Retour: L'éditeur d'extensions Suivant: Créer une extension © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

