
  
  L'éditeur d'objets
  Les objets sont les ressources que nous utilisons pour contrôler certains aspects d'un jeu et pour faire des choses spécifiques. La plupart du temps, un sprite leur est associé.
    afin que vous puissiez les voir dans les salles de jeu, mais parfois ils sont utilisés comme contrôleur "en coulisse" pour faire des choses liées à l'utilisateur ou pour le timing, etc... On peut leur donner des comportements et ils peuvent réagir à certains événements ainsi qu'entre eux.
    La plupart des choses que vous voyez dans un jeu sont basées sur les objets et leurs interactions. Nous disons "basé sur" parce que vous ne placez pas directement des objets dans les salles de jeu, mais plutôt des instances de ces objets qui sont en fait des copies (ou des clones si vous préférez) de la ressource objet. Il est très important de s'en souvenir car les instances et les objets ne sont pas la même chose et chacun a son propre ensemble de fonctions qui peuvent les affecter.
    les affecter.
  Pour clarifier cela, pensez à un jeu réalisé avec GameMaker Studio 2. Tous les personnages, monstres, balles, murs, etc... sont tous des objets que vous créez dans le navigateur d'actifs. Vous faites ensuite glisser l'objet dans
    une pièce dans l'éditeur de pièce pour créer une instance copiée à partir du modèle d'objet de base. L'instance dans la pièce peut ensuite être modifiée dans l'éditeur lui-même ou par le biais du code, de sorte qu'elle peut être mise à l'échelle, colorée, ou avoir d'autres détails modifiés par rapport à la "base".
    d'autres détails modifiés à partir de l'objet "de base". Ainsi, lorsque nous parlons de quelque chose qui affecte ou modifie une instance, nous voulons dire que cela affecte cette copie particulière d'un objet dans une pièce. Seule cette instance unique est
    instance est affectée alors que toutes les autres ne le sont pas. Mais lorsque nous parlons d'affecter ou de modifier un objet, nous voulons dire que nous modifions l'objet dans l'Asset Browser et que tout ce que nous faisons sera répercuté sur toutes les instances créées à partir de ce point.
    à partir de ce point. Ainsi, l'objet est le modèle de l'instance, et l'instance est ce que nous plaçons dans une pièce pour créer notre jeu.
  Pour créer un objet dans votre jeu, vous pouvez faire un clic droit sur  dans le navigateur d'actifs et cliquer sur l'option Créer un objet. Cela ouvrira la fenêtre illustrée en haut de cette
    en haut de cette page, avec les sections suivantes :
  Détails
  
    Ici, vous pouvez donner un nom à votre objet. Ce nom ne doit jamais contenir d'espaces ni de caractères non autorisés (seuls les caractères alphanumériques et la barre inférieure "_" sont autorisés) et doit être court mais mémorable afin que vous puissiez facilement identifier les ressources
      plus tard, lorsque vous en aurez peut-être plusieurs. Par exemple, de nombreuses personnes utilisent un préfixe ou un suffixe pour identifier les différences entre les ressources, comme "obj_Ship" ou "Ship_obj".
    Ensuite, vous pouvez choisir le sprite de l'objet si vous souhaitez qu'il en ait un. Cliquez avec le bouton gauche de la souris  sur la case du sprite et l'Asset Explorer apparaîtra avec une liste de tous les sprites disponibles dans l'Asset Browser :
    Vous pouvez ensuite sélectionner celui que vous souhaitez utiliser pour l'objet. Lorsqu'un sprite est affecté à l'objet, vous pouvez cliquer sur le bouton Edit Sprite  pour en modifier les propriétés ou, si vous n'avez pas de sprite pour l'objet mais souhaitez en créer un, vous pouvez cliquer sur le bouton Add Sprite pour créer un nouveau sprite et l'affecter.
      le bouton Ajouter un sprite  pour créer un nouveau sprite et l'affecter. Vous pouvez également modifier l'image de l'actif sprite qui a été attribué
      assignée en cliquant sur le bouton Edit Image  pour ouvrir l'éditeur d'images.
     
  
  Masque de collision
  
    Sous la zone d'affectation du sprite, vous disposez d'un bouton pour choisir un masque de collision spécifique. Par défaut, un objet génère des propriétés de collision basées sur le sprite qui lui est assigné, mais dans certains cas, vous pouvez souhaiter que les collisions soient basées sur une forme différente d'un sprite différent.
      que les collisions soient basées sur une forme différente d'un sprite différent. Par exemple, vous pouvez avoir un jeu de haut en bas où le sprite principal a un masque de collision rectangulaire, mais pour rendre les collisions plus fluides, un masque circulaire peut être préférable. Dans ce cas
      vous pouvez cliquer sur le bouton Masque de collision et sélectionner une autre ressource de sprite. Ainsi, les instances de l'objet dessineront le sprite attribué, mais baseront les collisions sur le sprite du masque. Vous pouvez trouver plus d'informations sur les masques de collision
      masques de collision dans la page sur l'éditeur de sprites.
     
  
  Propriétés
  
    Les options suivantes s'offrent à vous pour votre objet :
    
      Visible: Visible indique si les instances de cet objet sont visibles au démarrage de la room. Normalement, la plupart des instances sont visibles, mais il est parfois utile d'en avoir d'invisibles - par exemple, vous pouvez les utiliser comme points de passage pour contrôler un monstre en mouvement ou pour garder une trace des valeurs et effectuer certaines actions dans le temps.
        par exemple, vous pouvez les utiliser comme points de repère pour contrôler un monstre en mouvement, ou pour garder une trace des valeurs et effectuer certaines actions dans le temps. Les objets invisibles réagiront toujours aux événements et s'ils ont un sprite ou un masque qui leur est assigné, ils réagiront également si d'autres instances entrent en collision avec eux...
        Ils ne peuvent simplement pas être vus et n'exécutent pas leur événement de dessin. Par défaut, l'indicateur visible est coché.
      Solide: Lorsque vous marquez une instance comme étant solide, vous indiquez à GameMaker Studio 2 qu'il doit essayer de résoudre les collisions éventuelles avant de déclencher un événement de collision. Il s'agit d'une fonctionnalité très basique, et en réalité
        tout ce qu'elle fait est de ramener l'instance à la position dans laquelle elle se trouvait au moment où une collision a été détectée avant d'exécuter tout code ou DnD™qui se trouve dans l'événement de collision lui-même, et en tant que tel, son utilité est limitée.
      Persistant: Un objet persistant est un objet qui ne disparaît pas lorsque la pièce est modifiée, mais qui "persiste" et est transféré dans la nouvelle pièce. Il ne disparaîtra que si vous le détruisez explicitement, soit avec une action de destruction, soit dans le code.
        une action de destruction ou dans le code. Cela signifie que si vous placez un objet persistant dans une pièce, il sera toujours disponible dans toutes les pièces suivantes et continuera d'exécuter toutes les actions attribuées aux événements dans les propriétés de l'objet, à l'exception de l'événement de création, qui n'est déclenché qu'une fois.
       Create Event, qui n'est déclenché qu'une seule fois lors de sa création initiale et non lorsque vous changez de pièce. Ceci est pratique lorsque vous avez, par exemple, un personnage principal qui se déplace d'une room à l'autre et que vous souhaitez conserver les mêmes variables au sein de l'instance.
        Mais vous devez faire très attention à créer et détruire correctement les objets persistants, car des erreurs peuvent facilement se glisser dans votre projet par erreur.
    
    Persistance et couches de la pièce  
    
      Lorsque vous créez une instance avec la persistance activée dans une room, une couche ou une profondeur lui est attribuée (selon la fonction que vous avez utilisée pour créer l'instance de l'objet). Lorsque la pièce est changée, et si la pièce suivante ne possède pas
        un calque avec le même nom ou la même profondeur que celui attribué, alors un nouveau calque sera créé pour l'instance qui persiste à travers les pièces. Si vous avez donné un nom à la couche lors de la création de l'instance, alors la nouvelle couche sera également nommée de la même façon que la couche originale.
        Si vous avez donné un nom à la couche lors de la création de l'instance, la nouvelle couche portera également le même nom que la couche d'origine, tandis que si vous avez attribué une profondeur à l'instance, la nouvelle couche sera nommée "_layer_XXX", où "XXX" est une valeur hexadécimale utilisée pour donner un nom unique à la couche.
        un nom unique à la couche. Ces calques seront supprimés de la pièce à la fin de la pièce. 
         Une autre chose à noter à propos des couches et des instances persistantes est que si vous avez assigné à l'instance une couche nommée lors de la création, et qu'il y a une autre couche dans les salles suivantes avec le même nom, alors l'instance persistante sera assignée à la couche avec le même nom sans tenir compte du fait que l'instance persiste.
        l'instance persistante sera affectée à la couche portant le même nom, quelle que soit la profondeur de la couche.
         Enfin, si une instance persistante se déplace dans une pièce dont la couche a la même profondeur que celle où l'instance a été créée, elle ne sera pas affectée à cette couche, mais une nouvelle couche sera créée à la même profondeur (en suivant la convention d'appellation expliquée ci-dessus).
        la convention de dénomination expliquée ci-dessus).
    
    Persistance et événements
    
      Comme indiqué précédemment, un objet persistant n'exécutera son événement de création qu'une seule fois, mais ses événements de début et de fin de partie, de début et de fin de pièce seront également déclenchés aux moments appropriés. Toutefois, si vous redémarrez le jeu (avec, par exemple, la fonction game_restart() ), tous les objets persistants seront supprimés et n'existeront que lorsqu'ils seront créés à nouveau par le jeu.
         Notez également que si vous désactivez un objet persistant, il ne passera plus d'une salle à l'autre, à moins qu'il ne soit réactivé avant le déclenchement de l'événement de fin de salle. La réactivation nécessite un pas de jeu complet pour se produire,
        L'utilisation de l'événement de fin de salle ne fonctionne donc pas, car le jeu n'a pas le temps de réactiver l'objet. Vous devez donc garder cela à l'esprit lorsque vous utilisez la désactivation avec des objets persistants et planifier votre code en conséquence.
        code en conséquence.
    
    
      Utilise la physique: Lorsque vous cochez la case Uses Physics, vous indiquez à GameMaker Studio 2 que cet objet doit faire partie d'un monde physique (tel que défini dans l'éditeur de pièces ). En cochant cette case, vous
        ouvrir une autre fenêtre chaînée dans laquelle vous pouvez définir les propriétés physiques de toutes les instances de cet objet. Vous trouverez de plus amples informations à ce sujet dans la section consacrée aux objets physiques.
    
  
   
  La dernière partie de l'éditeur d'objets est consacrée aux différentes options d'objets, chacune d'entre elles étant traitée sur sa propre page, dont le lien figure ci-dessous :
  
    Événements relatifs aux objets
    Objets parents
    Objets de physique
    Variables d'objet
  
   
   
   
  
    
      
        Retour : Les éditeurs d'actifs
        Suivant : Chemins d'accès
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

