 La mise en réseau L'événement de mise en réseau est un événement qui sera déclenché par tout trafic réseau entrant et est lié aux fonctions réseau. Cet événement génère une carte DS spéciale qui est exclusive à cet événement et est stockée dans la variable spécialeasync_load. Cette carte DS contiendra des informations différentes selon le type d'événement réseau qui l'a généré. Événements de réseautage courants Les touches suivantes sont communes à toutes les fonctions réseau reçues et seront toujours présentes dans le async_load carte: " type ": Cela aura l'une des constantes répertoriées dans le tableau ci-dessous comme valeur de retour et désignera le type d'événement réseau. " id ": l'identifiant du socket (un nombre réel, tel que renvoyé par la fonction network_create_server ou network_create_socket) qui reçoit l'événement. Dans la plupart des cas, l'ID de socket renvoyé est l'ID du socket TCP ou UDP qui a déclenché l'événement, cependant si l'événement est déclenché dans un serveur et qu'il s'agit d'un événement de données (voir ci-dessous), alors l'ID de socket est celui du client qui a envoyé le Les données. " ip ": L'adresse IP du socket (sous forme de chaîne). " port ": Le port associé à l'adresse IP (utile lorsque vous travaillez avec UDP). Les valeurs de retour possibles pour la clé "type" peuvent être l'une des quatre constantes répertoriées ci-dessous: Constant Descriptionnetwork_type_connect L'événement a été déclenché par une connexion.network_type_disconnect L'événement a été déclenché par une déconnexion.network_type_data L'événement a été déclenché par des données entrantes.network_type_non_blocking_connect L'événement a été déclenché par une connexion configurée comme non bloquante (vous pouvez utiliser la fonction network_set_config() pour cela, ou connectez-vous en utilisant network_connect_async() ou network_connect_async_raw() ). Connexion / Déconnexion Lorsque vous avez un événement du type network_type_connect ou network_type_disconnect, le async_load  map aura la clé supplémentaire suivante: " socket ": Cette clé contiendra l'identifiant du socket de connexion / déconnexion. Si l'événement est du type network_type_non_blocking_connect, puis il y aura en plus la clé suivante: " Successed ": Cette clé sera 0 ou 1, où 0 signifie que la connexion a expiré et 1 signifie qu'elle a réussi et que le socket est prêt à être utilisé. Il convient de noter que l'événement de mise en réseau ne se déclenche pas dans les clients lorsque le serveur se déconnecte, et qu'aucun des network_type_* les événements seront déclenchés dans les clients lorsque le serveur auquel ils sont connectés se déconnecte, même si la connexion est basée sur TCP. Réception des données Lorsque vous avez un network_type_data  événement de type, qui signifie que votre réseau a reçu des données, la carte créée aura les clés suivantes: " buffer ": il s'agit de l'unique "ID de tampon" généré par l'événement. Un tampon de type «croissance», octet aligné sur 1, est créé pour contenir l'ID doit être stocké dans une variable et utilisé pour tous les autres appels de fonction au tampon dans cet événement. Tout comme le async_load map, le tampon créé est automatiquement supprimé de la mémoire à la fin de cet événement. Pour plus d'informations sur les tampons, consultez Référence - Tampons. " size ": Il s'agit de la taille (en octets) des données de tampon qui sont reçues. REMARQUE: le tampon créé n'est valide que dans ces événements et sera libéré une fois l'événement terminé.  Retour: Événements asynchrones Suivant: Notifications push © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

