
  
  Les événements du geste
  
  Les événements de la catégorie Gesture Event seront déclenchés chaque fois que GameMaker Studio 2 détectera un " geste " de la souris ou un événement lié à l'écran tactile (bien que ces événements gestuels soient conçus spécifiquement pour une utilisation mobile, ils peuvent également être utilisés sur d'autres cibles pour détecter la souris, bien qu'ils ne détectent pas les contacts multiples dans ce cas).
    cibles pour détecter la souris, bien qu'ils ne détectent pas les touchers multiples dans ce cas). L'objectif du système gestuel est d'essayer de reconnaître les entrées à un niveau plus élevé que les fonctions de lecture directe de la souris ou du toucher.
    simplifier la mise en œuvre des entrées couramment utilisées sur les dispositifs tactiles.
  REMARQUE : ces événements ne seront pas déclenchés sur la plate-forme HTML5 en raison de l'absence de prise en charge du multi-touch par ces événements sur cette plate-forme. Si vous recherchez des gestes sur cette cible, vous devez utiliser les fonctions du périphérique.
  Vous pouvez choisir de détecter soit des gestes d'instance , soit des gestes globaux . Les événements de gestes d'instance ne seront déclenchés que si le toucher/clic initial se fait sur une instance dans la pièce. Notez que l'instance doit
    avoir un masque de collision valide (voir les sections L'éditeur de Sprite - Masque de collision et L'éditeur d'objets - Masque de collision pour plus de détails) pour que cet événement soit déclenché. En revanche, les événements globaux
    seront déclenchés en touchant/cliquant n'importe où dans la salle de jeu, et pour toutes les instances qui ont l'événement.
  Lorsqu'un geste est reconnu, il déclenche un ou plusieurs des événements disponibles, et l'événement déclenché dépend du type de geste qui a été détecté. Dans tous les cas, cependant, une carte DS sera générée pour vous et stockée dans la variable intégrée  .
    DS Map sera générée pour vous et stockée dans la variable intégrée event_data. Les touches disponibles dépendent du type d'événement qui l'a créée et sont présentées dans chacune des sous-sections ci-dessous.
  REMARQUE: La variable event_data n'est valable que dans ces événements, car la carte DS vers laquelle elle pointe est automatiquement créée au début de l'événement, puis détruite à la fin, cette variable étant réinitialisée à la valeur -1 à tout autre moment.
    à une valeur de -1 à tout autre moment.
  Il est intéressant de noter que si vous avez plusieurs instances sous la position touchée et qu'elles ont toutes un événement de geste, elles se déclencheront toutes , et pas seulement l'instance la plus haute. Notez également que lorsque vous utilisez plusieurs vues de caméra
    et que vous faites glisser une instance, les valeurs renvoyées seront basées sur la vue dans laquelle vous vous trouviez lorsque le toucher/clic initial a été reçu - ceci est vrai pour tous les événements suivants dans ce geste pour cette instance. Ainsi, toucher et faire glisser une instance dans une vue
    puis en relâchant le contact dans une autre vue, vous obtiendrez des valeurs relatives à la vue initiale où le geste a été détecté pour la première fois.
   
      Événements de tapotement, de glissement et de pichenette
  
    Les événements "Tap", "Drag" et "Flick" sont tous basés sur un simple toucher ou un clic de souris sur l'écran et la carte DS event_data contiendra les touches suivantes :
    
    
    
      
        
          Clé
          Description
        
        
          "gesture"
           Il s'agit d'une valeur d'identification qui est unique pour le geste en cours. Cela vous permet de relier entre elles les différentes parties d'un geste en plusieurs parties (comme le début, le glissement et la fin du glissement).
        
        
          "touch"
           Il s'agit de l'index de la touche utilisée pour le geste. En général, il commence à 0 et augmente pour chaque doigt maintenu enfoncé, puis revient à 0 lorsque tous les doigts sont retirés.
            Mais si l'utilisateur touche l'écran à un autre endroit lorsque cet événement est déclenché par un autre toucher, la valeur sera supérieure à 0.
        
        
          "posX"
           Il s'agit de la position X de la touche dans l'espace de la pièce.
        
        
          "posY"
           Il s'agit de la position Y de la touche dans l'espace.
        
        
          "rawposX"
           Il s'agit de la position X brute de la touche dans l'espace fenêtre (ce qui équivaut à obtenir la position de la souris à l'aide de la commande device_mouse_raw_x()).
        
        
          "rawposY"
           Il s'agit de la position Y brute de la touche dans l'espace fenêtre (équivalente à la position de la souris avec la commande device_mouse_raw_y()).
        
        
          "guiposX"
           Il s'agit de la position X de la touche dans l'espace gui (équivalent à la position de la souris en utilisant device_mouse_x_to_gui()).
        
        
          "guiposY"
           Il s'agit de la position Y de la touche dans l'espace gui (équivalent à la position de la souris en utilisant device_mouse_y_to_gui()).
        
        
          "diffX"
           Il s'agit de la différence X entre la position de la touche actuelle et la position de la dernière touche dans ce geste.
        
        
          "diffY"
           Il s'agit de la différence Y entre la position de la touche actuelle et la position de la dernière touche dans ce geste.
        
        
          "rawdiffX"
           C'est la différence brute en X entre la position de la touche actuelle et la position de la dernière touche dans ce geste.
        
        
          "rawdiffY"
           C'est la différence brute en Y entre la position de la touche actuelle et la position de la dernière touche dans ce geste.
        
        
          "guidiffX"
           C'est la différence X dans l'espace gui entre la position de la touche actuelle et la position de la dernière touche dans ce geste.
        
        
          "guidiffY"
           Il s'agit de la différence Y dans l'espace gui entre la position de la touche actuelle et la position de la dernière touche dans ce geste.
        
        
          "viewstartposX"
           Il s'agit de la position de départ X de la pièce du geste actuel.
        
        
          "viewstartposY"
           Il s'agit de la position de départ Y de la pièce du geste actuel.
        
        
          "rawstartposX"
           Il s'agit de la position de départ X brute du geste actuel.
        
        
          "rawstartposY"
           Il s'agit de la position de départ Y brute du geste actuel.
        
        
          "guistartposX"
           C'est la position de départ X de l'espace gui du geste actuel.
        
        
          "guistartposY"
           C'est la position de départ Y de l'espace gui du geste actuel.
        
        
          "isflick"
          

			Uniquement disponible dans l'événement de fin de glisser. La valeur 1 est attribuée à cet événement si la fin du déplacement est détectée comme une pichenette, ce qui signifie que vous n'avez pas besoin d'un événement de pichenette distinct si vous gérez le déplacement de toute façon.
        
      
    
     
    Tapez
    
      L'événement Tap sera déclenché lorsqu'une instance a été touchée ou cliquée ou - s'il s'agit d'un événement global - lorsque le jeu enregistre un toucher ou un clic n'importe où dans la pièce. Un tapotement est considéré comme un contact et un relâchement rapides, et si le contact dure trop longtemps, il sera considéré comme un déplacement (et déclenchera un déplacement).
        Si le toucher dure trop longtemps, il sera considéré comme un déplacement (et déclenchera les événements de geste de déplacement au lieu de l'événement Tap). Cet événement génère une carte event_data DS que vous pouvez ensuite utiliser pour obtenir des informations sur l'événement. Par exemple :
      Créer un événement
      x_goto = x ; y_goto = y ;
      Événement de robinetterie
      x_goto = event_data[ ? "posX"] ; y_goto = event_data[ ? "posY"] ;
      Evénement d'étape
      var _pd = point_distance(x, y, x_goto, y_goto) ; move_towards_point(x_goto, y_goto, clamp(_pd, 0, 5) ;
      Le code ci-dessus détectera un tap sur l'écran et obtiendra la position du tap pour déplacer l'instance à cette position. Notez que si vous souhaitez avoir un temps de détection plus long ou plus court, vous pouvez le définir avec la fonction gesture_drag_time().
        Cela définit le temps entre la détection initiale et le tapotement qui devient un déplacement, donc définissez une valeur plus élevée pour rendre la détection du tapotement plus longue ou une valeur plus faible pour la rendre plus courte (la valeur est en secondes et la valeur par défaut est 0.16).
       
    
    Double Tap
    
      L'événement Double Tap sera déclenché lorsqu'une instance a été touchée ou cliquée deux fois de suite (ou - s'il s'agit d'un événement global - lorsque le jeu enregistre deux touchers ou clics rapides n'importe où dans la pièce). Un double tapotement est considéré comme deux
        Mais si l'un des touchers dure trop longtemps, il sera considéré comme un déplacement (et déclenchera les événements de geste de déplacement au lieu de l'événement Double Tap). Cet événement génère une carte event_data DS
        que vous pouvez ensuite utiliser pour obtenir des informations sur l'événement. Par exemple :
      Créer un événement
      x_goto = x ; y_goto = y ;
      Événement Double Tap
      instance_destroy() ;
      Le code ci-dessus détecte simplement un double tapotement et détruit ensuite l'instance. Notez que vous pouvez définir le temps entre deux tapotements pour déclencher un double tapotement en utilisant la fonction gesture_double_tap_time() (qui
        a une valeur par défaut - en secondes - de 0,16) et vous pouvez également définir la distance de détection entre les tapotements avec la fonction gesture_double_tap_distance() (si
        (si un deuxième tapotement est détecté en dehors de cette distance, il sera considéré comme un tapotement normal).
       
    
    Démarrage par glissement
    
      L'événement Drag Start sera déclenché lorsque l'utilisateur maintient une touche ou un clic sans le relâcher. Il se déclenche une fois qu'un temps défini s'est écoulé après le toucher initial, qui est de 0,16 seconde par défaut (bien que vous puissiez le définir sur toute autre valeur en secondes à l'aide de la fonction
        toute autre valeur en secondes à l'aide de la fonction gesture_drag_time()). Après le déclenchement de cet événement, et aussi longtemps que
        l'utilisateur maintient son toucher/clic, l'événement Dragging sera déclenché à chaque étape jusqu'à ce que le toucher/clic soit relâché. Cet événement génère une carte DS event_data que vous pouvez utiliser pour obtenir des informations sur l'événement.
        sur l'événement. Par exemple :
      Créer un événement
      drag_offsetX = 0 ; drag_offsetY = 0 ;
      Événement de début de traînée
      drag_offsetX = x - event_data[ ? "posX"] ; drag_offsetY = y - event_data[ ? "posY"] ;
      Le code ci-dessus utilise l'événement Drag Start pour obtenir la position du toucher/cliquer et l'utiliser pour définir une valeur de décalage pour les axes x et y. Cette valeur peut ensuite être utilisée lors du déplacement de l'instance pour s'assurer qu'elle ne "saute" pas à la position à laquelle le toucher/clic a été détecté.
        position à laquelle le toucher/clic a été détecté (voir l'événement Dragging ci-dessous pour la suite de cet exemple).
       
    
    Traînement
    
      L'événement Dragging est déclenché après l'événement Drag Start, et sera déclenché pour chaque étape où l'utilisateur maintient le toucher/clic sur l'instance (ou l'écran, si c'est un événement global) et se déplace plus que le seuil de dragging défini.
        Cette distance est de 0,1 pouce par défaut mais peut être définie à l'aide de la fonction gesture_drag_distance(). S'il n'y a pas de mouvement
        mouvement ou que le mouvement est inférieur au seuil défini, l'événement ne sera pas déclenché. Cet événement génère une carte event_data DS que vous pouvez ensuite utiliser pour obtenir des informations sur l'événement. Par exemple :
      Créer un événement
      drag_offsetX = 0 ; drag_offsetY = 0 ;
      Événement de début de traînée
      drag_offsetX = x - event_data[ ? "posX"] ; drag_offsetY = y - event_data[ ? "posY"] ;
      Événement de traînage
      x = event_data[ ? "posX"] + drag_offsetX ; y = event_data[ ? "posY"] + drag_offsetY ;
      L'exemple de code ci-dessus utilise les variables de décalage définies dans l'événement Drag Start pour déplacer l'instance lorsque l'événement Dragging est déclenché.
       
    
    Fin de traînée
    
      L'événement Drag End est déclenché lorsque l'utilisateur relâche le toucher/clic sur l'instance (ou l'écran si l'événement est global). Cet événement génère une carte event_data DS que vous pouvez utiliser pour obtenir des informations sur l'événement.
        l'événement, mais dans cet événement, la carte aura une clé supplémentaire : "isflick". La pichenette est calculée comme étant la distance par seconde sur laquelle le déplacement s'est produit, et la valeur de la clé "isflick" sera vraie si elle est plus grande que la distance par seconde.
        sera vraie si elle est supérieure à la valeur de distance par seconde définie, ou fausse sinon. Notez que la valeur par défaut est de 2 pouces par seconde, mais vous pouvez la définir sur une autre valeur en utilisant la fonction gesture_flick_speed().
        Notez également qu'il existe un événement Flick dédié qui sera également déclenché si la variable "isflick" est vraie. Voici un exemple d'utilisation :
      Créer un événement
      flickVelX = 0,0 ; flickVelY = 0,0 ;
      Événement de fin de traînée
      isFlick = event_data[ ? "isflick"] ; if (isFlick) { flickVelX = event_data[ ? "diffX"] ; flickVelY = event_data[ ? "diffY"] ; }  else
         { flickVelX = 0 ; flickVelY = 0 ; }
      Evénement d'étape
      x += flickVelX ; y += flickVelY ; flickVelX *= 0,7 ; flickVelY *= 0,7 ;
      Le code ci-dessus récupère simplement la différence de position en x et y entre le dernier événement de glisser et l'événement de fin de glisser actuel, et si le mouvement a été plus grand que le seuil de pichenette, il définit certaines variables qui sont utilisées pour déplacer l'instance
        dans l'événement step.
       
    
    Flick
    
      L'événement Flick n'est déclenché que lorsqu'un toucher/clic a été maintenu, déplacé puis relâché et que la distance entre la dernière position de déplacement et la position de relâchement est supérieure à 2 pouces par seconde (il s'agit du paramètre par défaut, bien qu'il soit possible de le modifier à l'aide de la fonction "Flick").
        peut être modifié à l'aide de la fonction gesture_flick_speed()). Cet événement génère une carte event_data DS que vous pouvez utiliser pour obtenir des informations sur l'événement. Par exemple :
      Créer un événement
      flickVelX = 0,0 ; flickVelY = 0,0 ;
      Événement Flick
      flickVelX = event_data[ ? "diffX"] ; flickVelY = event_data[ ? "diffY"] ;
      Evénement d'étape
      x += flickVelX ; y += flickVelY ; flickVelX *= 0,7 ; flickVelY *= 0,7 ;
      Le code ci-dessus obtient simplement la différence de position en x et y du dernier événement Dragging et de l'événement Flick actuel, et si le mouvement a été supérieur au seuil de flick, il définit certaines variables qui sont utilisées pour déplacer l'instance dans l'événement step.
        l'événement step.
    
     
  
  Pinch Events 
  
    Les événements "Pinch" sont basés sur la reconnaissance de deux touchers de l'écran de l'appareil en même temps, dont l'un (ou les deux) s'est déplacé au-delà d'une certaine distance. L'angle de mouvement des touchers ainsi que le mouvement de chaque toucher sont ce qui va
      détermine la détection d'un événement de pincement ou de rotation, où (dans le cas d'un événement de pincement) :
    
      Si l'une des touches n'est pas en mouvement, l'autre doit se rapprocher ou s'éloigner d'elle dans un angle seuil (qui peut être défini à l'aide des fonctions gesture_pinch_angle_towards() et
        - gesture_pinch_angle_away()).
      Si les deux touches se déplacent, leurs vitesses doivent être dans des directions approximativement opposées et la même vérification du seuil angulaire est également effectuée pour s'assurer que les touches se déplacent dans un alignement approximatif.
    
    Lorsque deux touchers et un mouvement sont détectés avec les critères ci-dessus, un événement de pincement sera déclenché, et dans chacun des événements, la carte event_data DS sera remplie avec les touches suivantes :
    
    
    
      
        
          Clé
          Description
        
        
          "geste"
           Il s'agit d'une valeur d'identification qui est unique pour le geste en cours. Cela vous permet de relier entre elles les différentes parties d'un geste en plusieurs parties (comme le début, le glissement et la fin du glissement).
        
        
          "touch1"
           Il s'agit de l'indice de la première touche utilisée dans le cadre du geste de pincement. En général, cet indice est égal à 0, mais si l'utilisateur touche l'écran à un autre endroit lorsque cet événement est déclenché par une autre touche, la valeur sera supérieure à 0.
            supérieure à 0.
        
        
          "touch2"
           Il s'agit de l'indice de la deuxième touche utilisée dans le cadre du geste de pincement. En général, il sera supérieur de 1 à la valeur de touch1, mais il peut s'agir d'une autre valeur en fonction du nombre de touchers détectés ailleurs.
        
        
          "posX1"
           Il s'agit de la position X de la première touche dans l'espace de la pièce.
        
        
          "posY1"
           Il s'agit de la position Y de la première touche dans l'espace de la pièce.
        
        
          "rawposX1"
           Il s'agit de la position X brute dans l'espace fenêtre de la première touche (équivalente à la position de la souris à l'aide de la commande device_mouse_raw_x()).
        
        
          "rawposY1"
           Il s'agit de la position Y brute dans l'espace fenêtre de la première touche (équivalente à la position de la souris à l'aide de la commande device_mouse_raw_y()).
        
        
          "guiposX1"
           Il s'agit de la position X dans l'espace gui de la première touche (équivalente à la position de la souris avec la commande device_mouse_x_to_gui()).
        
        
          "guiposY1"
           Il s'agit de la position Y de la deuxième touche dans l'espace gui (équivalent à la position de la souris avec la commande device_mouse_y_to_gui()).
        
        
          "posX2"
           Il s'agit de la position X de la deuxième touche dans l'espace de la pièce.
        
        
          "posY2"
           Il s'agit de la position Y de la deuxième touche dans l'espace de la pièce.
        
        
          "rawposX2"
           Il s'agit de la position X brute de l'espace fenêtre de la première touche.
        
        
          "rawposY2"
           Il s'agit de la position Y brute de l'espace fenêtre de la deuxième touche.
        
        
          "guiposX2"
           Il s'agit de la position X dans l'espace gui de la deuxième touche.
        
        
          "guiposY2"
           Il s'agit de la position Y dans l'espace gui de la deuxième touche.
        
        
          "midpointX"
           Position en X du point médian entre les deux touches dans l'espace de la pièce.
        
        
          "midpointY"
           Position en Y du point médian entre les deux touches dans l'espace de la pièce.
        
        
          "rawmidpointX"
           Il s'agit de la position X brute de l'espace fenêtre du point central.
        
        
          "rawmidpointY"
           Il s'agit de la position Y brute de l'espace fenêtre du point central.
        
        
          "guimidpointX"
           C'est la position X du point central dans l'espace gui.
        
        
          "guimidpointY"
           Il s'agit de la position Y du point central dans l'espace gui.
        
        
          "relativecale"
           Il s'agit de la différence d'échelle par rapport au dernier événement de ce geste (ainsi, pour les événements Pinch In, cette valeur sera toujours inférieure à 1,0, tandis que pour les événements Pinch Out, elle sera toujours supérieure à 1,0).
        
        
          "absoluescale"
           Il s'agit de l'échelle par rapport à l'endroit où se trouvaient les doigts au début du geste (ainsi, si la distance entre les doigts a diminué de moitié, elle sera de 0,5, alors que si la distance a doublé, elle sera de 2,0).
        
      
    
     
    Départ en pincement
    
      L'événement Pinch Start sera déclenché lorsqu'une instance (ou l'écran si l'événement est global) a été touchée par deux "doigts" (et que le toucher est maintenu) puis qu'un ou les deux "doigts" sont déplacés. Si les touchers s'éloignent
        s'éloignent ou se rapprochent l'un de l'autre d'une distance supérieure à la distance minimale de vérification (qui est de 0,1 pouce par défaut, mais qui peut être définie à l'aide de la fonction gesture_pinch_distance()),
        et que l'angle entre eux est compris dans la valeur définie (45° par défaut, mais il peut être défini à l'aide des fonctions gesture_pinch_angle_towards() et
        GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_pinch_angle_away.htm">gesture_pinch_angle_away()), un événement Pinch Start sera déclenché. Dans cet événement, vous pouvez définir des variables ou enregistrer la date de la position pour une utilisation ultérieure. Par exemple :
      Événement Pinch Start
      pinch = true ; pinch_x = event_data[ ? "midpointX"] ; pinch_y = event_data[ ? "midpointY"] ;
      Le code ci-dessus détectera un pincement et stockera la position du point médian pour ce pincement.
       
    
    Pinch In / Pinch Out
    
      Les événements Pinch In et Pinch Out seront déclenchés à chaque étape où la distance entre les deux touches qui composent le pincement change au-delà du seuil minimum (fixé à +/- 0,1 pouce par défaut, mais vous pouvez le modifier en utilisant la fonction gesture_pinch_distance).
        S'il n'y a pas de mouvement des touches du pincement, ces événements ne se déclencheront pas. Ces événements génèrent une carte DS event_data que vous pouvez ensuite utiliser pour obtenir des informations sur l'événement. Par exemple :
      Événement global Pinch In /Pinch Out
      var _scale = event_data[ ? "relativescale"] ; var _w = camera_get_view_width(view_camera[0]) ; var _h = camera_get_view_height(view_camera[0]) ; var _x = camera_get_view_x(view_camera[0]) + (_w / 2) ; var _y = camera_get_view_y(view_camera[0]) + (_h / 2) ; _w *= _scale ; _h = _w * (room_height / room_width) ; _x -= _w / 2 ; _x = _w * (room_height / room_width)
        + (_h / 2) ;
         _w *= _scale ; _h = _w * (room_height / room_width) ; _x -= _w / 2 ; _y -= _h / 2 ;
         camera_set_view_pos(view_camera[0], _x, _y) ; camera_set_view_size(view_camera[0], _w, _h) ;
      Le code ci-dessus met à l'échelle la vue en fonction de l'échelle relative des touches de pincement.
       
    
    Extrémité de pincement
    
      L'événement Pinch End sera déclenché lorsque l'utilisateur relâche l'une (ou les deux) des touches de l'appareil. Cet événement génère une carte event_data DS que vous pouvez ensuite utiliser pour obtenir des informations sur l'événement. Pour
        exemple :
      Événement "Pinch End
      var _pinchx = event_data[ ? "midpointX"] ; var _pinchy = event_data[ ? "midpointY"] ; var _w = camera_get_view_width(view_camera[0]) ; var _h = camera_get_view_height(view_camera[0]) ; var _x = _pinchx - (_w / 2) ; var _y = _pinchy - (_h / 2) ;
         camera_set_view_pos(view_camera[0], _x, _y) ;
      Le code ci-dessus définira la position de la vue pour qu'elle soit centrée sur le point médian des deux touches qui constituent le pincement lorsque les touches sont relâchées.
      
    
     
  
  Rotation des événements
  
    Les événements "Rotation" sont basés sur la reconnaissance de deux touchers de l'écran de l'appareil en même temps, et sur une rotation angulaire cohérente entre les deux touchers pendant un temps spécifique. L'angle de mouvement des touches ainsi que le mouvement de chaque touche sont les éléments qui détermineront la détection d'un événement de rotation.
      mouvement de chaque contact est ce qui déterminera la détection d'un événement Pinch ou Rotate, où (dans le cas du type d'événement Rotate) :
    
      Deux touches doivent être maintenues enfoncées pendant une durée minimale déterminée (la durée par défaut est de 0,16 seconde, mais vous pouvez la modifier à l'aide de la fonction gesture_rotate_time()).
      Pendant cette période minimale, ils doivent tourner dans un sens constant (si le sens de rotation change pendant cette période, aucune rotation n'est lancée).
      La quantité de rotation doit dépasser l'angle seuil minimum (qui est fixé à 5° par défaut, mais qui peut être modifié à l'aide de la fonction gesture_rotate_angle()).
    
    Lorsque deux contacts et un mouvement sont détectés selon les critères ci-dessus, un événement de rotation est déclenché et, pour chacun de ces événements, la carte DS event_data est remplie des touches suivantes :
    
    
    
      
        
          Clé
          Description
        
        
          "geste"
           Il s'agit d'une valeur d'identification qui est unique pour le geste en cours. Cela vous permet de relier entre elles les différentes parties d'un geste en plusieurs parties (comme le début, le glissement et la fin du glissement).
        
        
          "touch1"
           Il s'agit de l'indice de la première touche utilisée dans le cadre du geste de pincement. En général, cet indice est égal à 0, mais si l'utilisateur touche l'écran à un autre endroit lorsque cet événement est déclenché par une autre touche, la valeur sera supérieure à 0.
            supérieure à 0.
        
        
          "touch2"
           Il s'agit de l'indice de la deuxième touche utilisée dans le cadre du geste de pincement. En général, il sera supérieur de 1 à la valeur de touch1, mais il peut s'agir d'une autre valeur en fonction du nombre de touchers détectés ailleurs.
        
        
          "posX1"
           Il s'agit de la position X de la première touche dans l'espace de la pièce.
        
        
          "posY1"
           Il s'agit de la position Y de la première touche dans l'espace de la pièce.
        
        
          "rawposX1"
           Il s'agit de la position X brute dans l'espace fenêtre de la première touche (équivalente à la position de la souris à l'aide de la commande device_mouse_raw_x()).
        
        
          "rawposY1"
           Il s'agit de la position Y brute dans l'espace fenêtre de la première touche (équivalente à la position de la souris à l'aide de la commande device_mouse_raw_y()).
        
        
          "guiposX1"
           Il s'agit de la position X dans l'espace gui de la première touche (équivalente à la position de la souris avec la commande device_mouse_x_to_gui()).
        
        
          "guiposY1"
           Il s'agit de la position Y de la deuxième touche dans l'espace gui (équivalent à la position de la souris avec la commande device_mouse_y_to_gui()).
        
        
          "posX2"
           Il s'agit de la position X de la deuxième touche dans l'espace de la pièce.
        
        
          "posY2"
           Il s'agit de la position Y de la deuxième touche dans l'espace de la pièce.
        
        
          "rawposX2"
           Il s'agit de la position X brute de l'espace fenêtre de la première touche.
        
        
          "rawposY2"
           Il s'agit de la position Y brute de l'espace fenêtre de la deuxième touche.
        
        
          "guiposX2"
           Il s'agit de la position X dans l'espace gui de la deuxième touche.
        
        
          "guiposY2"
           Il s'agit de la position Y dans l'espace gui de la deuxième touche.
        
        
          "pivotX"
           Position X du point de pivot de la rotation dans l'espace de la pièce.
        
        
          "pivotY"
           Position Y du point de pivot de la rotation dans l'espace de la pièce.
        
        
          "rawpivotX"
           Il s'agit de la position X brute de l'espace fenêtre du point de pivot de rotation.
        
        
          "rawpivotY"
           Il s'agit de la position Y brute de l'espace fenêtre du point de pivot de rotation.
        
        
          "guipivotX"
           Il s'agit de la position X dans l'espace gui du point de pivot de rotation.
        
        
          "guipivotY"
           Position Y dans l'espace gui du point de pivot de rotation.
        
        
          "relatifangle"
           C'est la différence de rotation par rapport au dernier événement de ce geste, mesurée en degrés.
        
        
          "absoluteangle"
           Il s'agit de la différence d'angle par rapport à la position des doigts au début du geste, mesurée en degrés. Ainsi, par exemple, si les doigts ont pivoté d'un quart de cercle depuis le début du geste, cette valeur sera de 90° ou -90°, selon le sens de rotation.
            ou -90°, selon la direction de la rotation.
        
      
    
     
    Rotation Début
    
      L'événement Rotate Start sera déclenché lorsqu'une instance (ou l'écran si l'événement est global) a été touchée par deux "doigts" (et que le toucher est maintenu) et que l'un ou les deux "doigts" sont tournés depuis leur position de départ.
        position de départ. La rotation des touches doit avoir commencé dans un court laps de temps (0,16 secondes par défaut, mais il peut être défini à l'aide de la fonction gesture_rotate_time())
        et être supérieure au seuil angulaire minimal (5° par défaut, mais il peut être modifié à l'aide de la fonction gesture_rotate_angle()).
        Si ces vérifications sont vraies, alors un événement Rotate Start sera déclenché et vous pouvez l'utiliser pour stocker des valeurs ou définir des variables à utiliser avec le reste des événements de rotation. Par exemple :
      Créer un événement
      rotating = false ; view_a = camera_get_view_angle(view_camera[0]) ;
      Événement de début de rotation
      rotation = vrai ;
      Le code ci-dessus configure simplement certaines variables pour la rotation de la caméra, puis dans l'événement Rotate Start, il définit l'une d'entre elles comme vraie.
       
    
    Rotation
    
      L'événement Rotation sera déclenché à chaque fois que les touches de l'écran tourneront l'une autour de l'autre, pour autant que le mouvement soit supérieur au seuil angulaire minimum (par défaut 5°, mais, ceci peut être modifié en utilisant la fonction gesture_rotate_angle()).
        Cet événement peut être utilisé pour définir des variables et manipuler des instances, par exemple :
      Événement rotatif
      var _relangle = event_data[ ? "relativeangle"] ; var _a = camera_get_view_angle(view_camera[0]) ; _a += _relangle ; camera_set_view_angle(view_camera[0], _a) ;
      Le code ci-dessus fait pivoter la vue de la caméra en fonction du mouvement de rotation des touches dans l'événement.
       
    
    Rotation de l'extrémité
    
      L'événement Rotate End sera déclenché lorsqu'une (ou les deux) touche(s) qui composent le geste sont relâchées de l'écran du dispositif. Cet événement peut être utilisé pour définir des variables et manipuler des instances, par exemple :
      Événement de fin de rotation
      rotation = faux ;
      Evénement d'étape
      if !rotating { var _a = camera_get_view_angle(view_camera[0]) ; var _adif = angle_difference(view_a, _a) ; _a += median(-5, _adif, 5) ; camera_set_view_angle(view_camera[0], _a) ; }
      Le code ci-dessus utilise l'événement Rotate End pour détecter le moment où l'utilisateur arrête le geste, puis définit une variable. Cette variable est ensuite utilisée dans l'événement step pour faire pivoter la caméra à sa position initiale.
       
    
     
  
   
   
   
  
    
      
        Retour : Événements relatifs aux objets
        Suivant : Ordre des événements
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

