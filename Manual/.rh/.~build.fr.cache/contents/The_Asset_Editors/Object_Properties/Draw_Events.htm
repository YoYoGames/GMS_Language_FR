 Les événements de tirage au sort La catégorie d'événements Draw est celle qui contient tous les événements qui régissent ce que vous voyez à l'écran lorsque vous exécutez votre jeu. Il est divisé en divers événements distincts pour mieux gérer les différentes exigences de dessin de votre jeu, et l'image ci-dessous illustre l'ordre dans lequel chaque événement est exécuté: L'événement Draw normal se divise en trois sous-types: les événements Draw Begin, les événements Draw standard et Draw End. En général, vous n'aurez besoin d'utiliser que l'événement Draw standard et vous devez être conscient que toutes les instances dans une salle auront cet événement déclenché à chaque étape du jeu, donc cet événement sera toujours appelé tant que l'instance a le visible flag défini sur true. Il est important de comprendre que même si vous n'avez rien défini pour ce sous-événement dans les propriétés de l'objet (c'est-à-dire: pas de code ni d'actions), si l'objet a un sprite affecté, il aura toujours un événement draw qui sera déclenché. En effet, GameMaker Studio 2 dispose de deux façons de dessiner des éléments dans l'événement Draw: le dessin par défaut, c'est-à-dire lorsque vous définissez le sprite dans les propriétés de l'objet et ne placez aucune action ou code dans l'événement Draw normal, et dans ce cas GameMaker Studio 2 dessinera automatiquement le sprite affecté. Notez que toutes les transformations que vous effectuez dans d'autres événements pour changer l'échelle de l'image, l'index, la fusion, etc. seront également reflétées tant que l'événement de dessin est vide. le dessin personnalisé, c'est-à-dire lorsque vous placez du code ou des actions dans l'événement draw. Cela GameMaker Studio 2 " Je veux contrôler ce que vous dessinez pour les instances de cet objet " et il remplace complètement le dessin par défaut. Cela signifie que, par exemple, vous pouvez avoir un objet avec un sprite attribué, puis définir l'événement draw pour dessiner du texte et le texte sera dessiné à l'écran, mais le sprite ne sera pas dessiné car vous ne l'avez pas dit à GameMaker Studio 2 pour le dessiner avec le texte. Le reste des événements de tirage au sort sont expliqués dans les sections ci-dessous: Dessiner le début et dessiner la fin Outre l'événement principal Draw, vous avez également un événement Draw Begin et un événement Draw End. Ceux-ci agissent exactement de la même manière qu'un événement Draw standard (c'est-à-dire: ils dessineront tout ce que vous y mettez à chaque étape du jeu et pour toutes les fenêtres), mais ils ne «tirent par défaut» rien s'ils n'ont pas été explicitement ajoutés à un objet, et ils seront toujours exécutés avant / après l'événement Draw standard. Ainsi, lorsque le jeu est en cours d'exécution, vous aurez toujours l'événement Draw Begin pour toutes les instances, puis l'événement Draw pour toutes les instances, puis enfin l'événement Draw End pour toutes les instances. De cette façon, vous pouvez dessiner des éléments ou définir des propriétés de dessin dans l'étape Draw Begin en une seule instance et vous assurer que toutes les instances avec un événement Draw standard ou Draw End utiliseront ces propriétés ou dessineront sur ce que la première instance a dessiné. Fondamentalement, c'est un moyen sûr de garantir que certaines choses sont dessinées à certains moments, tout comme le font les événements Begin Step et End Step. Il y a quelques points à noter lors du dessin d'objets dans GameMaker Studio 2, qu'il s'agisse d'un sprite que vous shader ou d'un tampon 3D: L'événement de tirage au sort est un événement très intensif, en ce sens que c'est l'un des événements qui prend le plus de temps et de ressources... à cette fin, ce n'est jamais une bonne idée de faire quoi que ce soit dans l'événement de tirage autre que le dessin. Enregistrez donc votre code volumineux ou vos actions complexes pour l'événement Step ou Alarms ou tout autre événement adapté, mais laissez l'événement draw clair pour le dessin car c'est ce qu'il fait le mieux. Si le paramètre visible de votre objet est désactivé (afin que les instances de l'objet ne soient pas dessinées), tous les événements de dessin sont ignorés (à l'exception de l' événement Resize ). Cela signifie que rendre une instance invisible arrêtera tout le code placé dans l'un de ces événements de s'exécuter, donc ne mettez pas de code essentiel dans les événements de dessin s'ils ne seront pas visibles. Ce que vous dessinez n'a rien à voir avec le moteur de collision que vous choisissez (traditionnel ou physique) tel qu'il est défini par les propriétés de l'objet et le sprite (ou masque) que l'objet a été donné. Dessiner GUI Le type d'événement Draw GUI appartient à la catégorie Draw Event et est spécialement conçu pour dessiner des éléments GUI qui ne sont pas affectés par l'échelle ou la rotation de la caméra de vue. Cela signifie que vous pouvez demander à une instance de dessiner tous les éléments de votre HUD ou de votre interface utilisateur sans avoir à baser tout le positionnement des éléments sur la position de l'occurrence dans la pièce ou sur la position de la vue de la caméra actuelle. Lorsque vous dessinez dans ces cas, il est important que vous compreniez que les coordonnées de dessin ne changent pas même lorsque les vues de caméra sont actives et que (0,0) est toujours le coin supérieur gauche de la surface d'application ou de l'affichage (voir la remarque à au bas de cette section), et la largeur et la hauteur par défaut sont 1: 1 avec la surface d'application. L'ordre de profondeur est toujours conservé entre différentes instances sur différentes couches (donc une instance sur une couche supérieure sera dessinée sous une à une couche inférieure) et également dans les événements eux-mêmes, car l' événement Draw GUI Begin sera d'abord dessiné pour toutes les instances, puis L'interface graphique standard de Draw dessinera pour toutes les instances au-dessus de cela, et finalement l' événement Draw Gui End est déclenché. De cette façon, vous pouvez dessiner des éléments ou définir des propriétés de dessin dans l'interface graphique de Draw Begin en une seule instance et vous assurer que toutes les instances avec une interface graphique standard de dessin ou un événement de fin d'interface graphique de dessin utiliseront ces propriétés ou dessineront sur ce que la première instance a dessiné. En gros, c'est un moyen sûr de garantir que certaines choses sont dessinées à certains moments, tout comme le font les événements Begin Step et End Step. Ces événements peuvent également être utilisés en conjonction avec les événements Draw normaux (qui seront affectés par la position, l'échelle et la rotation de la vue de la caméra comme d'habitude). Si vous n'avez pas d'événement de dessin mais que vous avez un événement d'interface graphique de GameMaker Studio 2 dessinera toujours l'image-objet par défaut pour l'instance (si elle en a un) comme d'habitude. En ce qui concerne les autres événements de dessin, les événements de l'interface graphique de dessin seront toujours dessinés sur tout ce qui est dessiné dans les événements de dessin normaux. Ainsi, si vous avez une instance sur un calque inférieur avec un événement Draw GUI, elle dessinera sur l'instance qui se trouve sur un calque supérieur avec un événement Draw normal. Si les deux instances ont un événement Draw GUI, l'ordre des calques sera respecté. REMARQUE: Cet événement dessine, par défaut, 1: 1 avec la taille de la surface de l'application, qui est normalement la taille de la pièce ou du port de vue. Cela signifie que lorsque vous avez activé la correction du rapport d'aspect dans les options de jeu, l'interface graphique ne sera pas dessinée sur les barres noires qui «boîte aux lettres» du jeu. Ce comportement peut être désactivé à l'aide de la fonction display_set_gui_maximise (), et vous pouvez également verrouiller l'événement GUI à une taille spécifique qui sera ensuite mise à l'échelle pour s'adapter automatiquement aux dimensions de la surface d'affichage ou d'application en utilisant la fonction display_set_gui_size (). Tirage avant et après le tirage Les événements Pre Draw et Post Draw font partie de la catégorie Draw Event. Cependant, contrairement aux autres événements Draw, ceux-ci dessinent directement dans la mémoire tampon d'affichage, qui sera la taille de l'espace d'écran combiné pour toutes les fenêtres actuellement visibles, ou la taille de la fenêtre si vous n'utilisez qu'une seule fenêtre ou aucune fenêtre du tout. L'image ci-dessous illustre ceci: Ainsi, si vous utilisez les événements Pre ou Post Draw, vous dessinez vers la cible de rendu plein écran (tampon d'affichage) qui aura la même taille que la fenêtre à laquelle toutes les fenêtres sont conçues pour s'adapter. Si vous n'avez aucune fenêtre active, celle-ci est à la place définie sur la taille de la fenêtre elle-même. L'événement Pre Draw est déclenché avant tout autre événement de dessin, et vous pouvez y définir des valeurs, définir des propriétés de dessin et même dessiner des objets sans vous soucier des fenêtres ou de la taille du calque de l'interface graphique (la taille du calque de l'interface graphique peut être la même que celle du tampon d'écran, mais ce n'est peut-être pas le cas puisque vous pouvez définir la résolution de l'interface graphique dans le code). Il convient de noter que cet événement se produit avant que le tampon d'affichage ne soit effacé pour le dessin normal, ce qui signifie que si vous ne désactivez pas l'effacement de vue dans l'éditeur de pièce, rien de ce qui est dessiné dans l'événement Pre Draw ne sera vu, comme le premier dessin de la fenêtre. va l'effacer. Si vous voulez pouvoir voir à travers les fenêtres elles-mêmes, ou si vous n'utilisez pas du tout les fenêtres, vous devez également avoir défini la couleur d'arrière-plan pour avoir un alpha de 0 dans l' éditeur de pièce. REMARQUE: si vous désactivez ces options, vous remarquerez peut-être que des artefacts indésirables sont dessinés à l'écran lorsque le jeu est testé (comme des «traces» d'instances). Cela est dû au fait que vous dessinez directement sur l'image précédente du tampon d'affichage sans qu'elle soit effacée. Cependant, vous pouvez utiliser draw_clear_alpha () pour le faire vous-même. L'événement Post Draw est déclenché après tous les événements de dessin standard, mais avant les événements de l'interface graphique Draw. Comme l'événement Pre Draw, il est basé sur la taille de la mémoire tampon d'affichage et est placé avant les événements Draw GUI pour vous permettre d'effectuer des effets de post-traitement et d'autres choses sur une base plein écran simplement et facilement sans interférer avec aucun HUD / Éléments d'interface graphique que vous pouvez avoir dans votre jeu. Redimensionner la fenêtre Ce type d'événement appartient à la catégorie Draw Event, et bien qu'il ne dessine rien, il réagit aux changements dans le tampon d'affichage - en particulier, il est conçu pour réagir au changement de la taille du tampon d'affichage UWP lorsque la fenêtre de jeu est "cassé". Sur la plate-forme cible UWP, il est important que vous détectiez tout redimensionnement de la mémoire tampon d'affichage à partir du "snapping" de la fenêtre de jeu (lorsque l'utilisateur fait glisser la fenêtre sur le côté de l'écran, par exemple). Cet événement fera exactement cela et est déclenché chaque fois que la fenêtre est modifiée, vous permettant d'ajouter ici un code personnalisé qui redimensionnera la vue ou repositionnera les éléments HUD si nécessaire. Cette fonction est fournie comme un moyen pratique d'éviter d'avoir un code d'événement d'étape qui vérifie ces choses tout le temps. REMARQUE: vous ne pouvez pas dessiner dans cet événement! Il est déclenché par le redimensionnement de la fenêtre et sert uniquement à capturer ce changement... tout dessin qui doit être fait doit encore être dans l'un des autres événements de dessin.  Retour: Evénements d'objets Suivant: Événements asynchrones © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

