 L'éditeur de Shader Shaders sont un outil très puissant qui peut être utilisé pour manipuler les graphiques que votre jeu rend à l'écran, permettant des effets incroyablement rapides qui peuvent aller, par exemple, de l'ajout d'une teinte de couleur subtile à un sprite, jusqu'aux effets de distorsion en plein écran.. Mais qu'est-ce qu'un shader ? Un shader est essentiellement un programme en deux parties qui s'exécute directement sur la carte graphique elle-même, ce qui le rend très rapide car le GPU fait tout le travail et libère des cycles de processeur pour votre code de jeu. Le shader complet est composé d'un shader et d'un shader (également connu sous le nom de pixel shader ). Ces deux petits programmes fonctionnent ensemble afin de manipuler ce que la carte graphique rend à l'écran. Cela vous permet ensuite de manipuler en temps réel, la position, la couleur et les valeurs alpha qui sont réellement rendues sur le tampon d'affichage. Vertex Shader Le Vertex Shader est l' shader programmable dans le pipeline de rendu qui gère le traitement des sommets individuels (les points des triangles utilisés pour rendre n'importe quelle image), et lorsque vous effectuez le rendu d'une géométrie - comme un sprite ou une surface - GameMaker Studio 2 crée un flux de sommets - appelé Vertex Buffer - qui définit la géométrie de ces triangles. Un sprite par exemple aurait une géométrie de deux triangles (normalement appelés polygones ) rendus ensemble pour former un "quad". Ce flux de sommets du Vertex Buffer est alimenté en entrée du Vertex Shader, qui peut traiter les données des sommets de manière programmable. La Shader est utilisée par le GPU pour assembler des triangles, qui sont ensuite correctement coupés et sélectionnés vers le port de vue et la caméra de vue, puis envoyés au bloc rasterizer du GPU qui génère un nouveau flux de sortie, constitué par quelque chose appelé Fragments. Ce sont de minuscules structures de données, dont chacune est relative à un seul pixel qui apparaît à l'écran. Fragment Shader Le Fragment Shader est l' shader programmable dans le pipeline de rendu qui traite des «fragments» - les pixels interpolés utilisés pour texturer un polygone donné - et ils sont responsables de la sortie de la couleur de pixel finale de chaque pixel de triangle rendu. Fondamentalement, cela fonctionne comme ceci: le Fragment Shader reçoit en entrée tous les fragments (les pixels individuels du triangle en cours de rendu) qui ont été passés le long du pipeline par le Vertex Shader. Il peut ensuite traiter ces fragments pour changer la couleur et l'alpha du pixel de destination final qui sera dessiné à l'écran. Un aperçu complet du fonctionnement shaders et de la place qu'ils occupent dans le pipeline graphique n'entre pas dans le cadre de cela, mais vous pouvez trouver un guide bried ici: Guide d'utilisation des Shaders Et il y a un certain nombre d'articles sur le YoYo Games Tech qui entrent beaucoup plus en détail, auxquels vous pouvez accéder à partir des liens suivants: Shaders Partie 1 Shaders Partie 2 Shaders Partie 3 Shaders Partie 4 GameMaker Studio 2 prend en charge les langages de shader Langage Shader Plateforme cible GLSL ES Toutes les plateformes cibles GLSL Mac et Ubuntu ( Linux ) HLSL 11 Windows, UWP, XboxOne PSSL Playstation 4 Pour créer une shader, cliquez simplement avec le bouton droit de la souris dans le navigateur de ressources et sélectionnez Créer un Shader. Une fois que vous avez créé le shader base, vous pouvez ensuite utiliser le bouton droit de la souris menu sur la nouvelle ressource pour sélectionner le shader avant de continuer à éditer le code: L'éditeur de code lui-même est divisé en deux «programmes» - Vertex et Fragment - lorsque vous créez un nouveau shader, chacun étant disponible à partir des onglets en haut de l'éditeur. Les deux sont créés en même temps car vous ne pouvez pas créer un shader sans les deux parties. Même si vous ne souhaitez utiliser que le fragment shader vous devrez d'abord créer un vertex shader "pass through", c'est pourquoi, par défaut, tout nouveau shader cours de création aura un vertex et un fragment pass through shader déjà codés pour vous (dans la capture d'écran en haut de la page, vous pouvez voir que nous avons utilisé la vue du volet de l'éditeur de code pour montrer les deux côte à côte... utile lorsque vous travaillez sur les deux shader ensemble). Il est à noter que vous pouvez utiliser les shaders GLSL ES sur toutes les plates-formes cibles, mais pour qu'ils fonctionnent sur la plate-forme cible HTML5, vous devez avoir activé WebGL dans les options de jeu HTML5, sinon ils ne fonctionneront pas. Pour plus de détails sur shader fonctions de shader et comment elles peuvent être utilisées dans GameMaker Studio 2 veuillez consulter les pages suivantes: Fonctions Shader - La section de référence GML shaders. Shader Constantes - Les constantes intégrées à GameMaker Studio 2 qui peut être utilisé lors de l' écriture des shaders. Spécifications GLSL ES - Fichier PDF des Shader Language GameMaker Studio 2. Référence du langage HLSL - Les pages de référence Microsoft pour l'utilisation de HLSL.Présentation du langage PSSL - Présentation du langage PSSL au format présentation.  Retour: Les éditeurs d'actifs Suivant: Sons © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

