
  Sprites non bitmap
  GameMaker Studio 2 prend en charge les sprites non bitmap sous la forme de fichiers vectoriels SWF ou de fichiers Spine Skeletal Animation. Ces deux formats ont leurs avantages et leurs inconvénients, et les deux sections ci-dessous expliquent comment les importer dans l'éditeur de sprites et donnent quelques informations sur la façon dont ils sont dessinés.
   
  Sprites d'animation squelettique (colonne vertébrale)
  Un sprite réalisé à l'aide d'une animation squelettique est un sprite dans lequel un "squelette" de base a été créé et animé à l'aide d'images clés pour déplacer les éléments du squelette dans le temps. Ce squelette est ensuite habillé à partir d'un atlas de textures et l'animation résultante est exportée dans l'un des nombreux types de fichiers. GameMaker Studio 2 vous permet d'importer ce type de sprite à condition qu'il ait été exporté sous la forme d'un fichier au format *.json et qu'il soit associé au fichier atlas de texture correct (
    fichier d'atlas de textures correctement associé (*.atlas) et le fichier image (au format *.png) dans le même répertoire.
  Actuellement, GameMaker Studio 2 peut uniquement importer des images vectorielles à partir de fichiers au format JSON réalisés par le programme Spine,
    Cependant, la manière de les importer dans le programme est presque identique à celle de l'ajout d'une image bitmap normale. Pour ajouter une animation squelettique, vous devez créer un nouveau sprite, ce qui fera apparaître la boîte de dialogue standard Load Sprite, sauf que
    ici, vous devez vous assurer que vous avez sélectionné *.json dans le filtre de fichier en bas :
  
  En cliquant sur le bouton "load", l'animation squelettique sera ajoutée au navigateur d'actifs sous forme de sprite, avec une barre de progression qui s'affiche au fur et à mesure du traitement du fichier. Notez que, selon la complexité du fichier
    du fichier, cela peut prendre un moment ou deux. Une fois le traitement terminé, vous serez ramené à la boîte de dialogue des propriétés du sprite, qui ressemblera désormais à ceci :
  Une fois que vous avez importé l'animation, vous pouvez définir les propriétés de collision, mais notez que vous êtes limité ici à l'utilisation de collisions précises ou de collisions de boîte de délimitation.
    collisions précises ou collisions de boîte englobante, et que les données de collision pour une animation squelettique sont explicitement extraites des données fournies. GameMaker Studio 2 ne génère pas de masque de collision si les données sont absentes du fichier importé, ce qui signifie que
    vous n'obtiendrez tout simplement pas de collisions fonctionnelles si les masques ne sont pas définis correctement dans le programme utilisé pour créer l'image importée.
  NOTE: En raison de la complexité des animations squelettiques, l'image de prévisualisation affichée dans l'éditeur de sprites n'est pas destinée à représenter précisément votre animation, mais plutôt à vous donner une image simple qui représente l'animation pour la visualiser
    dans l'éditeur de pièces.
  Contrairement aux sprites bitmap, le sprite d'animation squelettique importé ne peut pas être modifié dans l'éditeur de quelque manière que ce soit, mais il existe un certain nombre de fonctions disponibles dans le GameMaker Language(GML) qui peuvent être utilisées pour changer les apparences, définir les propriétés,
    et contrôler d'autres aspects de l'animation. Vous ne pouvez pas non plus définir d'options de texture pour le sprite, car GameMaker utilisera l'atlas de texture fourni par le programme qui a généré le sprite.
  Il y a un certain nombre de choses dont vous devez être conscient lorsque vous importez des sprites d'animation de squelette, la plus importante étant que certaines des fonctions de dessin et de gestion des sprites ne sont pas supportées pour des raisons techniques, en particulier les fonctions suivantes
    fonctions de dessin qui ne dessinent qu'une partie d'un sprite, ou qui "biaisent" la position d'une manière ou d'une autre (voir les différentes draw_sprite_*() fonctions
    pour plus de détails). Cependant, les fonctions de base de dessin de sprites sont entièrement supportées, tout comme les variables de sprites intégrées. Outre ces fonctions et variables, vous pouvez également définir et modifier les propriétés de l'animation à l'aide des fonctions spéciales de skeleton_*, qui sont répertoriées et expliquées dans la section de référence sur les animations squelettiques.
   
   
  Sprites vectoriels (SWF)
  En général, tous les sprites de GameMaker utilisent des bitmaps qui, bien que flexibles en termes de contenu, limitent à la fois la taille et le nombre d'images possibles dans un sprite avant que l'utilisation de la mémoire ne devienne prohibitive. Les sprites vectoriels contournent ces limites
    en stockant et en dessinant leur contenu différemment : au lieu d'une grille de pixels, qui peuvent devenir des blocs ou flous à l'échelle, ils sont dessinés sous forme de triangles utilisant les mathématiques vectorielles et ceux-ci peuvent être agrandis (ou réduits) sans perdre leur définition, comme illustré
    dans l'image ci-dessous :
  Pour vous aider à visualiser comment cela se passe, l'image ci-dessous représente le même sprite vectoriel Fireman, mais nous pouvons maintenant voir les polygones qui sont utilisés pour créer l'image dans GameMaker Studio 2.
    sont utilisés pour créer l'image dans GameMaker Studio 2:
  Cependant, rien n'est jamais gratuit lorsqu'il s'agit de programmer des jeux, et le compromis avec les sprites vectoriels est qu'ils sont plus coûteux en CPU que les sprites bitmap.
    pour les dessiner que les sprites bitmap et cette différence de vitesse augmente avec la complexité de l'animation importée. En outre, leur utilisation de la mémoire est affectée par leur complexité visuelle, contrairement aux sprites bitmap. Cela dit, ils permettent
    d'ajouter de grands graphiques animés d'une manière qui serait impossible avec des sprites bitmap traditionnels.
  D'un autre côté, comme les sprites vectoriels ne dessinent que les pixels absolument nécessaires (contrairement aux sprites bitmap qui "dessinent" également l'espace vide autour de l'image), ils peuvent être moins chers du point de vue du GPU. De plus, en général
    les sprites vectoriels sont beaucoup plus petits que leurs équivalents bitmap - pour l'exemple du pompier ci-dessus, les tailles des différents types de sprites sont les suivantes :
  Bitmap à 70x68 = 4x70x68 octets x 12 cadres = 223k Vecteur = 54k
  Si vous quadruplez la résolution du sprite :
  Bitmap à 280x272 = 4x280x272 octets x 12 images = 3570k Vecteur = 54k
  Ainsi, comme vous pouvez le constater, il est possible d'économiser beaucoup de mémoire en utilisant des sprites vectoriels, et nous avons encore beaucoup de potentiel pour de futures économies d'espace.
  Actuellement, GameMaker Studio 2 dispose d'une prise en charge limitée des sprites vectoriels. Il ne peut importer des images vectorielles qu'à partir de fichiers au format SWF. La manière de les importer dans le programme est presque identique à celle de l'ajout d'une image bitmap normale.
    image bitmap normale. Pour ajouter un sprite vectoriel, créez un nouveau sprite, ce qui fera apparaître la boîte de dialogue standard Charger un sprite, mais assurez-vous d'avoir sélectionné *.swf dans le filtre de fichiers situé en bas.
  En cliquant sur le bouton "charger", l'image vectorielle ou l'animation sera ajoutée au navigateur d'actifs ,
    avec une barre de progression qui s'affiche au fur et à mesure que le fichier est traité. Notez que, selon la complexité du fichier, cela peut prendre un certain temps (jusqu'à une minute pour les animations les plus complexes). Une fois le traitement terminé, vous serez ramené à la boîte de dialogue des propriétés du sprite.
    qui ressemble maintenant à ceci :
  L'éditeur de sprites n'a pas beaucoup changé, mais le bouton Edit Image a été grisé et ne peut pas être cliqué car il n'y a pas de bitmap à modifier dans ce type de sprite.
    être cliqué puisqu'il n'y a pas de bitmaps à éditer dans ce type de sprite. Deuxièmement, toutes les options de texture ont également été grisées. Les sprites SWF sont basés sur les mathématiques et en tant que tels n'ont généralement pas de textures associées, donc aucune des options disponibles n'est applicable à ce type de sprite.
    options disponibles ne sont applicables à ce type de sprite.
  REMARQUE: l'aspect de l'image dans l'éditeur de prévisualisation que vous avez choisi ne sera pas le même que celui qu'elle aura dans votre jeu, ni dans la fenêtre de prévisualisation de l'éditeur de sprites. L'image vectorielle sera importée à la taille à laquelle elle a été créée,
    qui n'est pas nécessairement la taille à laquelle l'aperçu est affiché (les navigateurs mettent normalement l'image à l'échelle pour l'adapter, par exemple).
  Un ajout à l'éditeur de sprites est que vous pouvez définir la qualité du sprite vectoriel lorsqu'il est dessiné en utilisant le curseur SWF Precision en haut. Cela réduira ou augmentera simplement le nombre de triangles utilisés pour générer le sprite.
    - une valeur d'environ 50 % étant normalement suffisante pour la plupart des jeux - cependant, vous devriez expérimenter avec cette valeur si vous utilisez une mise à l'échelle extrême, ou si vous avez des problèmes de performance.
  Il y a un certain nombre de choses dont vous devez être conscient lorsque vous importez des sprites vectoriels, la plus importante étant que certaines fonctions de dessin et de gestion de sprites ne sont pas supportées pour des raisons techniques, en particulier les fonctions de dessin
    qui ne dessinent qu'une partie d'un sprite, ou qui "biaisent" la position d'une manière ou d'une autre (voir les différentes draw_sprite_*() fonctions
    pour plus de détails). Cependant, les fonctions de base de dessin de sprites sont entièrement supportées, tout comme les variables de sprites intégrées. Vous pouvez également définir différentes valeurs d'anti-aliasing(AA)
    pour les sprites SWF dessinés en utilisant les fonctions draw_enable_swf_aa(), draw_get_swf_aa_level() ou draw_set_swf_aa_level().
  Vous devez également être conscient de ce qui suit :
  
    Lors de l'importation d'un fichier *.SWF, Actionscript n'est pas pris en charge, donc si votre SWF en dépend pour fonctionner correctement, il ne fonctionnera probablement pas correctement. De même, les clips vidéo intégrés qui ont leur propre ligne de temps ne verront que leur première image affichée tout au long de l'animation.
      n'auront que leur première image affichée tout au long de l'animation - toute l'animation doit être sur la ligne de temps principale.
    Si votre fichier vectoriel contient des détails particulièrement fins, vous pouvez parfois constater que des trous ou des triangles étranges apparaissent dans les sprites résultants. Cela est dû au fait qu'à petite échelle, la géométrie peut parfois s'effondrer pour créer des formes qui ne se triangulent pas bien.
      qui ne se triangulent pas bien. Dans ce cas, vous avez deux options : vous pouvez augmenter l'échelle du contenu du fichier vectoriel, ce qui donnera à l'importateur plus d'espace pour jouer, ou vous pouvez essayer de réduire le niveau de détail de l'objet qui se brise.
    GameMaker Studio 2 utilise la taille de la scène du SWF comme limite du sprite résultant. Cependant, si vous avez quelque chose sur la scène en dehors de ces limites, il est quand même dessiné. Cela signifie que vous devez essayer d'éviter de placer quoi que ce soit en dehors des limites de la scène si vous ne voulez pas qu'il soit dessiné.
      de la scène si vous ne voulez pas qu'il soit affiché, soit utiliser une couche de masque pour limiter le dessin à cette zone.
    La taille de la scène affecte également la taille des masques de collision générés. Par conséquent, si la taille de la scène est importante et que votre animation comporte de nombreuses images, vous risquez de consommer beaucoup de mémoire. N'utilisez donc des masques de collision précis que si vous en avez
      si vous en avez vraiment besoin.
    Comme un fichier SWF est créé à partir de plusieurs couches, dont certaines peuvent se chevaucher, l'alpha ne fonctionne pas tout à fait de la même manière qu'avec les sprites bitmap - les zones qui se chevauchent ne seront pas aussi transparentes que les autres parties du sprite, car les pixels qui s'y trouvent sont dessinés plusieurs fois.
      les pixels sont dessinés plusieurs fois.
     Les remplissages bitmap sont pris en charge, mais si vous utilisez des remplissages bitmap en mosaïque dans votre fichier SWF, vous devez vous assurer que la taille du bitmap est une puissance de deux, sinon la mosaïque ne fonctionnera pas correctement. Le rendu de texte est également pris en charge, mais vous devez
      intégrer la police dans votre fichier SWF pour qu'elle apparaisse dans le sprite résultant. De plus, actuellement, seul le texte aligné à gauche sur une seule ligne est pris en charge.
  
   
   
   
  
    
      
        Retour : Groupes de textures
        Suivant : Pages de texture
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  

