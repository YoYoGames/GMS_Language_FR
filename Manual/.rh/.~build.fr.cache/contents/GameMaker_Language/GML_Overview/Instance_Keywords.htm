 Mots-clés d'instance Pour faciliter certaines choses dans GameMaker Studio 2, vous pouvez utiliser l'un des mots-clés d'instance dans votre code (que ce soit GML ou Drag and Drop™). Ces mots-clés sont principalement utilisés pour identifier des instances - et dans certains cas des structures - dans des situations différentes et chacune est expliquée dans le texte ci-dessous. Notez que tous les mots-clés sont représentés par une valeur entière négative en interne, il faut donc faire attention lors de l'attribution ou de la vérification des valeurs de variable par rapport ou avec ces mots-clés, car vous pouvez obtenir des résultats inattendus plus tard, car GameMaker Studio 2 interprète la valeur que vous avez utilisée comme autre chose.. Vous devez également noter que l'utilisation des valeurs au lieu des mots-clés dans votre code n'est pas du tout recommandée et pourrait causer des problèmes plus tard. self Mot-clé Description évaluerself L'instance / structure qui exécute le bloc de code actuel. -1self peut être utilisé pour identifier la structure ou l'instance actuelle qui est dans la portée du bloc de code actuel. Par exemple:var val = 100; with (instance_create_layer(x, y, "Instances", obj_Fire))     {
           self.val = val;     }
     Dans cet exemple, vous pouvez voir que nous avons une variable locale appelée val et nous voulons qu'il définisse la variable d'instance avec le même nom dans l'instance d'objet nouvellement créée. Pour identifier correctement la variable d'instance et dire à GameMaker Studio 2 de la définir dans l'instance appelant le bloc de code, nous utilisons le self mot-clé. Dans la plupart des cas, vous pouvez également utiliser le id variable d'instance intégrée au lieu de self, mais self offre certains avantages. Pour commencer, il est plus rapide pour le compilateur d'identifier l'instance (ou la structure) en utilisant self plutôt que id, comme le id la valeur passe par la table de recherche d'instance pendant que self ne fait pas. Deuxièmement, pour les personnes qui créent des extensions, il est très utile de s'assurer de la bonne portée des variables, car il est possible qu'un projet qui utilise une extension ait une variable de portée globale ou quelque chose avec le même nom qu'une variable dans l'extension. REMARQUE: leself Le mot clé n'est pas un raccourci pour la valeur réelle de l'ID d'une instance ou d'une structure et ne doit être utilisé que dans le contexte expliqué ci-dessus. Si vous avez besoin de la valeur d' ID pour une instance, vous devez utiliserself.id, par exemple:var myID = id; with (all)     {
           if self.id == myID         {          // do something          }     }
     Il convient également de noter que self peut également être utilisé dans des structures - dans des circonstances très spécifiques - pour référencer des variables membres pour la structure.other Mot-clé Description évaluerother L'autre instance impliquée dans un événement de collision, ou l'autre instance ou structure d'un with fonction. -2 Le mot clé spécial other peut être utilisé de deux manières différentes pour référencer une instance spécifique (et dans certains cas, un struct): lorsqu'il est utilisé dans un with (expliqué ici ) ou lorsqu'il est utilisé dans un événement de collision, c'est ce que cette section va expliquer. Un événement de collision ne peut se produire qu'entre deux instances. Vous pouvez avoir plusieurs collisions entre plusieurs instances, mais elles sont toutes résolues par GameMaker Studio 2 sur une base individuelle, avec l'instance qui a l'événement de collision et l '«autre» instance impliquée. Imaginez que vous avez un objet joueur, plusieurs objets ennemis et plusieurs objets balle que l'ennemi peut tirer sur vous. Vous pouvez attribuer à chaque ennemi une seule instance de balle mais avec une variable de dégâts différente qui lui est assignée aléatoirement lors de sa création, par exemple:var nnn; nnn = instance_create_layer(x, y, "Bullets", obj_Bullet); nnn.damage = 5 + irandom(5); nnn.speed = 8; nnn.direction = point_direction(x, y, obj_Player.x, obj_Player.y); Vous pouvez voir comment nous définissons ses variables en utilisant la "méthode du point" décrite dans la section sur l' adressage des variables dans d'autres instances. Cela donnera aux objets balle une valeur de dommage différente. Mais qu'en est-il de l'objet joueur? Comment détectera-t-il les dommages qu'il doit subir? En utilisant other en cas de collision:hp -= other.damage; if hp <= 0 instance_destroy(); Le code ci-dessus déduira le montant stocké dans l' autre instance dans la variable «dommages» de collisions de la variable «hp» du joueur, puis il vérifiera si le «hp» est inférieur ou égal à 0. Si c'est le cas alors cela détruira l'objet joueur. Veuillez noter que other utilisé de cette manière ne fonctionne que dans l'événement de collision et que l'autre instance doit avoir la variable en cours de vérification, sinon une erreur sera renvoyée. Cependant, vous pouvez attribuer des valeurs aux variables, ou même en créer de nouvelles, en utilisant other dans l'événement de collision aussi, comme ceci://add ten to the other instance "mana" variable other.mana += 10; //set the other instance variable "hit" to true, creating it if the variable doesn't already exist other.hit = true; Il convient également de noter que other peut également être utilisé dans des structures - dans des circonstances très spécifiques - pour référencer des variables membres pour la structure.all Mot-clé Description évaluerall Toutes les instances actuellement actives dans la salle. -3 Ce mot-clé est utilisé pour indiquer à GameMaker Studio 2 qu'une fonction doit être appliquée ou pour vérifier toutes les instances actives dans une salle (les instances désactivées ne seront ni vérifiées ni accessibles). Vous ne pouvez pas utiliser all pour accéder ou définir des variables dans d'autres instances en utilisant la méthode point (voir ici ), mais vous pouvez l' utiliser lors de l'appel with(), par exemple:with (all)     {
           speed = 0;     }
     Le code ci-dessus définira la vitesse de toutes les instances de la salle sur 0. Vous pouvez également utiliser all au sein des fonctions pour cibler ou vérifier toutes les instances de la salle, par exemple://Check a point for any active instance in the room inst = instance_position(mouse_x, mouse_y, all);         
       //Check all instances for a collision along a line if collision_line(x, y, mouse_x, mouse_y, all, false, true) {}
       //Add all instances in the room into a motion planning grid mp_grid_add_instances(grid, all, false);all est un mot-clé très utile et peut être utilisé dans de nombreuses situations au sein de votre code et de vos actions, réduisant souvent la quantité de code que vous devez écrire pour obtenir l'effet souhaité.noone Mot-clé Description évaluernoone Aucune instance du tout. -4 Cela peut sembler étrange, mais plusieurs fois lors de la programmation de vos jeux, vous trouverez le besoin de vérifier s'il n'y a pas d'instances trouvées à un endroit, ou dans une collision etc... Dans ces cas, vous utiliseriez ce mot-clé pour ne rien vérifier, quelque chose comme ça:if instance_nearest(x, y, obj_enemy) != noone     {
           //do something as there is an enemy instance near     }
     Dans cet exemple, la fonction instance_nearest() reviendra soit noone ou l'ID unique de l'instance trouvée la plus proche. Fondamentalement, chaque fois que vous avez besoin de rechercher une instance, vous pouvez vous attendre à obtenir soit noone ou un ID d'instance unique renvoyé.  Retour: Présentation de GML Next: Adressage de variables dans d'autres instances © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

