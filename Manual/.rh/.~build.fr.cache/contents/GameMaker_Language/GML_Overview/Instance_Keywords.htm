
  
  Mots clés de l'instance
  Pour faciliter certaines choses dans GameMaker Studio 2, vous pouvez utiliser l'un des nombreux mots-clés d'instance dans votre code (qu'il soit GML ou Drag and Drop™). Ces mots-clés sont principalement utilisés pour identifier les instances - et dans certains cas les structs - dans différentes situations.
    situations et chacun d'entre eux est expliqué dans le texte ci-dessous. Notez que tous les mots-clés sont représentés par une valeur entière négative en interne, il faut donc faire attention lors de l'affectation ou de la vérification des valeurs de variables par rapport à ces mots-clés ou avec eux,
    car vous pourriez obtenir des résultats inattendus par la suite, GameMaker Studio 2 interprétant la valeur que vous avez utilisée comme autre chose. Vous devez également noter que l'utilisation des valeurs à la place des mots-clés dans votre code n' est pas du tout recommandée et pourrait causer des problèmes
    plus tard.
   
  self
  
    
      
        
          Mot clé
          Description
          valeur
        
        
          self
          L'instance/structure qui exécute le bloc de code actuel.
             -1
        
      
    
     
    self peut être utilisé pour identifier la structure ou l'instance actuelle qui est dans le champ d'application dans le bloc de code actuel. Par exemple :
    var val = 100 ; with (instance_create_layer(x, y, "Instances", obj_Fire)) {
       self.val = val ; }
    
    Dans cet exemple, vous pouvez voir que nous avons une variable locale appelée val et que nous voulons qu'elle définisse la variable d'instance portant le même nom dans l'instance d'objet nouvellement créée. Pour identifier correctement la variable d'instance
      et indiquer à GameMaker Studio 2 de la définir dans l'instance appelant le bloc de code, nous utilisons le mot-clé self. Dans la plupart des cas, vous pouvez également utiliser la variable d'instance intégrée id au lieu de self,
      mais self offre certains avantages. Tout d'abord, il est plus rapide pour le compilateur d'identifier l'instance (ou la structure) en utilisant self plutôt que id, car la valeur de l'id passe par la table de recherche de l'instance alors que self ne le fait pas. Deuxièmement, pour les personnes qui créent des extensions, il est très utile de s'assurer de la portée correcte des variables, car il est possible qu'un projet qui utilise une extension ait une variable de portée globale.
      une extension puisse avoir une variable de portée globale ou quelque chose avec le même nom qu'une variable dans l'extension.
    REMARQUE: Le mot-clé self n'est pas un raccourci pour la valeur d'identification réelle d'une instance ou d'une structure et ne doit être utilisé que dans le contexte expliqué ci-dessus. Si vous avez besoin de la valeur ID d'une
      une instance, vous devez utiliser self.id, par exemple :
    var myID = id ; with (all) {
       if self.id == myID { // faire quelque chose }  }
    
    Il convient également de noter que self peut également être utilisé dans les structures - dans des circonstances très spécifiques - pour référencer les variables membres de la structure.
     
  
  other
  
    
      
        
          Mot clé
          Description
          valeur
        
        
          other
          L'autre instance impliquée dans un événement de collision, ou l'autre instance ou structure d'une fonction avec.
             -2
        
      
    
     
    Le mot-clé spécial other peut être utilisé de deux manières différentes pour faire référence à une instance spécifique (et dans certains cas, à une structure) : lorsqu'il est utilisé dans une fonction with (expliqué ici)
      ou lorsqu'il est utilisé dans un événement de collision, ce qui est ce que cette section va expliquer.
    Un événement de collision ne peut se produire qu'entre deux instances. Vous pouvez avoir plusieurs collisions entre plusieurs instances, mais elles sont toutes résolues par GameMaker Studio 2 sur une base individuelle, avec l'instance qui a l'événement de collision et l'"autre" instance impliquée.
      l'"autre" instance impliquée. Imaginez que vous ayez un objet joueur, plusieurs objets ennemis et plusieurs objets balles que l'ennemi peut vous tirer dessus. Vous pouvez attribuer à chaque ennemi une seule instance de balle, mais avec une variable de dégâts différente
      qui lui est attribuée aléatoirement lors de sa création, par exemple :
    var nnn ; nnn = instance_create_layer(x, y, "Bullets", obj_Bullet) ; nnn.damage = 5 + irandom(5) ; nnn.speed = 8 ; nnn.direction = point_direction(x, y, obj_Player.x, obj_Player.y) ;
    Vous pouvez voir comment nous définissons ses variables à l'aide de la "méthode des points" décrite dans la section "Adresser les variables dans d'autres instances". Cela donnera aux objets balles une valeur de dommage
      différents. Mais qu'en est-il de l'objet joueur ? Comment va-t-il détecter les dégâts qu'il doit subir ? En utilisant other dans l'événement de collision :
    hp -= other.damage ; if hp <= 0 instance_destroy() ;
    Le code ci-dessus déduira le montant stocké dans l'autre instance dans la variable "damage" des collisions de la variable "hp" du joueur, puis il vérifiera si le "hp" est inférieur ou égal à 0. Si c'est le cas
      alors il détruira l'objet joueur. Veuillez noter qu'une autre instance utilisée de cette manière ne fonctionne que dans l'événement de collision et que l'autre instance doit avoir la variable à vérifier, sinon une erreur sera déclenchée. Cependant, vous pouvez assigner
      des valeurs aux variables, ou même en créer de nouvelles, en utilisant other dans l'événement de collision également, comme ceci :
    //ajoute dix à la variable "mana" de l'autre instance other.mana += 10 ; //définit la variable "hit" de l'autre instance à true, en la créant si la variable n'existe pas déjà other.hit = true ;
    Il convient également de noter que other peut également être utilisé dans les structures - dans des circonstances très spécifiques - pour référencer les variables membres de la structure. 
     
  
  all
  
    
      
        
          Mot clé
          Description
          valeur
        
        
          all
          Toutes les instances actuellement actives dans la salle.
             -3
        
      
    
     
    Ce mot-clé est utilisé pour indiquer à GameMaker Studio 2 qu'une fonction doit être appliquée, ou pour vérifier, toutes les instances actives d'une room (les instances désactivées ne seront pas vérifiées ou accédées). Vous ne pouvez pas utiliser all pour accéder à
      ou définir des variables dans d'autres instances en utilisant la méthode du point (voir ici), mais vous pouvez l'utiliser lors de l'appel de la fonction avec()par exemple :
    avec (tous) {
       vitesse = 0 ; }
    
    Le code ci-dessus réglera la vitesse de toutes les instances de la pièce sur 0. Vous pouvez également utiliser all dans les fonctions pour cibler ou vérifier toutes les instances de la pièce, par exemple :
    //Chercher un point pour toute instance active dans la salle inst = instance_position(mouse_x, mouse_y, all) ; 
       //Chercher une collision entre toutes les instances le long d'une ligne if collision_line(x, y, mouse_x, mouse_y, all, false, true) {}
       //Ajouter toutes les instances de la salle dans une grille de planification de mouvement mp_grid_add_instances(grid, all, false) ;
    all est un mot-clé très utile qui peut être utilisé dans de nombreuses situations au sein de votre code et de vos actions, réduisant souvent la quantité de code que vous devez écrire pour obtenir un effet souhaité.
     
  
  noone
  
    
      
        
          Mot clé
          Description
          valeur
        
        
          noone
          Aucune instance du tout.
             -4
        
      
    
     
    Cela peut sembler étrange, mais souvent, en programmant vos jeux, vous aurez besoin de vérifier si aucune instance n'a été trouvée à un endroit, ou dans une collision, etc... Dans ces cas, vous utiliserez ce mot-clé pour vérifier qu'il n'y a rien, quelque chose comme ceci :
    if instance_nearest(x, y, obj_enemy) != noone {
       //faites quelque chose car il y a une instance ennemie à proximité }
    
    Dans cet exemple, la fonction instance_nearest() renverra soit noone, soit l'ID unique de l'instance trouvée la plus proche. En fait, chaque fois que vous avez besoin de vérifier une instance, vous pouvez vous attendre à ce que
      à obtenir soit noone, soit un ID d'instance unique.
     
  
   
   
   
  
    
      
        Retour : Aperçu duGML
        Suivant : Adresser des variables dans d'autres instances
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

