
  
  try / catch / finally
  Les instructions try, catch et finally peuvent être utilisées dans votre jeu pour vérifier les erreurs et vous permettre de tester des blocs de code et de contrôler ce qui se passe si des exceptions d'exécution se produisent. L'utilisation de ces instructions empêchera l'exception de mettre fin au jeu et d'afficher le message d'erreur standard à l'utilisateur, mais cela signifie que vous devrez gérer ce qui se passe ensuite dans ce cas, comme la sauvegarde des fichiers journaux, par exemple, et la fin du jeu de manière élégante (notez que si vous choisissez de ne rien faire, votre jeu se terminera de manière élégante).
    (notez que si vous choisissez de ne rien faire, votre jeu peut devenir instable et ne pas fonctionner correctement).
  Dans sa forme la plus simple, la syntaxe de try est la suivante :
  try {
     <statement1> ;
     <statement2> ;
     ... }
  
  Cependant, le fait d'avoir un try sans rien pour gérer les exceptions que le code peut produire ne sera pas très utile, c'est pourquoi nous le couplons généralement avec un catch, avec la syntaxe suivante :
  try {
     <statement1> ;
     <statement2> ;
     ...
     }
     catch(<variable>)
     {
     <statement1> ;
     <statement2> ;
     ...
     }
  
  Ce que catch fait, c'est vous permettre d'exécuter le code supplémentaire fourni dans le bloc suivant lorsqu'une exception du try précédent a été attrapée. S'il s'agit d'une exception d'exécution, alors la variable fournie peut être utilisée pour accéder à une structure qui contiendra les informations suivantes :
  { message : "", // une chaîne qui est un message court pour cette exception longMessage : "", // une chaîne qui est un message plus long pour cette exception script : "", // une chaîne qui décrit l'origine de l'exception
    qui décrit l'origine de l'exception stacktrace : [ "", "" ], // un tableau de chaînes de caractères qui représente la trame de la pile où l'exception a été générée }
  
  Un exemple simple d'utilisation est présenté ci-dessous :
  var a = 0, b = 0, c = 0 ; try
     {
     c = a div b ; }
     catch( _exception) {
     show_debug_message(_exception.message) ;
     show_debug_message(_exception.longMessage) ;
     show_debug_message(_exception.script) ;
     show_debug_message(_exception.stacktrace) ;
     }
  
  Il se peut que vous souhaitiez exécuter du code, qu'une exception ait été levée ou non, et pour cela, vous pouvez ajouter un bloc final. La syntaxe de finally est la suivante :
  enfin {
     <déclaration1> ;
     <déclaration2> ;
     etc...
     }
  
  Il convient de noter que vous pouvez avoir n'importe quelle combinaison de ces éléments ensemble, c'est-à-dire que vous pouvez avoir une combinaison des deux :
  
    essayer / enfin
    essayer / attraper
    try / catch / finally
  
  Notez qu'à l'intérieur du bloc finally, vous ne pouvez pas utiliser pause, continuer, exit ou return car
    ils n'ont aucune signification dans ce contexte et le compilateur générera une erreur s'ils sont utilisés.
  Enfin, vous pouvez également imbriquer divers try / catch / finally les uns dans les autres, par exemple :
  var a = 0, b = 0, c = 0 ; try
     {
     essai
     {
     c = a div b ; }
     enfin
     {
     ++a ;
     }
     }
     catch(_exception)
     {
     ++a ;
     show_debug_message(_exception.message) ;
     show_debug_message(_exception.longMessage) ;
     show_debug_message(_exception.script) ;
     show_debug_message(_exception.stacktrace) ;
     }
     enfin
     {
     show_debug_message("a = " + string(a)) ; }
  
  Il convient de noter que vous pouvez reprendre le message d'erreur GML par défaut et utiliser votre propre code de gestion en appelant la fonction exception_unhandled_handler(). Cette fonction d'exécution
   Runtime_Functions.htm">fonction d'exécution vous permet de fournir une méthode personnalisée qui sera appelée chaque fois que des exceptions non gérées se produisent dans votre jeu.
   
   
   
  
    
      
        Retour : Caractéristiques de la langue
        Suivant : lancer
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

