 if / else et opérateurs conditionnels Une caractéristique fondamentale de la plupart des langages de programmation est la possibilité de poser une question simple qui donne un booléen true ou false réponse, et en GML cela est réalisé en utilisant le if mot-clé. Un simple if condition prend une expression et exécutera une ou plusieurs instructions s si l'expression se résout comme true, avec la forme de base suivante:if (<expression>)     {     <statement>;     <statement>;     ...     } Ici, vous dites que si une expression se résout comme true alors, fais quelque chose. Notez que la partie "alors" de la condition est implicite, mais il y a un then mot-clé qui peut être utilisé (bien qu'il soit presque toujours omis), vous pouvez donc également créer des conditions comme celle-ci:if (<expression>) then     {     <statement>;     <statement>;     ...     } En dehors de if et then, vous pouvez également utiliser le else mot-clé pour faire autre chose si l'expression en cours de vérification s'évalue comme false. Ce "if... then... else... "formulaire ressemble à ceci:if (<expression>)     {     <statement>;     } else
         {     <statement>;     } Dans ce cas, l'expression sera évaluée, et si elle est évaluée comme false, la déclaration après else est exécutée, sinon l'instruction initiale est exécutée (c'est true ). REMARQUE: dans le GameMaker, toute valeur inférieure ou égale à 0 sera évaluée comme false, tandis que toute valeur supérieure à 0 sera évaluée comme true. C'est une bonne habitude de toujours mettre des crochets autour des expressions et des accolades {} autour des instructions dans le if (sinon seule la première instruction sera exécutée), et prenez une nouvelle ligne dans le bloc pour chaque instruction, par exemple:// This will work if <expression> <statement>;
     // Example: if test == true variable = false else variable = true;// This is better if (<expression>)     {
         <statement>
         } else
         {
         <statement>
         }
    
     // Example if (test == true)     {     variable = false;     } else
         {     variable = true;     } Notez que bien que cela soit légèrement plus détaillé, cela signifie qu'il n'y a pas d'ambiguïté dans le code et qu'il se compilera correctement sur toutes les plates-formes à tout moment. Cependant, l'exemple initial peut ne pas l'être, comme expliqué dans la section de la page Expressions et opérateurs. REMARQUE: lorsque vous comparez deux valeurs pour voir si elles sont égales, vous devez utiliser le "== ", et n'utilisez que le"= "un pour l'affectation. Actuellement, GameMaker les traitera comme interchangeables, mais cela peut changer à l'avenir et votre code est plus propre et plus évident lorsque vous utilisez les bons opérateurs pour les comparaisons et les affectations. Pour donner un bon exemple d'utilisation if, considérez le code suivant qui déplacera une instance vers la position x=200 dans la salle une fois placé dans l'événement Step:if (x < 200)     {
         x += 4;     }
     else
         {
         x = 200;     }
   Notez que vous pouvez également effectuer des vérifications composées dans un if, c'est-à-dire: vérifier diverses valeurs ou expressions dans la même instruction. Ces contrôles peuvent utiliser les différents Opérateurs Combinants (&& et, || ou et ^^ xor). Lorsque vous faites cela, GameMaker Studio 2 évaluera chacun d'eux un par un, et en fonction de la façon dont ils évaluent, le reste peut être ignoré. Par exemple:if (keyboard_check_pressed(vk_enter)) && (instance_exists(obj_Player))     {
         go = false;     alarm[0] = room_speed;     }
   Ici, nous vérifions en utilisant le && "et", il vérifie si les deux conditions dans le if évaluer à true, et si le premier est false alors le second ne sera même pas vérifié. Cela s'appelle "court-circuiter" le code, donc lorsque vous combinez des expressions à vérifier, vous devez vous assurer que la plus "moins chère" pour les performances est toujours la première pour éviter d'évaluer les plus chères si la première évalue à false. Dans la même veine, si une condition peut être évaluée commetrue ou false au moment de la compilation, la condition entière sera supprimée du code, par exemple, disons que vous avez une macro DEBUG_ON  pour le débogage et cela peut être soit true ou false - lorsqu'il est réglé sur false puis le bloc de code suivant sera supprimé du jeu lors de sa compilation:if DEBUG_ON == true     {     show_debug_message("Instances = " + string(instance_count));     } Vous pouvez également effectuer des opérations conditionnelles (également appelées opérations ternaires), qui sont essentiellement un moyen «raccourci» d’effectuer une opération de base if. Il a la syntaxe suivante:variable = <condition> ? <statement1 (if true)> : <statement2 (if false)> L'opérateur conditionnel "? "renverra l'une des deux valeurs données selon que l'expression de la condition est évaluée à true ou false, par exemple:var temp_x = (x < (room_width / 2)) ? 32: (room_width - 32); Le code ci-dessus vérifiera la valeur de "x" par rapport à la valeur de la moitié de la largeur de la pièce, puis si elle est inférieure, elle sera définie "temp_x "à 32 sinon"temp_x "sera la largeur de la pièce - 32. Voici quelques autres exemples d'utilisation:draw_text(x, y, "The fee is " + (global.Member ? "$2.00" : "$10.00")); path_start(((global.level > 10) ? path_hard : path_easy;), 2, path_action_reverse, true); (--hp <= 0) ? instance_destroy() : score +=
    10; Il convient également de noter que vous pouvez imbriquer des opérations conditionnelles, mais que si vous le faites, chaque opération devra être placée entre crochets, par exemple: var c = a ? "foo" : (b ? "bar" : "whee"); // Correct var c = a ? "foo" : b ? "bar" : "whee";   // Will cause an error Retour: Caractéristiques linguistiques Suivant:repeat © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

