
  
  if / else et les opérateurs conditionnels
  Une caractéristique fondamentale de la plupart des langages de programmation est la possibilité de poser une question simple qui donne une réponse booléenne vraie ou fausse. Dans GML, cette fonction est réalisée à l'aide du mot clé if. Une condition if simple prend
    une expression et exécutera une ou plusieursdéclarations si l'expression se résout en true,
    avec la forme de base suivante :
  if (<expression>) { <déclaration> ; <déclaration> ;... }
   Ici, vous dites que si une expression est résolue comme vraie, alors faites quelque chose. Notez que la partie "then" de la condition est implicite, mais il existe un mot-clé then qui peut être utilisé (bien que
    il est presque toujours omis), de sorte que vous pouvez également créer des conditions comme celle-ci :
  if (<expression>) then { <déclaration> ; <déclaration> ;... }
  Outre if et then, vous pouvez également utiliser le mot-clé else pour faire autre chose si l'expression vérifiée est évaluée comme fausse. Ce formulaire " if...then... else... "(si...alors... autrement...)
    ressemble à ceci :
  if (<expression>) { <statement> ; }  else
     { <déclaration> ; }
  Dans ce cas, l'expression sera évaluée, et si elle vaut false, l'instruction après else est exécutée, sinon l'instruction initiale est exécutée (c'est vrai) .
  NOTE : Dans le langage GameMaker, toute valeur inférieure ou égale à 0 sera évaluée comme false, tandis que toute valeur supérieure à 0 sera évaluée comme true.
  C'est une bonne habitude de toujours mettre des parenthèses autour des expressions et des accolades {} autour des déclarations dans le if (sinon seule la première déclaration sera exécutée), et de prendre une nouvelle ligne dans le bloc pour chaque déclaration, par exemple :
  // Cela fonctionnera if <expression> <statement> ;
     // Exemple : if test == true variable = false else variable = true ;
  // Ceci est mieux if (<expression>) {
     <expression>
     }  else
     {
     <déclaration>
     }
    
     // Exemple if (test == true) { variable = false ; }  else
     { variable = true ; }
  Notez que, bien que cela soit légèrement plus verbeux, cela signifie qu'il n'y a pas d'ambiguïté dans le code et qu'il sera compilé correctement sur toutes les plateformes à tout moment. Cependant, l'exemple initial peut ne pas l'être, comme expliqué dans la section de la page Expressions et opérateurs.
  NOTE: Lorsque vous comparez deux valeurs pour voir si elles sont égales, vous devez utiliser l'opérateur "==", et n'utiliser l'opérateur "=" que pour l'affectation. Actuellement, GameMaker 
    les traite comme interchangeables, mais cela peut changer dans le futur et votre code sera plus propre et plus évident lorsque vous utiliserez les opérateurs corrects pour les comparaisons et les assignations.
  Pour donner un bon exemple de l'utilisation de if, considérez le code suivant qui déplacera une instance vers la position x=200 dans la pièce lorsqu'elle est placée dans l'événement Step :
  si (x < 200) {
     x += 4 ; }
     else
     {
     x = 200 ; }
  
  Notez que vous pouvez également effectuer des vérifications composées dans une if, c'est-à-dire vérifier plusieurs valeurs ou expressions dans la même déclaration. Ces vérifications peuvent utiliser les différents opérateurs de combinaison (&& et, || ou,  et ^^ xor). Lorsque vous faites cela, GameMaker Studio 2 évalue chacune d'entre elles une par une, et selon la façon dont elles sont évaluées, le reste peut être ignoré. Par exemple :
  if (keyboard_check_pressed(vk_enter)) && (instance_exists(obj_Player)) {
     go = false ; alarm[0] = room_speed ; }
  
  Ici, nous vérifions en utilisant l'opérateur && "et", donc il vérifie si les deux conditions dans le if s'évaluent à vrai, et si la première est fausse alors la seconde ne sera même pas
    n'est même pas vérifiée. C'est ce que l'on appelle un "court-circuitage" du code. Par conséquent, lorsque vous combinez des expressions à vérifier, vous devez vous assurer que la plus "économique" est toujours la première afin d'éviter d'évaluer les plus coûteuses si la première
    donne la valeur false. Dans la même veine, si une condition peut être évaluée comme true ou false au moment de la compilation, alors la condition entière sera supprimée du code,
    par exemple, disons que vous avez une macro DEBUG_ON pour le débogage et qu'elle peut être soit true soit false - lorsqu'elle est évaluée à false alors le bloc de code suivant sera supprimé du jeu lorsqu'il sera compilé :
  if DEBUG_ON == true { show_debug_message("Instances = " + string(instance_count)) ; }
  Vous pouvez également effectuer des opérations conditionnelles (également connues sous le nom d'opérations ternaires ), qui sont essentiellement un moyen "raccourci" d'effectuer un if de base. La syntaxe est la suivante :
  variable = <condition> ? <énoncé1 (si vrai)> : <énoncé2(si faux)>
  L'opérateur conditionnel "?" renvoie l'une des deux valeurs données selon que l'expression de la condition est vraie ou fausse, par exemple :
  var temp_x = (x < (room_width / 2)) ? 32 : (largeur de la pièce - 32) ;
  Le code ci-dessus vérifiera la valeur de "x" par rapport à la valeur de la moitié de la largeur de la pièce et si elle est inférieure, il définira "temp_x" à 32, sinon "temp_x" sera la largeur de la pièce - 32.
    de la pièce - 32. Voici quelques autres exemples d'utilisation :
  draw_text(x, y, "Les frais sont " + (global.Member ? "$2.00" : "$10.00")) ; path_start(((global.level > 10) ? path_hard : path_easy ;), 2, path_action_reverse, true) ; (--hp <= 0) ? instance_destroy() : score +=
    10 ;
  Il convient également de noter que vous pouvez imbriquer des opérations conditionnelles, mais que si vous le faites, chaque opération devra être placée entre parenthèses, par exemple :
  var c = a ? "foo" : (b ? "bar" : "whee") ; // Correct var c = a ? "foo" : b ? "bar" : "whee" ; // Provoquera une erreur
   
   
   
  
    
      
        Retour : Caractéristiques de la langue
        Suivant : répétition
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

