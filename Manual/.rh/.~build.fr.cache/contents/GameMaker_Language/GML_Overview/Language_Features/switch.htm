switch Dans un certain nombre de situations, vous souhaitez laisser vos instances effectuer différentes actions en fonction d'une valeur particulière. Vous pouvez le faire en utilisant un certain nombre de if / else mais lorsque les choix possibles dépassent deux ou trois, il est généralement plus facile d'utiliser le switch déclaration. UNE switch déclaration a la forme suivante:switch (<expression>)     {
         case <constant1>: <statement1>; ... ; break;     case <constant2>: <statement2>; ... ; break;     ...
         default: <statement>;     }
   Cela fonctionne comme suit: L' expression est d'abord exécutée. Ensuite, il est comparé aux résultats des différentes constantes après chacun des case déclaration s. Lorsque nous disons «constante», nous voulons dire que la valeur dans le cas ne peut pas être une expression variable et doit être une valeur fixe de n'importe quel type de données, comme «combat» ou 3 ou le mot-clé noone. L'exécution continue après le premier case instruction avec la valeur correcte, jusqu'à ce qu'unbreak déclaration est rencontrée. Si aucune instruction case n'a la bonne valeur, alors le default l'instruction sera exécutée (il n'est pas nécessaire d'avoir un default et si aucun n'est fourni, aucune action ne sera entreprise). Un exemple simple d'utilisation d'une instruction switch serait quelque chose comme ceci:switch (global.state)     {     case "alert":         if (instance_exists(obj_Player))             {             if (point_distance(x, y, obj_Player.x, obj_Player.y) < 100)                 {         
    global.state = "chase";                 }             }     break;     case "chase":         var _lost = false;         if (instance_exists(obj_Player))             {             move_towards_point(obj_Player.x,
    obj_Player.y, 2);             if (point_distance(x, y, obj_Player.x, obj_Player.y) > 100)                 {                 _lost = true;                 }             }         else _lost = true;         if (_lost)                {             speed = 0;             global.state = "alert";             }     break;     } Ici, nous avons une variable globale qui contient une valeur de chaîne qui est utilisée pour définir le comportement (état) de l'instance. Dans cet exemple, l'instance bascule simplement entre deux états, mais il est extrêmement facile de l'étendre pour inclure plus d'états en ajoutant plus case instructions pour les chaînes d'état supplémentaires, comme "fight" ou "die", etc... Notez que plusieurs case peuvent être utilisées pour exécuter la même instruction, comme le break n'est pas toujours nécessaire pour chaque case. Si il n'y a pas break déclaration pour un particulier case, l'exécution se poursuit simplement avec le code du cas suivant, par exemple:switch (keyboard_key)     {
         case vk_left:     case ord("A"):         x -= 4;         break;
         case vk_right:     case ord("D"):         x += 4;         break;
         case vk_up:     case ord("W"):         y -= 4;         break;
         case vk_down:     case ord("S"):         y += 4;         break;
         }
   Le code ci-dessus utilise switch pour rechercher un événement de clavier, puis le compare à chaque case listé. S'il répond à l'une des valeurs requises, le code correspondant est exécuté. Notez comment dans le code nous avons utilisé la façon dont switch peut vérifier plusieurs cases et continuer si non break est rencontré pour permettre l'utilisation de différentes clés pour obtenir le même résultat. Notez que chaque case peut avoir son propre code, et ainsi vous pouvez mettre en place une sorte de système "d'héritage" où plus d'un case et son code s'exécutera consécutivement avec le suivant jusqu'à ce qu'une pause soit atteinte en fonction de la valeur de l'initiale switch expression.  Retour: Caractéristiques linguistiques Suivant:break © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

