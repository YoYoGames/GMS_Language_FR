
  
  faire / jusqu'à ce que
  Une fonction do est une autre façon d'itérer sur une ou plusieursdéclarations plusieurs fois, et est en fait une déclaration " do...jusqu'à ".
    vous ne pouvez pas avoir l'une sans l'autre puisque vous demandez à GameMaker Studio 2 de faire quelque chose jusqu'à ce qu'une expression spécifique renvoie la vérité. Elle se présente sous la forme suivante :
  do {
     <déclaration> ;
     <déclaration> ;
     ...
     }
     jusqu'à ce que (<expression>) ;
  L'instruction (qui peut être un bloc de code composé de plusieurs instructions entre accolades {}) est exécutée jusqu'à ce que l'expression soit vraie, et l'instruction initiale est toujours exécutée au moins une fois. Vous trouverez ci-dessous
    ci-dessous un exemple d'utilisation typique de do... until:
  faire {
     x = random(room_width) ; y = random(room_height) ; }
     jusqu'à ce que (place_free(x, y)) ;
  Le code ci-dessus essaie de placer l'objet actuel à une position libre et va définir les variables x/y au moins une fois, puis effectuer autant d'itérationsque nécessaire
    jusqu'à ce que l'expression place_free() renvoie vrai.
  Quand faut-il utiliser une boucle do / until? Elle doit être utilisée chaque fois que vous voulez répéter une ou plusieurs instructions, mais que vous ne savez pas combien de fois elles doivent être répétées et que vous voulez vous assurer que les instructions sont exécutées au moins une fois avant la fin de la boucle.
    s'assurer que les instructions sont exécutées au moins une fois avant la fin de la boucle.
  Vous pouvez également utiliser les break et continue dans vos boucles do. L'utilisation de break 
    quittera immédiatement la boucle et passera à tout code se trouvant dans l'événement ou la fonction après que la boucle ait dû se terminer, par ex :
  var _id = noone ; do
     { _id = list[| 0] ; if instance_exists(_id) { _break ; }  ds_list_delete(list, 0) ; }  until (ds_list_empty(list)) ; target = _id ;
  Dans le code ci-dessus, nous créons une variable locale et la définissons comme contenant le mot clé noone. Nous exécutons ensuite une boucle do / until en vérifiant la première position d'une liste DS pour voir si elle contient un ID d'instance valide.
    Si c'est le cas, nous envoyons la boucle à break, sinon la valeur de la position de la liste est supprimée. Une fois la boucle terminée (soit par break, soit parce que la liste est vide), la valeur de la variable locale est alors affectée à l'ID d'instance.
    locale est alors affectée à la variable d'instance target.
  Voici un exemple d'utilisation de continue dans une boucle do / until:
  do {
     var _x = random(room_width) ; var _y = random(room_height) ; if (instance_position(_x, y, obj_Enemy) {
     continue ;
     }
     instance_create_layer(_x, _y, "Instances", obj_Enemy) ; }
     jusqu'à ce que (instance_count(obj_Enemy) >= 10) ;
  Ce code génère une position de pièce aléatoire puis vérifie si une instance de l'objet obj_Enemy existe à cette position. Si c'est le cas, l'itération actuelle de la boucle se termine en utilisant continue et une nouvelle itération est lancée.
    une nouvelle itération est lancée. Si ce n'est pas le cas, une instance de l'objet obj_Enemy est créée à la position aléatoire. La boucle ne se termine que lorsqu'il y a 10 instances ou plus de l'objet dans la pièce.
  Une dernière remarque : faites attention à vos boucles do, car vous pouvez facilement les faire tourner en boucle à l'infini, auquel cas votre jeu se bloquera et ne réagira plus à aucune entrée de l'utilisateur, qui devra le fermer de force.
  Pour d'autres exemples de mots-clés de boucle, veuillez consulter les sections sur les éléments suivants repeat, while, et pour.
   
   
   
  
    
      
        Retour : Caractéristiques de la langue
        Suivant : pour
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

