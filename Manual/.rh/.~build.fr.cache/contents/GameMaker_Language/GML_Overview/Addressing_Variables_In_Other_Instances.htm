
  
  Adressage des variables dans d'autres instances
  Dans les sections consacrées aux variables, vous avez découvert comment créer et utiliser des variables au sein d'une seule instance, ou sur une portée globale, mais que se passe-t-il si vous voulez qu'une instance accède à une variable dans une autre,
    instance différente ? Il y a de nombreux cas où vous pouvez vouloir faire cela, par exemple lors d'une collision avec un objet balle, vous pouvez vouloir connaître les dégâts causés par la balle en accédant à une variable dans la balle, ou vous pouvez vouloir arrêter le mouvement de toutes les balles dans un puzzle, en accédant à une variable dans l'objet balle.
    de toutes les balles d'un puzzle, ou encore déplacer le personnage principal vers une position particulière, ou toute autre situation que l'on rencontre habituellement dans un jeu. Heureusement, le langage GameMaker est équipé de mécanismes permettant d'atteindre ces objectifs.
    cela.
  L'une des méthodes les plus courantes pour accéder à une variable ou la modifier dans une autre instance consiste à utiliser son nom d'objet comme identifiant, puis à utiliser un point "." pour indiquer à GameMaker Studio 2 que la variable utilisée après
    doit être affectée ou modifiée dans cet objet. La syntaxe utilisée est la suivante
  <identification de l'objet>.< variable>= <valeur>; 
  En pratique, cela ressemblerait à ceci :
  obj_ball.speed = 0 ;
  Avec le code ci-dessus, vous définissez la vitesse d'une instance de " obj_ball". Cependant, si vous avez plus d'une instance de l'objet donné dans la pièce, le code s'appliquera à TOUTES les instances de la même manière, sauf si vous utilisez HTML5,
    dans ce cas, elle n'en affectera qu'une seule, mais vous n'avez aucun moyen de savoir laquelle. Donc, si vous avez besoin d'accéder à toutes les instances d'un objet, vous devez utiliser la commande avec()car il est
    100% compatible avec les autres plates-formes. En général, ce format ne doit être utilisé que lorsque vous n'avez qu'une seule instance de l'objet dans la pièce, ou (comme vous le verrez dans la partie suivante) lorsque vous avez un  ID d'instance spécifique.
  Vous pouvez également accéder à une instance unique d'un objet lorsqu'il existe plusieurs instances dans la pièce en utilisant le nom d'instance unique pour indiquer à GameMaker Studio 2 exactement à quelle instance nous souhaitons nous adresser. La constante du nom d'instance est la
    constante d'identification unique qui est attribuée à chaque instance ajoutée à une room de votre jeu. Vous pouvez trouver cette constante en double-cliquant sur une instance dans l'éditeur de salle:
  Notez que vous pouvez modifier ce nom et lui donner un nom plus descriptif - bien que ce nom doive être unique pour l'ensemble du jeu.
    unique pour l'ensemble du jeu - et il peut être utilisé comme côté gauche du point :
  inst_4DB70D2.speed = 0 ;
  Toutefois, la méthode de loin la plus courante et la plus pratique consiste à utiliser une variable à gauche du point, pour autant que la variable en question ait enregistré un identifiant d'instance valide. Les exemples suivants illustrent cette méthode.
  // Exemple 1 var _inst = instance_position(mouse_x, mouse_y, all) ; if instance_exists(_inst) {
     _inst.speed = 0 ; }
    
     // Exemple 2 var _inst = instance_create_layer(mouse_x, mouse_y, "Enemies", obj_E_Parent) ; _inst.direction = point_direction(_inst.x, _inst.y, x, y) ; _inst.target = id ;
  Dans le code de l'exemple 1 ci-dessus, il y a un appel à la fonction instance_exists() dans le bloc de code. Ceci est dû au fait que l'utilisation de la méthode point pour accéder ou changer la valeur d'une autre instance
    donnera une erreur et fera planter le jeu si l'instance n'existe pas, et il est possible que ce soit le cas dans cet exemple. Nous n'avons pas besoin de cette vérification dans les exemples 2 et 3, car nous savons que l'instance est là
    puisque dans l'exemple 2 nous l'avons créée, et dans l'exemple 3, c'est l'autre instance dans un événement de collision. Cependant, s'il existe une possibilité que l'instance soit détruite, désactivée ou retirée de la room pendant l'utilisation de cette méthode,
    vous devriez toujours vérifier au préalable en utilisant la fonction instance_exists() ou la fonction numéro_instance() fonction.
  Notez que vous ne pouvez pas utiliser le mot-clé spécial " all " avec cette méthode pour cibler toutes les instances (par exemple : all.val = 10 donnerait une erreur), mais vous pouvez utiliser les mots-clés
    "other" et"self" sans problème. Par exemple, l'utilisation de other dans un événement de collision:
  // Exemple 3 other.hp -= 10 ; if other.hp <= 0 {
     other.sprite_index = spr_E_Dead ; }
  
  Il est également important de noter que vous ne pouvez pas utiliser une fonction seule comme partie gauche d'une affectation. Par exemple, le code suivant vous donnerait une erreur :
  instance_nearest(x, y, obj).speed = 0 ;
  La valeur de retour de l'expression dans cet exemple de code est un nombre entier (la valeur d'identification unique de l'instance la plus proche) et elle doit donc être placée entre parenthèses () pour être utilisée de cette manière et adresser correctement l'instance
    nécessaire. Le code ci-dessus serait correctement écrit comme suit
  (instance_nearest(x, y, obj)).speed = 0 ;
     //or
    
     var inst = instance_nearest(x, y, obj) ; inst.speed = 0 ;
  Toutes ces méthodes sont parfaitement valables pour lire, modifier et définir des variables dans d'autres instances, et fonctionnent parce que le point est en fait un opérateur. Il prend une valeur comme opérande gauche et une variable comme opérande droit, et renvoie l'adresse de cette variable particulière dans l'objet ou l'instance indiqué. Tous les noms d'objets, les constantes, les ID, etc... représentent simplement des valeurs et celles-ci peuvent être traitées comme n'importe quelle autre valeur.
  L'autre moyen de référencer des variables dans une autre instance est d'utiliser la fonction du langage GameMaker with(), qui est présentée en détail ici:
  // Ceci affectera toutes les instances de l'objet "obj_Enemy" with (obj_Enemy) { target = other.parent ; } 
     // Ceci affectera une instance de l'objet "obj_Enemy" var _enemy = instance_nearest(x, y, obj_Enemy) ; if instance_exists(_enemy) { with (_enemy) { target_x = mouse_x ; target.y = mouse_y ; }  }
   
   
   
  
    
      
        Retour : Aperçu duGML
        Suivant : Ordre d'évaluation
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

