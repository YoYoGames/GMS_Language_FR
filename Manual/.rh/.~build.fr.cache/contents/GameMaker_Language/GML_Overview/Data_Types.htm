 Types de données Dans les sections précédentes, nous avons couvert les variables et leurs règles de portée, mais peu de choses ont été dites sur les différents types de données qu'une variable peut stocker. Par conséquent, cette section explique les différents types et à quoi ils peuvent être utilisés. Avant de continuer, expliquons brièvement ce que nous entendons par «types de données». Lorsque vous créez une variable, elle peut être utilisée pour contenir des informations et lorsque vous appelez une fonction, elle peut également stocker les informations renvoyées. Cependant, ces informations peuvent être de différentes "saveurs" - par exemple, il peut s'agir d'un nombre réel ou d'une chaîne de caractères. Ces différents types de valeurs utilisés sont appelés types de données et lors de l'utilisation du GameMaker Language ils peuvent être l'un des suivants: Cordes Une chaîne est simplement n'importe quel texte placé entre guillemets "...". Vous pouvez effectuer certaines opérations sur des chaînes, comme ajouter deux chaînes ensemble pour créer une chaîne plus longue (concaténation) et vous pouvez également modifier les propriétés de la chaîne et même en extraire des nombres réels. Pour plus d'informations sur les chaînes et les fonctions de chaîne, voir: GML - Chaînes. Nombres réels Les nombres réels sont toute valeur qui n'est pas une chaîne, ni aucun des autres types de données possibles. Donc, 124, 45639.566546456, 0, -45.5 etc... sont tous des exemples de nombres réels. Tous les nombres réels sont stockés sous forme de valeurs à virgule flottante double précision ou de valeurs entières (soit des entiers 32 bits - int32 - ou entiers 64 bits - int64 ), et le compilateur optimisera si possible (par exemple, 0.0 sera optimisé à la valeur entière de 0). Lorsque vous traitez avec une valeur qui n'est pas un entier, vous pouvez rencontrer de légères erreurs d'arrondi en raison de la nature des calculs en virgule flottante. Pour plus d'informations à ce sujet et sur d'autres fonctions liées aux nombres, veuillez consulter: GML - Fonctions numériques. REMARQUE: sur la cible HTML5, tous les nombres réels sont des doubles. Notez que si les variables créées dans GameMaker Studio 2 sont toutes stockées sous forme de nombres à virgule flottante double précision ou d'entiers, vous pouvez toujours utiliser d'autres formats lorsque vous traitez avec des extensions. Ceux-ci peuvent être transmis à GameMaker Studio 2 partir d'une extension, puis vérifiés à l'aide des is_*() fonction, dont une liste peut être trouvée ici. Tableaux Un tableau est un type de données spécial qui peut être utilisé pour contenir plusieurs valeurs. Vous affectez le tableau à une variable, puis «remplissez» différents indices du tableau avec des valeurs. Ce tableau peut ensuite être transmis aux scripts et aux fonctions sur une base de référence, mais si vous modifiez le tableau passé, il deviendra alors une copie du tableau d'origine et devra donc être renvoyé à la variable d'origine. pour le tableau à mettre à jour. Pour plus d'informations sur les tableaux, veuillez consulter: Présentation de GML - Tableaux. Structs Une structure (parfois appelée «objet léger») est une structure de données brutes qui agit comme un conteneur pour les variables de tous les types de données. Vous affectez une structure à une variable et dans la structure, vous pouvez ensuite définir d'autres variables et celles-ci peuvent ensuite être lues ou écrites selon les besoins. Pour plus d'informations sur les structures, veuillez consulter la section Présentation de GML - Structs. Variables de méthode Une variable de méthode est une variable à laquelle une fonction a été attribuée et elle peut être utilisée exactement de la même manière que vous utiliseriez une fonction d' runtime GML Pour plus d'informations, veuillez consulter la section Variables de méthode. Valeurs hexadécimales GameMaker Studio 2 peut accepter des littéraux hexadécimaux comme valeurs légitimes. Les valeurs hexadécimales sont particulièrement courantes lorsque vous travaillez avec des couleurs, mais peuvent être utilisées partout où une valeur entière positive est requise. Notez que les valeurs hexadécimales peuvent être formatées de l'une des deux manières suivantes, où <abcd> serait la valeur hexadécimale réelle:$<abcd> 0x<
      abcd> Par exemple, les valeurs suivantes peuvent être exprimées en hexadécimal, comme indiqué:11406 = $2c8e = 0x2c8e 16777215 = $ffffff = 0xffffff Booléen Un booléen est simplement une valeur qui peut être soit true ou false. Notez qu'actuellement, GameMaker Studio 2 interprétera un nombre réel égal ou inférieur à 0,5 comme un false valeur, et tout nombre réel supérieur à 0,5 comme étant true. Cela ne signifie pas cependant que vous devriez vérifier 1 et 0 (ou tout autre nombre réel) pour vrai et faux, car les constantes vous sont également fournies true et false qui doit toujours être utilisé dans votre code pour éviter tout problème si de vrais types de données booléens sont ajoutés dans une future mise à jour. Vous pouvez convertir n'importe quel nombre réel en une valeur implicitement booléenne à l'aide de la fonction suivante: bool Aiguille Un pointeur est un type de données qui "pointe" vers un emplacement mémoire. Vous ne pouvez pas effectuer d'opérations sur un pointeur et il n'est utilisé que pour certaines fonctions très spécifiques, comme obtenir une texture ou une adresse de tampon à partir de la mémoire pour une autre fonction. Pour des exemples de fonctions qui renvoient un pointeur, vous pouvez voir buffer_get_address() ou sprite_get_texture(). Il existe également une fonction pour vérifier si une valeur est un pointeur (voir " Vérification des types de données ", ci-dessous) et une fonction pour convertir une valeur en pointeur:ptr Vous pouvez également utiliser (et obtenir renvoyé) les constantes intégrées suivantes lorsque vous utilisez des pointeurs: Constant Descriptionpointer_null Cette constante indique que le pointeur ne pointe vers rien de significatif (le même que NULL en C ++ ou null en C #)pointer_invalid Cette constante signifie simplement que la valeur n'est pas un pointeur valide Enum Une énumération est un «énumérateur» et vous permet essentiellement de créer votre propre type de données limité avec une liste de valeurs constantes. Les énumérations sont expliquées en détail sur la page des constantes. Indéfini Une valeur non définie (également appelée valeur «nulle») est une valeur dans laquelle une expression n'a pas de valeur correcte, bien qu'elle soit syntaxiquement correcte, et doit donc renvoyer quelque chose. Par exemple, disons que vous avez une carte DS et que vous utilisez la fonction ds_map_find_value(). Maintenant, que se passe-t-il lorsque la carte n'a pas la valeur recherchée? Eh bien, puisque la fonction est correctement formatée et que le problème est que cette valeur n'existe pas, elle renverrait la constante undefined, et vous pouvez vérifier cette constante comme vous le feriez true ou toute autre valeur. NaN NaNsignifie "pas un nombre", et est une constante qui peut être retournée lorsque le compilateur ne peut pas évaluer les résultats d'une opération sous forme de nombre. Par exemple, 0/0 ne peut pas être défini comme un nombre réel, et est donc représenté par NaN, ou la racine carrée d'un nombre négatif - qui est considéré comme un nombre "imaginaire" - ne peut pas être représentée comme un nombre réel, et est donc représentée par NaN. Infini La constante infinity fait référence à un nombre considéré comme infini, tel que le résultat que vous obtiendriez en divisant une valeur à virgule flottante par zéro, par exemple: 1.0 / 0. Vous pouvez vérifier le type de données de n'importe quelle variable à l'aide des fonctions répertoriées sur la page suivante: Fonctions variables Vous pouvez également trouver des tableaux de types arithmétiques qui affichent les résultats de différentes opérations utilisant des types de données variables mixtes ici: Tables de types  Retour: Présentation de GML Suivant: Mots clés d'instance © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

