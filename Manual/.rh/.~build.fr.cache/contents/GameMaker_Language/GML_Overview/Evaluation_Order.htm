
  
  Ordre d'évaluation
  Lorsque vous programmez votre jeu à l'aide du langage GameMaker, vous devez savoir que les arguments des appels de fonction ne sont pas garantis dans un ordre d'évaluation. Cela signifie que l'ordre dans lequel les fonctions placées dans votre code seront exécutées changera
    d'une plate-forme à l'autre. Vous devez donc les coder de manière explicite. Cela est dû aux différences d'optimisation entre les différentes plates-formes cibles. Par exemple, sur la cible Windows, les arguments de fonction peuvent être évalués de droite à gauche, mais
    sur la cible HTML5, ils peuvent être évalués de gauche à droite. Pour éviter tout problème, il est donc préférable de ne pas appeler plusieurs fonctions dans les arguments d'un appel de fonction unique, car vous risquez de vous fier à l'ordre d'évaluation.
  Pour voir un exemple de ce que cela signifie, considérez le code suivant qui a une fonction de script "buffer_get_info" qui appelle plusieurs fonctions d'exécution et les utilise comme arguments :
  buffer_seek(buff, buffer_seek_start, 0) ; buffer_get_info(buffer_read(buff, buffer_s8), buffer_read(buff, buffer_s16),buffer_read(buff, buffer_s16)) ;
  Maintenant, le problème ici est que sur certaines plateformes, le dernier buffer_read() sera appelé en premier, et donc tous les arguments du script seront erronés car les données sont lues à partir du tampon dans l'ordre "inverse" de ce que vous percevez.
    que vous le percevriez. Cela a pour effet d'affecter toutes les valeurs ultérieures de la fonction buffer_read() et tous les arguments passés à cette fonction de script seront donc erronés !
  Pour contourner ce problème, vous devez appeler explicitement les fonctions dans l'ordre requis et stocker les valeurs renvoyées dans des variables, comme ceci :
  var val[0] = buffer_read(buff, buffer_s8) ; var val[1] = buffer_read(buff, buffer_s16) ; var val[2] = buffer_read(buff, buffer_s16) ; buffer_get_info(val[0], val[1], val[2]) ;
  Bien que cette méthode puisse sembler plus verbeuse, elle permet de garder les choses claires et d'éviter tout problème éventuel concernant l'ordre d'évaluation.
  Vous devez également faire attention lorsque vous utilisez desexpressions, car l'ordre dans lequel elles sont évaluées change en fonction de la cible vers laquelle vous compilez.
    Ainsi, lorsque vous utilisez des expressions dans votre code, assurez-vous d'utiliser des parenthèses () pour contrôler correctement l'ordre des opérations. Ceci est très important pour garantir le comportement correct de vos jeux sur toutes les plates-formes cibles.
    et est essentiel pour la plate-forme HTML5. La page sur les expressions explique cela plus en détail.
   
   
   
  
    
      
        Retour : Aperçu duGML
        Suivant : Expressions et opérateurs
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

