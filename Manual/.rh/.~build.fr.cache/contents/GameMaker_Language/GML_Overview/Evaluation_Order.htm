 Ordre d'évaluation Lorsque vous programmez votre jeu en utilisant le GameMaker Language vous devez savoir que les arguments d'appel de fonction ne sont pas garantis comme ordre d'évaluation. Cela signifie que l'ordre dans lequel les fonctions placées dans votre code sont exécutées changera d'une plateforme à l'autre, vous devez donc les coder de manière explicite. Cela est dû aux différences d'optimisation entre les différentes plates-formes cibles, par exemple sur la Windows les arguments peuvent être évalués de droite à gauche, mais sur la cible HTML5, ils peuvent être évalués de gauche à droite. Donc, pour éviter tout problème, il est préférable de ne pas appeler plusieurs fonctions dans les arguments d'un seul appel de fonction, car vous pourriez bien vous appuyer sur l'ordre d'évaluation. Pour voir un exemple de ce que cela signifie, considérez le code suivant qui a une fonction de script "buffer_get_info "qui appelle plusieurs fonctions d' runtime et les utilise comme arguments:buffer_seek(buff, buffer_seek_start, 0); buffer_get_info(buffer_read(buff, buffer_s8), buffer_read(buff, buffer_s16),buffer_read(buff, buffer_s16)); Maintenant, le problème ici est que sur certaines plates-formes, le dernier buffer_read() sera appelé en premier, et donc tous les arguments du script seront faux car les données sont lues à partir du tampon dans l'ordre "inverse" tel que vous le percevriez. Ceci a ici pour effet d'affecter toutes les autres valeurs pour le buffer_read() fonction donc tous les arguments passés à cette fonction de script seront faux! Pour contourner cela, vous devez appeler explicitement les fonctions dans l'ordre requis et stocker les valeurs renvoyées dans des variables, comme ceci:var val[0] = buffer_read(buff, buffer_s8); var val[1] = buffer_read(buff, buffer_s16); var val[2] = buffer_read(buff, buffer_s16); buffer_get_info(val[0], val[1], val[2]); Bien que cela puisse sembler une méthode plus verbeuse, elle garde tout clair et évite tout problème éventuel avec l'ordre d'évaluation. Vous devez également faire attention lorsque vous utilisez les expressions s, car l'ordre dans lequel elles sont évaluées changera en fonction de la cible vers laquelle vous compilez. Ainsi, lorsque vous utilisez des expressions dans votre code, assurez-vous d'utiliser des crochets () pour bien contrôler l'ordre des opérations. Ceci est très important pour assurer le bon comportement de vos jeux sur toutes les plates-formes de jeux cibles et est essentiel pour la plate-forme HTML5. La page sur les expressions explique cela plus en détail.  Retour: Présentation de GML Suivant: Expressions et opérateurs © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

