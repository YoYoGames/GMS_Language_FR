
  
  Variables locales
  Une variable locale est une variable que nous créons uniquement pour un événement ou une fonction spécifique et que nous abandonnons une fois l'événement ou la fonction terminé. Si elle est créée dans une fonction personnalisée, alors la variable locale
    n'est disponible que pour la fonction et est ensuite supprimée lorsque la fonction est terminée. Pourquoi en avons-nous besoin ? Les variables occupent de l'espace en mémoire et il se peut que nous ne les utilisions que pour une seule opération ou fonction.
    dans ce cas, nous n'avons besoin de les avoir en mémoire que pendant le court laps de temps où elles sont utilisées. Cela permet de garder votre base de code propre et ordonnée, et d'optimiser l'espace mémoire pour les choses qui en ont vraiment besoin. Pour déclarer une variable locale, nous utilisons l'opérateur var.
    comme ceci :
  var _i, _num, _str ; _i = 0 ; _num = 24.5 ; _str = "Hello World" ;
     // ou
     var _i = 0, _num = 24.5, _str = "Hello World" ;
     // ou
     var _i = 0 ; var _num = 24.5 ; var _str = "Hello World" ;
  Toutes les variables créées de cette manière seront "oubliées" (c'est-à-dire retirées de la mémoire) à la fin de l'événement (ou de la fonction) dans lequel elles ont été créées. Vous devez faire attention à ce que le nom que vous donnez à toutes les variables déclarées ne coïncide pas avec une autre variable d'instance dans l'objet qui exécute le code.
    ne coïncide pas avec une autre variable d'instance au sein de l'objet qui exécute le code, et assurez-vous également que vous n'avez pas l'intention d'utiliser la valeur stockée dans cette variable en dehors de l'événement ou de la fonction dans laquelle vous la déclarez (dans les exemples ci-dessus, toutes les variables déclarées var ont été définies avec un nom d'instance).
    Dans les exemples ci-dessus, toutes les variables déclarées var ont été définies avec le trait de soulignement "_" précédant le nom de la variable, mais cela n'est pas obligatoire et est fait simplement pour rendre plus évident dans le code que nous avons affaire à une variable locale). Cela dit,
    si vous vous trouvez dans une situation où vous pensez qu'une variable locale doit être la même qu'une variable d'instance, vous pouvez utiliser le mot-clé self pour identifier la variable d'instance comme étant distincte, par exemple: : .
    comme étant distincte, par exemple :
  var hp = 10 ; with (obj_Enemy) {
     self.hp -= hp ; }
  
  Les variables locales sont très utilisées dans les programmes, notamment dans les boucles pour compter les itérations, ou lorsqu'une valeur est utilisée plusieurs fois dans une opération qui ne sera pas répétée.
    qui ne sera pas répétée. Voici quelques autres exemples :
  var _i = 0 ; repeat (10) {
     inventaire[_i] = 0 ; _i += 1 ; }
  
  Le code ci-dessus crée une variable locale appelée "_i" et lui attribue la valeur 0, le tout dans la même ligne. Notez que dans les versions précédentes de GameMaker vous deviez d'abord déclarer vos variables locales, puis leur attribuer une valeur.
    Dans cette version, vous pouvez les déclarer et leur attribuer une valeur en même temps. Le code ci-dessus utilise ensuite cette variable pour initialiser un tableau. Comme la variable "_i"
    ne sera pas utilisée pour d'autres fonctions dans l'instance, elle peut avoir une portée locale. Voici un autre exemple :
  var _x, _y ; _x = x - 32 + irandom(64) ; _y = y - 32 + irandom(64) ; instance_create_layer(_x, _y, "Effects", obj_blood) ;
  Ici, nous avons utilisé les variables locales "_x" et "_y" pour stocker des coordonnées aléatoires que nous utilisons ensuite pour créer une instance. Dans cet exemple, vous pouvez voir qu'il n'est pas strictement nécessaire d'utiliser ces variables.
    nécessaire d'utiliser ces variables, mais pour des raisons de lisibilité et de facilité d'utilisation, nous le faisons. Ce que nous faisons ici est BEAUCOUP plus clair et évident que si nous utilisions ce code :
  instance_create_layer(x - 32 + irandom(64), y - 32 + irandom(64), "Effects", obj_guts) ;
  Une autre chose à propos des variables locales déclarées var doit être notée... Puisqu'elles sont uniques à l'événement ou à la fonction qui les exécute, elles peuvent être utilisées dans n'importe quelle autre instance du code également ! Cela signifie que nous pouvons utiliser ces variables pour définir et modifier des choses dans d'autres instances en utilisant la fonction "  ".
    et changer des choses dans d'autres instances en utilisant la construction "with()" (voir la section sur la portée des variables pour plus d' informations). Le code réel lui-même ressemblerait à quelque chose
    comme ceci :
  var num = instance_number(obj_Enemy) ; with (obj_Enemy) {
     if num>10 instance_destroy() ; }
  
  Le code ci-dessus fonctionne parce que la variable déclarée var est locale à l'événement (ou à la fonction) dans lequel elle est contenue, pas à l'instance, ni au monde du jeu, et peut donc être utilisée dans n'importe quelle fonction de n'importe quel objet tant qu'elle se trouve dans le même bloc de code.
   
   
   
  
    
      
        Retour : Variables et champ d'application des variables
        Suivant : Variables d'instance
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

