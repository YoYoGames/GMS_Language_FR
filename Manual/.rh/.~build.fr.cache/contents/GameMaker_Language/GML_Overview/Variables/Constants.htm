
  
  Constantes
  Une constante est un type de variable qui est définie une fois au début du jeu et qui ne change jamais. En fait, les valeurs constantes ne peuvent pas être modifiées après avoir été déclarées. Cela les rend idéales pour contenir des valeurs qui sont utilisées tout au long du jeu pour identifier des données spéciales.
    jeu pour identifier des données spéciales.
  Dans le langage GameMaker, il existe deux types de constantes définies par l'utilisateur : les macros et les enums, qui sont tous deux expliqués ci-dessous. Notez également que toute valeur qui est toujours la même est considérée comme une constante, quel que soit le type de données.
   type de données, par exemple, une chaîne de caractères ou le nombre 3.
  REMARQUE: le langage GameMaker possède également un certain nombre de valeurs constantes intégrées qui sont utilisées pour identifier des éléments spécifiques. Elles sont décrites dans les pages appropriées pour les fonctions d'exécution qui les requièrent dans la section RéférenceGML.
   
  Macros
  Bien qu'il ne s'agisse pas exactement de variables, les macros leur ressemblent dans leur utilisation, c'est-à-dire qu'il s'agit de valeurs nommées que vous pouvez utiliser dans votre code pour remplacer les valeurs codées en dur. Fondamentalement, une macro
    est une variable nommée qui contient une valeur unique constante de n'importe quel type de données. Vous pouvez définir vos propres macros à l'aide de l'éditeur de script, puis les utiliser dans votre code et dans DnD™comme s'il s'agissait de variables ordinaires.
    étaient des variables ordinaires, à la seule différence qu'elles ne peuvent pas être modifiées dans le jeu.
  La structure syntaxique d'une macro est la suivante :
  #macro <variable> <valeur> 
  Par exemple, disons que vous définissez la macro suivante "total_weapons" (notez le "#" qui précède et l'absence de deux points ";" à la fin) :
  #macro total_weapons 10
  Vous l'appellerez alors dans votre code comme ceci :
  if ++pos == total_weapons {
     pos = 0 ; }
  
  Notez que vous ne pourrez pas modifier la valeur de la constante, donc un code comme celui-ci fera planter le jeu :
  total_armes = 11 ;
  Vous pouvez définir une macro n'importe où dans votre code ou dans un script et elle sera précompilée et incluse dans votre jeu comme si elle était là depuis le début, mais nous vous recommandons de créer un actif script dédié et d'y définir toutes vos macros.
    Ce sera plus facile à organiser et à déboguer par la suite !
  Si vous avez besoin que la valeur d'une macro change au moment de l'exécution, vous devriez probablement en faire une variable globale, puisque celles-ci peuvent être modifiées à partir du code pendant le jeu, à moins que vous ne définissiez la macro comme une temps d'exécution    fonction. En définissant la macro comme une fonction, cela signifie que cette fonction sera appelée chaque fois que vous utiliserez la macro. Par exemple :
  #macro col make_colour_hsv(irandom(255), 255, 255)
  Vous appelleriez alors cette macro de la manière suivante :
  image_blend = col ;
  En utilisant ce code, l'image se fondra dans une couleur différente à chaque fois que la macro sera utilisée. Il convient de noter que vous pouvez également répartir les macros sur plusieurs lignes en utilisant le caractère \ pour indiquer où se trouve le saut de ligne.
    Un exemple serait quelque chose comme :
  #macro hello show_debug_message("Hello" + \ string(player_name) + \ ", how are you today ?") ;
  Il s'agit d'une mesure purement cosmétique, dans la mesure où la division d'une macro de cette manière n'aura aucun effet sur le résultat de la macro finale lorsqu'elle sera utilisée, et vise simplement à fournir un support pour le texte multi-lignes sur les macros qui ont des lignes de code plus longues.
  Une caractéristique très importante des macros est qu'elles peuvent être définies pour être utilisées avec des configurations spécifiques (configs), ce qui signifie que vous pouvez avoir le même nom de macro mais lui donner des valeurs différentes en fonction de la configuration actuellement sélectionnée.
    configuration sélectionnée. Par exemple, si vous disposez d'une configuration pour les publicités Android et d'une autre pour les publicités iOS, vous pouvez définir une seule macro pour contenir la valeur d'identification de l'application requise :
  #macro ad_id "" ; #macro Android:ad_id "com.yoyogames.googlegame" #macro iOS:ad_id "com.yoyogames.appstoregame"
  Comme vous pouvez le voir, vous donnez d'abord le nom de la configuration, puis deux points : et enfin le nom et la valeur de la macro. Notez qu'il ne peut y avoir d'espace entre les deux points : et le nom de la configuration ou le nom de la macro.
    sinon vous obtiendrez une erreur.
   
  Enums
  Un enum est un "énumérateur", et il vous permet essentiellement de créer votre propre type de données limité avec une liste de valeurs constantes, et ils ont la structure suivante :
  enum <variable> 
    {
        <constant> [= <valeur> ],
        <constante> [= <valeur> ], // etc... }
  Dans l'exemple suivant, nous créons un enum pour les couleurs de l'arc-en-ciel et lui attribuons diverses constantes et valeurs par défaut :
  enum rainbowcolours { red, orange, yellow, green, blue, indigo, violet }
  Les entrées de l'enum ne peuvent être que des nombres entiers ou des expressions avec des enums précédents qui évaluent à un nombre entier, et par défaut sont numérotées de 0 vers le haut.
    par défaut, à partir de 0. Ainsi, dans notre exemple, la valeur par défaut serait rouge = 0, orange = 1, jaune = 2, etc...
  Vous pouvez également attribuer des valeurs aux variables de l'enum au moment de la création :
  enum enum_test { val = 10 ; } 
     enum rainbowcolours { red = 5, orange = 5 * 2, yellow = 15, green = 20, blue = 25, indigo = 30, violet = 35 * enum_test.val }
  Remarquez que dans l'exemple ci-dessus, nous utilisons une autre énumération pour créer une expression pour "violet". Cela ne fonctionne que si l'énumération référencée a été créée avant l' énumération qui l'utilise dans une expression, mais cela ne fonctionnera pas pour les variables ou les fonctions.
    fonctions, puisque la valeur de l'enum doit pouvoir être évaluée comme une constante lors de la compilation du projet. Notez également que toutes les valeurs d'énumération sont évaluées comme des valeurs entières.
    vous devez être conscient que seules les valeurs entières sont autorisées pour que les enums fonctionnent. Cette valeur peut être n'importe quel nombre entier qu'un nombre à virgule flottante en double précision peut représenter, y compris les valeurs négatives.
  Pour accéder ultérieurement à la valeur d'un type d'énumération donné, vous pouvez utiliser la  méthode du point ".", comme ceci :
  variable = <nom_de_l'enum>.< enum_variable>;
  À titre d'exemple, utilisons l'enum "rainbowcolours" que nous avons créé dans le code ci-dessus :
  valeur_couleur = rainbowcolours.green * rainbowcolours.red ;
  La variable colour_value contient maintenant la valeur 100 (20 * 5).
  Notez que vous ne pouvez pas modifier les valeurs d'une constante enum après sa création, de la même manière que vous ne pouvez pas modifier les macros après leur création.
  NOTE: Les valeurs des Enum sont stockées sous forme d'int64, donc l'exécution is_real() sur elles retournera false.
   
  Constantes intégrées
  Le tableau suivant présente une liste des constantes intégrées qui peuvent être retournées par certaines fonctions et opérations dans vos projets :
   
  
    
      
        Constant
        Description
      
      
        pointer_null
        Cette constante indique que le pointeur ne pointe vers rien de significatif (de la même manière que NULL en C++ ou null en C#)
      
      
        pointer_invalid
        Cette constante signifie simplement que la valeur n'est pas un pointeur valide.
      
      
        undefined
        Cette constante est renvoyée lorsqu'une fonction doit renvoyer quelque chose mais n'a pas de valeur appropriée ou "correcte" à renvoyer.
      
      
        NaN
        Cette constante peut être renvoyée lorsque le compilateur ne peut pas évaluer les résultats d'une opération comme un nombre - par exemple, 0 / 0 ne peut pas être défini comme un nombre réel, et est donc représenté par NaN
      
      
        infinity
        Cette constante fait référence à un nombre considéré comme infini, tel que le résultat que vous obtiendriez en divisant une valeur à virgule flottante par zéro, par exemple : 1,0/0.
      
      
        true
        Cette constante représente la valeur 1, ce que GameMaker Studio évaluera comme un booléen "vrai" (notez que toute valeur égale ou supérieure à 1 sera évaluée comme true).
      
      
        false
        Cette constante représente la valeur 0, qui sera évaluée par GameMaker Studio comme un booléen "false" (notez que toute valeur inférieure ou égale à 0 sera évaluée comme false).
      
      
        pi
        Cette constante représente la valeur de pi : 3,141592653589793280 etc... bien que la valeur exacte dépende de divers facteurs comme le système d'exploitation ou la plate-forme visée.
      
    
  
   
   
   
   
  
    
      
        Retour : Variables et champ d'application des variables
        Suivant : Variables locales
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

