 Constantes Une constante est un type de variable qui est défini une fois au début du jeu et qui ne change jamais. En fait, les valeurs constantes ne peuvent pas être modifiées après avoir été déclarées. Cela les rend idéales pour conserver les valeurs utilisées tout au long du jeu pour identifier des données spéciales. Dans le GameMaker Language il existe deux types de constantes définies par l'utilisateur: les macros et les énumérations, qui sont toutes deux expliquées ci-dessous. Notez également que toute valeur qui est toujours la même est classée comme constante, quel que soit le type de données, par exemple, une chaîne ou le nombre 3. REMARQUE: Le GameMaker Language possède également un certain nombre de valeurs constantes intégrées qui sont utilisées pour identifier des éléments spécifiques. Celles-ci sont décrites sur les pages appropriées pour les runtime qui en ont besoin dans la section Référence GML Macros Bien qu'elles ne soient pas exactement des variables, les macros leur sont similaires dans la façon dont elles sont utilisées, c'est-à-dire: ce sont des valeurs nommées que vous pouvez utiliser tout au long de votre code pour remplacer les valeurs codées en dur. Fondamentalement, une macro est une variable nommée qui contient une valeur unique constante de n'importe quel type de données. Vous pouvez définir vos propres macros à l'aide de l' éditeur de script, puis les utiliser dans votre code et DnD™ comme s'il s'agissait de variables régulières, la seule différence étant qu'elles ne peuvent pas être modifiées dans le jeu. La structure syntaxique d'une macro est la suivante:#macro <variable> <value> Par exemple, disons que vous définissez la macro suivante "total_weapons "(notez ce qui précède"# "et l'absence de deux points"; " à la fin):#macro total_weapons 10 Vous appelleriez alors ceci dans votre code comme ceci:if ++pos == total_weapons     {
         pos = 0;     }
   Notez que vous ne pourrez pas changer la valeur de la constante, donc un code comme celui-ci provoquera le plantage du jeu:total_weapons = 11; Vous pouvez définir une macro n'importe où dans votre code ou dans un script et elle sera précompilée et incluse dans votre jeu comme si elle était là depuis le début, mais nous vous recommandons de créer un actif de script dédié et de définir toutes vos macros dans là. Ce sera plus facile à organiser et à déboguer plus tard! Si vous avez besoin que la valeur d'une macro change au moment de l'exécution, vous devriez probablement en faire une variable globale, car celles-ci peuvent être modifiées à partir du code pendant un jeu, à moins que vous ne définissiez la macro comme un runtimefunction. En définissant la macro sur une fonction, cela signifie que cette fonction sera appelée à chaque fois que vous utiliserez la macro. Par exemple:#macro col make_colour_hsv(irandom(255), 255, 255) Vous appelleriez alors cette macro quelque chose comme ceci:image_blend = col; L'utilisation de ce code donnera à l'image une couleur différente à chaque fois que la macro est utilisée. Il est à noter que vous pouvez également fractionner des macros sur plusieurs lignes à l'aide de la \ caractère pour montrer où la ligne saute. Un exemple serait quelque chose comme:#macro hello show_debug_message("Hello" + \ string(player_name) + \ ", how are you today?"); Ceci est purement cosmétique, dans la mesure où la division d'une macro comme celle-ci n'aura aucun effet sur le résultat de la macro finale lorsqu'elle est utilisée, et consiste simplement à prendre en charge le texte multiligne sur les macros qui ont des lignes de code plus longues. Une caractéristique très importante des macros est qu'elles peuvent être définies pour une utilisation avec des configurations spécifiques (configs), ce qui signifie que vous pouvez avoir le même nom de macro mais lui donner des valeurs différentes en fonction de la configuration actuellement sélectionnée. Par exemple, supposons que vous ayez une configuration pour Android Ads et une autre pour iOS Ads, vous pouvez définir une seule macro pour contenir la valeur d'ID d'application requise:#macro ad_id ""; #macro Android:ad_id "com.yoyogames.googlegame" #macro iOS:ad_id "com.yoyogames.appstoregame" Comme vous pouvez le voir, vous donnez d'abord le nom de la configuration puis un deux-points : puis le nom et la valeur de la macro. Notez que vous ne pouvez pas avoir d'espace blanc entre les deux points : et soit le nom de la configuration, ni le nom de la macro, sinon vous obtiendrez une erreur. Enums Une énumération est un «énumérateur», et il vous permet essentiellement de créer votre propre type de données limité avec une liste de valeurs constantes, et ils ont la structure suivante:enum <variable> {
    <constant> [= <value>],
    <constant> [= <value>], // etc... }
   Dans l'exemple suivant, nous créons une énumération pour les couleurs de l'arc-en-ciel et lui attribuons diverses constantes et valeurs par défaut:enum rainbowcolours {     red,     orange,     yellow,     green,     blue,     indigo,     violet     } Les entrées ENUM ne peuvent être des nombres entiers ou expression s avec les énumérations précédentes qui évaluent à un nombre entier, et par défaut sont numérotés de 0 vers le haut, de sorte que notre exemple ci - dessus serait par défaut red = 0, orange = 1, yellow = 2, etc... Vous pouvez également affecter des valeurs aux variables d'énumération au moment de la création:enum enum_test { val = 10; }
    
     enum rainbowcolours {     red = 5,     orange = 5 * 2,     yellow = 15,     green = 20,     blue = 25,     indigo = 30,     violet = 35 * enum_test.val     } Remarquez que dans l'exemple ci-dessus, nous utilisons une autre énumération pour créer une expression pour "violet". Cela ne fonctionne que si l'énumération référencée a été créée avant l'énumération qui l'utilise dans une expression, mais cela ne fonctionnera pas pour les variables ou les fonctions, car la valeur enum doit pouvoir être évaluée en tant que constante lorsque le projet est en cours de compilation. Notez également que toutes les valeurs d'énumération sont évaluées en valeurs entières, et lorsque vous créez les vôtres, vous devez savoir que seules les valeurs entières sont autorisées pour que les énumérations fonctionnent. Cette valeur peut être n'importe quel nombre entier qu'un nombre à double précision à virgule flottante peut représenter, y compris les valeurs négatives. Pour accéder ultérieurement à la valeur dans un type d'énumération donné, vous pouvez utiliser le point "." méthode, comme ceci:variable = <enum_name>.<enum_variable>; À titre d'exemple, utilisons le "rainbowcolours "énumération que nous avons créée dans le code ci-dessus:colour_value = rainbowcolours.green * rainbowcolours.red; Le colour_value variable contiendrait maintenant la valeur 100 (20 * 5). Notez que vous ne pouvez pas modifier les valeurs d'une constante d'énumération après sa création, tout comme vous ne pouvez pas modifier les macros après leur création. Constantes intégrées Le tableau suivant présente une liste des constantes intégrées qui peuvent être renvoyées par certaines fonctions et opérations de vos projets: Constant Descriptionpointer_null Cette constante indique que le pointeur ne pointe vers rien de significatif (le même que NULL en C ++ ou null en C #)pointer_invalid Cette constante signifie simplement que la valeur n'est pas un pointeur valideundefined Cette constante est renvoyée lorsqu'une fonction doit renvoyer quelque chose mais n'a pas de valeur appropriée ou "correcte" à renvoyerNaN Cette constante qui peut être retournée lorsque le compilateur ne peut pas évaluer les résultats d'une opération comme un nombre - par exemple, 0/0 ne peut pas être défini comme un nombre réel, et est donc représentée par NaNinfinity This constant  fait référence à un nombre considéré comme infini, tel que le résultat que vous obtiendriez en divisant une valeur à virgule flottante par zéro, par exemple: 1.0 / 0.true Cette constante représente la valeur 1, ce que GameMaker Studio évaluera comme un booléen "vrai" (notez que toute valeur égale ou supérieure à 1 sera évaluée comme true ).false Cette constante représente la valeur 0, ce que GameMaker Studio évaluera comme un booléen "faux" (notez que toute valeur inférieure ou égale à 0 sera évaluée comme false ).pi Cette constante représente la valeur de pi: 3.141592653589793280 etc... bien que la valeur exacte dépendra de divers facteurs comme le système d'exploitation ou la plate-forme ciblée.  Retour: Portée des variables et des variables Suivant: Variables locales © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

