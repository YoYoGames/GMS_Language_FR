
  
  Variables d'instance
  Une variable d'instance est créée dans une instance d'un objet et est considérée comme unique à cette instance - c'est-à-dire que plusieurs instances du même objet peuvent avoir la même variable, mais chaque variable peut avoir une valeur différente car elle est unique à chaque instance.
    chaque instance. Mais comment une variable d'instance est-elle créée ? Eh bien, vous créez de nouvelles variables en leur attribuant simplement une valeur, comme le montre ce petit exemple (cela s'appelle déclarer la variable) :
  potions = 12 ; vie = 100 ; nom = "Jock MacSweeney" ; force = 5,5 ; armure = -2 ;
  Comme vous pouvez le voir, il suffit de donner un nom et une valeur (la valeur peut être de n'importe quel type) pour définir cette variable et la rendre prête à être utilisée dans une instance de l'objet pour lequel vous codez (notez que la valeur peut provenir de la valeur de retour d'une fonction ou du résultat d'une opération entre d'autres variables, etc...).
    provenir de la valeur de retour d'une fonction ou du résultat d'une opération entre d'autres variables, etc...). Ces variables peuvent ensuite être utilisées et modifiées de plusieurs façons à l'intérieur de l'instance, par exemple ce code pourrait être dans un événement de collision
    et être utilisé pour retirer un montant de la variable "life" :
  vie -= 5 + armure ;
  Si "life" est à 100, il aura maintenant une valeur de 97 (100 - (5 + -2) = 97). Il s'agit là d'un exemple simple, et vous pourriez remplacer "armour" par la valeur réelle de -2,
    mais que se passe-t-il si cette valeur est codée en dur à plusieurs endroits et que vous décidez de la modifier ? Vous devrez passer en revue TOUT votre code et remplacer chaque -2 par la nouvelle valeur.
    ce qui prend du temps et est source d'erreurs ! Mais si vous utilisez une variable, tout ce que vous avez à faire est de lui réassigner une nouvelle valeur et le code utilisera automatiquement cette nouvelle valeur à partir de ce moment-là, ce qui rend les choses beaucoup plus flexibles et beaucoup plus faciles à résoudre
    en cas de problème. Il convient également de noter que même si une valeur ne change pas, il est beaucoup plus facile de se souvenir de la signification d'une variable appelée "life" que de regarder un simple chiffre.
  GameMaker Studio 2 dispose également d'une collection de variables d'instance "intégrées". Vous devez donc les connaître car vous pouvez donner le même nom à l'une de vos propres variables d'instance ou souhaiter avoir votre propre variable globale portant le même nom et vous demander pourquoi
    vous obtenez des erreurs. Elles sont cependant faciles à repérer, car elles sont affichées dans une couleur différente dans l'éditeur de code, elles apparaissent également dans la saisie automatique et sont affichées dans une barre au bas de l'éditeur de code.
  Il existe un certain nombre de fonctions d'exécution conçues pour vous aider à traiter les variables d'instance, qui sont toutes répertoriées dans la section suivante :
  
    Fonctions variables
  
   
   
   
  
    
      
        Retour : Variables et champ d'application des variables
        Suivant : Variables globales
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

