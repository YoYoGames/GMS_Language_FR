
  
  Variables et port√©e des variables
  Comme tout langage de programmation GML utilise des variables comme unit√© de base pour la plupart des op√©rations de programmation. Les variables sont utilis√©es pour stocker des informations dans la m√©moire du p√©riph√©rique en vue d'une utilisation ult√©rieure (ou imm√©diate), et un nom leur est attribu√© afin de pouvoir y faire r√©f√©rence dans les fonctions d'ex√©cution et de script.
    dans les fonctions d'ex√©cution et de script. Une variable dans GML peut stocker de nombreuses valeurs diff√©rentes types de donn√©escomme un nombre r√©el (ex : 100, 2.456575, -56 etc...), une cha√Æne de caract√®res (ex : "Hello world !"), un nombre entier (ex : 1, 556, etc...), un nombre de bits (ex : 1, 556, etc...).
    (ex : 1, 556, -7), ou un bool√©en(vrai ou faux), ainsi que d'autres choses :
  var _num = 126.4545 ; var _str = "Hello World" ; new_num = _num * 100 ; global.my_string = _str + " J'ai dit" ;
  Vous pouvez √©galement utiliser des variables pour contenir les valeurs renvoy√©es par les fonctions, par exemple :
  var _id = instance_nearest(x, y, obj_Tree) ; root = sqrt(1000) ; global.str = string_upper("Hello World") ;
  Donc, une variable est quelque chose que nous pouvons nommer et utiliser pour stocker une valeur pour une utilisation ult√©rieure dans une ou plusieurs op√©rations. Un excellent exemple de variable dans le "monde r√©el" est pi ùúã ... c 'est  une variable que tout le monde conna√Æt et qui contient la valeur 3,14159265 (etc...).
    Pourquoi l'avons-nous dans notre langue ? Eh bien, il est beaucoup plus facile de dire √† quelqu'un "pi" que "trois point un quatre un cinq neuf deux six cinq" ! Nommer les choses de cette fa√ßon rend la vie beaucoup plus simple et cela signifie √©galement que si la valeur de cette variable change, nous n'aurons pas √† nous soucier de l'avenir.
    de cette variable, nous n'avons pas besoin de changer le nombre partout puisque le nom de la variable reste le m√™me.
  Lorsque l'on forme des variables dans GML elles doivent avoir un nom qui commence par une lettre ou le symbole de soulignement "_" et ne peuvent contenir que des lettres, des chiffres et le symbole de soulignement "_", avec une longueur maximale de 64 symboles. Ainsi, les variables valides
    sont des choses comme fish, foo_bar, num1, ou _str, alors que les variables invalides seraient 6fish, foo bar, ou *num.
  Dans de nombreux langages de programmation, vous devez cr√©er une "affectation" de variable avant de pouvoir l'utiliser. Cela signifie essentiellement que vous indiquez √† l'ordinateur le nom que vous souhaitez utiliser pour la variable et que vous lui attribuez une valeur initiale. La variable est
    La variable re√ßoit alors un emplacement en m√©moire pour stocker la valeur ou effectuer des op√©rations sur elle. L'affectation d'une variable se pr√©sente sous la forme suivante :
  <variable> = <expression> ;
  Une expression peut √™tre une simple valeur mais peut aussi √™tre plus compliqu√©e. Ainsi, plut√¥t que d'attribuer une valeur √† une variable, on peut aussi ajouter une valeur √† la valeur actuelle de la variable en utilisant +=, par exemple :
  a = 100 ; // Attribution d'une valeur simple b = 200 ; c = 300 ; a += b ; // Attribution avec op√©ration a = b + c ; // Attribution avec expression
  REMARQUE: le langage GameMaker accepte √©galement ":=" pour les affectations, bien que ce ne soit pas la fa√ßon la plus courante de proc√©der :
  <variable> := <expression> ;
  De m√™me, vous pouvez soustraire √† l'aide de -=, multiplier √† l'aide de *=, diviser √† l'aide de /=, ou utiliser des op√©rateurs binaires √† l'aide de |=,
    &= , ou ^=. Vous pouvez √©galement ajouter ou soustraire un √† une valeur en utilisant ++, --. Pour plus d'informations, voir
    la section sur les expressions et les op√©rateurs.
  Notez que vous ne pouvez pas faire ce qui suit (ou toute autre variante) :
  a = b = c = 4 ;
  Et √† la place, il faut faire comme :
  a = 4 ; b = 4 ; c = 4 ;
  Les affectations de variables pr√©sent√©es ci-dessus sont toutes des variables d'instance , mais il existe en fait trois autres cat√©gories principales de variables lorsque vous programmez avec GameMaker Studio 2 . 
    comme sa zone d'op√©ration ou sa port√©e). Les diff√©rents types de variables et leur port√©e sont d√©crits dans les pages suivantes :
  
    Variables locales
    Variables d'instance
    Variables globales
    Constantes
  
  Le langage GameMaker dispose √©galement de plusieurs variables int√©gr√©es diff√©rentes qui peuvent avoir n'importe quelle port√©e mentionn√©e ci-dessus (sauf locale). Ces variables sont sp√©ciales car elles sont incluses par d√©faut dans les objets et les pi√®ces de l'univers du jeu.
    monde. Certaines variables globales int√©gr√©es sont list√©es dans la section mentionn√©e ci-dessus, et les diff√©rentes parties du manuel pour les sprites, les pi√®ces, les objets, etc... d√©crivent √©galement les variables int√©gr√©es disponibles dans chaque cas. Des exemples de ces variables d'instance int√©gr√©es
    d'instance int√©gr√©es seraient :
  index_spirit
    path_scale
    vitesse
  Et des exemples de variables globales int√©gr√©es seraient :
  vue_exportation
    GM_version
    salle
  La plupart des variables int√©gr√©es peuvent √™tre modifi√©es et d√©finies comme les autres variables, et certaines peuvent m√™me √™tre des tableaux, mais vous n'avez pas besoin de les d√©finir pour les cr√©er comme vous le feriez avec une variable ordinaire, car elles sont d√©j√† initialis√©es √† une valeur par d√©faut.
    valeur par d√©faut.
  Enfin, il existe un certain nombre de fonctions d√©di√©es au r√©glage, √† l'obtention ou √† la v√©rification des variables d'une mani√®re ou d'une autre, disponibles √† partir de la page suivante :
  
    Fonctions variables
  
   
   
   
  
    
      
        Retour : Aper√ßu duGML
        Suivant : Tableaux
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits r√©serv√©s
  
  
  

