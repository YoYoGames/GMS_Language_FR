 Collisions Lors de la planification de mouvements ou de la décision sur certaines actions, il est souvent important de voir s'il y a des collisions avec d'autres objets à certains endroits dans le monde du jeu, et souvent choisir la bonne collision pour le travail est la tâche la plus importante de toutes. GameMaker Studio 2 dispose d'un certain nombre de fonctions intégrées pour vous aider à gérer les collisions correctement et conformément aux besoins de votre projet. IMPORTANT! Toutes les fonctions de collision fonctionnent avec des positions entières, quelles que soient les valeurs d'entrée. Toutes les valeurs non entières seront arrondies à l'entier le plus proche. Vérification simple des collisions Les fonctions suivantes traitent des différentes manières dont vous pouvez demander à une instance de vérifier les collisions avec une autre instance: place_emptyplace_freeplace_meetingposition_emptyposition_meetingposition_changeposition_destroyinstance_placeinstance_place_listinstance_positioninstance_position_list Vérification avancée des collisions Les routines suivantes peuvent être utilisées pour cela (ainsi que d'autres fonctions détaillées dans les sections relatives aux déplacements et aux instances ). Ces fonctions de collision fonctionnent toutes légèrement différemment mais elles conservent trois arguments communs que nous expliquerons ici: obj. C'est là que nous spécifions l'objet avec lequel la fonction doit vérifier une collision. Il peut s'agir d'un identifiant d'instance, d'un type d'objet ou du mot clé spécial GM all. Il convient également de noter que si le type d'objet choisi est le parent désigné des autres objets, tous les enfants de cet objet seront également inclus dans cette vérification. prec. Cela peut être soit true ou false et concerne la précision de la vérification des collisions. Si défini sur true, alors des collisions précises doivent être calculées (mais seulement si l'objet en cours de vérification a marqué "précis" pour sa détection de collision dans ses propriétés de masque), ce qui est une tâche légèrement plus complexe pour le CPU et doit donc être utilisée avec précaution. Si false puis les collisions seront calculées en fonction de la boîte englobante de l'objet à vérifier. pas moi. Vous devrez peut-être vérifier les collisions avec un objet qui a le même index que l'objet qui exécute le code, donc pour empêcher le code de trouver une collision avec lui-même, vous pouvez définir ceci sur true. Si vous recherchez spécifiquement l'instance de l'objet exécutant le code, ou si ce n'est pas important, il peut être laissé comme false. Les fonctions de base renverront soit l'ID d'une instance trouvée en collision, soit le mot-clé spécial noone lorsqu'il n'y a pas de collision, tandis que les fonctions de liste renverront le nombre d'instances qui sont en collision et rempliront une liste DS prédéfinie avec leurs ID. Notez que s'il y a plusieurs collisions avec les zones définies par ces fonctions et instances de l'objet donné, un seul ID d'instance est renvoyé et il peut s'agir de l'une des instances de la collision. Les fonctions suivantes existent pour traiter les collisions avancées. collision_circlecollision_circle_listcollision_ellipsecollision_ellipse_listcollision_linecollision_line_listcollision_pointcollision_point_listcollision_rectanglecollision_rectangle_list Vérification des collisions sans masque Toutes les fonctions ci-dessus sont liées aux instances de vérification de collision et, en tant que telles, dépendent du masque de collision défini pour l'instance. Cependant, il y a de nombreux moments où vous avez besoin de vérifier les "collisions" avec un point ou une zone, en particulier lorsque votre instance n'a pas de sprite assigné, ou lorsque vous travaillez avec la souris etc... Par conséquent GameMaker Studio 2 aussi fournit les fonctions suivantes pour vous aider dans ces situations: point_in_rectanglepoint_in_trianglepoint_in_circlerectangle_in_rectanglerectangle_in_trianglerectangle_in_circle Collisions physiques Lors de l'utilisation de la construction en physique, les fonctions de collision ci-dessus ne sont pas garanties de fonctionner pour les instances activées pour la physique. Cela est principalement dû au fait que ces instances n'utilisent plus la majorité des variables intégrées régulières (à la place, les instances activées pour la physique ont leur propre ensemble de variables ) et n'utilisent pas non plus le masque de collision ou la boîte englobante, car elles utilisent des fixtures. au lieu. Cependant, il existe une fonction spéciale pour tester les collisions avec la physique activée qui vérifie les appareils qui se chevauchent:physics_test_overlap Retour: Mouvement et collisions Suivant: Mouvement © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

