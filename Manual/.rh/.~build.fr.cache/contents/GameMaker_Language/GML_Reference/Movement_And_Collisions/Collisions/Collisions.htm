
  
  Collisions
  Lorsque vous planifiez des mouvements ou décidez de certaines actions, il est souvent important de voir s'il y a des collisions avec d'autres objets à certains endroits dans le monde du jeu.
    de toutes les tâches. GameMaker Studio 2 dispose d'un certain nombre de fonctions intégrées pour vous aider à gérer les collisions correctement et en fonction des besoins de votre projet.
  IMPORTANT ! Toutes les fonctions de collision fonctionnent avec des positions entières, quelles que soient les valeurs d'entrée. Toutes les valeurs non entières seront arrondies au nombre entier le plus proche.
   
  Vérification simple des collisions
  Les fonctions suivantes traitent des différentes manières dont vous pouvez faire en sorte qu'une instance vérifie les collisions avec une autre instance :
   
  
    place_vide
    place_free
    lieu_réunion
    position_vide
    position_réunion
    changement de position
    position_destroy
    instance_place
    liste_de_lieux_instances
    instance_position
    liste_position_instance
  
   
  Contrôle avancé des collisions
  Les routines suivantes peuvent être utilisées pour cela (ainsi que d'autres fonctions détaillées dans les sections relatives aux déplacements et aux instances). Ces fonctions de collision fonctionnent toutes légèrement différemment mais elles conservent trois arguments communs
    que nous allons expliquer ici :
  
    obj. C'est ici que nous spécifions l'objet avec lequel la fonction doit vérifier la présence d'une collision. Il peut s'agir d'un identifiant d'instance, d'un type d'objet ou du mot-clé spécial GM all. Il est également intéressant de noter que si le type d'objet choisi est le parent désigné d'autres objets, tous les enfants de cet objet seront considérés comme des parents.
     parent d'autres objets, alors tous les enfants de cet objet seront également inclus dans cette vérification.
    prec. Cette valeur peut être vraie ou fausse et concerne la précision du contrôle des collisions. Si elle est définie sur true, des collisions précises seront calculées (mais seulement si l'objet contrôlé a "precise" dans ses propriétés de masque).
      pour sa détection de collision dans les propriétés de son masque), ce qui est une tâche légèrement plus complexe pour le CPU et doit donc être utilisé avec prudence. Si elle est fausse, les collisions seront calculées sur la base de la boîte englobante de l'objet à contrôler.
      pour.
    notme. Vous pouvez avoir besoin de vérifier les collisions avec un objet qui a le même index que l'objet qui exécute le code, donc pour empêcher le code de trouver une collision avec lui-même, vous pouvez mettre cette valeur à true. Si vous recherchez spécifiquement
      l'instance de l'objet qui exécute le code, ou que ce n'est pas important, vous pouvez laisser cette valeur à false.
  
  Les fonctions de base renverront soit l'ID d'une instance en collision, soit le mot-clé spécial noone s'il n'y a pas de collision, tandis que les fonctions de liste renverront le nombre d'instances en collision et rempliront une liste DS préétablie avec leurs ID.
    une liste DS prédéfinie avec leurs ID. Notez que s'il y a plusieurs collisions avec les zones définies par ces fonctions et les instances de l'objet donné, un seul ID d'instance est retourné, et il peut s'agir de n'importe laquelle des instances de la collision.
  Les fonctions suivantes permettent de traiter les collisions avancées.
   
  
    cercle de collision
    liste_circulaire_de_collision
    collision_ellipse
    liste_ellipse_collision
    ligne de collision
    liste de lignes de collision
    point de collision
    liste de points de collision
    rectangle de collision
    liste de rectangles de collision
  
   
  Contrôle des collisions sans masque
  Toutes les fonctions ci-dessus sont liées à des instances de contrôle de collision et, en tant que telles, reposent sur le masque de collision défini pour l'instance. Cependant, il y a de nombreux moments où vous devez vérifier les "collisions" avec un point ou une zone, en particulier lorsque votre instance n'a pas de sprite assigné, ou lorsque vous travaillez avec le masque de collision.
    ou une zone, notamment lorsque votre instance n'a pas de sprite assigné, ou lorsque vous travaillez avec la souris, etc... C'est pourquoi GameMaker Studio 2 fournit également les fonctions suivantes pour vous aider dans ces situations :
   
  
    point_dans_rectangle
    point_dans_triangle
    point_in_circle
    rectangle_dans_rectangle
    rectangle_dans_triangle
    rectangle_en_cercle
  
   
  Physique Collisions
  Lors de l'utilisation de la physique intégrée, le fonctionnement des fonctions de collision ci-dessus n'est pas garanti pour les instances avec physique. Ceci est principalement dû au fait que ces instances n'utilisent plus la majorité des variables régulières intégrées (les instances activées par la physique ont leur propre jeu de variables).
    ont leur propre jeu de variables) et elles n'utilisent pas non plus le masque de collision ou la boîte englobante, car elles utilisent des fixtures à la place. Cependant, il existe une fonction spéciale pour tester les collisions avec la physique activée qui vérifie le chevauchement des fixtures :
   
  
    test_physique_chevauchement
  
   
   
   
  
    
      
        Le dos : Mouvement et collisions
        Suivant : Mouvement
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

