
  
  Planification des mouvements
  Dans de nombreux jeux, vous souhaitez que les adversaires, les PNJ, les ennemis, etc., interagissent avec le joueur et fassent preuve d'une certaine intelligence lorsqu'ils se déplacent : vous voulez qu'ils évitent les obstacles, qu'ils planifient des itinéraires et qu'ils ne se heurtent pas à tout sur leur passage ! Pour y parvenir
   GameMaker Studio 2 dispose d'une série de fonctions qui traitent de la planification des mouvements. Notez que, bien qu'elles soient conçues pour des choses comme les ennemis du jeu, elles peuvent être utilisées pour toutes sortes de choses, comme la création d'une manière fluide d'introduire du texte, ou la création de transitions.
    pour introduire du texte, ou pour créer des transitions, etc... Cependant, quel que soit le type de fonction que vous choisissez d'utiliser dans votre jeu, il convient de noter que dans de nombreuses situations, un seul ensemble de fonctions ne vous donnera pas une solution parfaite et que vous devrez
    "mélanger les fonctions, en utilisant l'une ou l'autre en fonction de la situation dans votre jeu.
  Dans GameMaker Studio 2, la planification des mouvements est gérée par les fonctions mp_, qui sont elles-mêmes divisées en trois groupes :
   
  Fonctions linéaires
  Ce type de fonction tente de calculer un chemin sans collision pour l'instance. Une fois que ce chemin a été calculé, vous pouvez l'assigner à l'instance pour qu'elle se déplace vers le but. Le calcul du chemin prendra un certain temps mais ensuite l'exécution du chemin sera rapide.
    l'exécution du chemin sera rapide. Bien sûr, ceci n'est valable que si la situation n'a pas changé entre-temps. Par exemple, si les obstacles changent, vous devrez peut-être recalculer le chemin. Notez à nouveau que ces fonctions peuvent échouer et qu'aucun chemin ne peut être trouvé pour l'instance.
    et qu'aucun chemin ne peut être trouvé pour l'instance.
   
  
    mp_linear_step
    mp_linear_step_object
    mp_linear_path
    mp_linear_path_object
  
   
  Fonctions potentielles
   
  Ce sont les fonctions d'évitement de base et elles sont bonnes pour une IA simple. Elles fonctionnent en faisant en sorte qu'une instance fasse un pas vers une position cible particulière en essayant d'aller tout droit si possible mais en prenant une direction différente si nécessaire. Ces fonctions doivent
    être utilisées dans l'événement Step d'une instance.
   
  
    mp_potential_settings
    mp_potential_step
    mp_potential_step_object
    mp_potential_path
    mp_potential_path_object
  
   
  Fonctions de la grille
   
  Le dernier type de fonction utilise un mécanisme beaucoup plus complexe basé sur une approche par grille (parfois appelé algorithme A*). Il sera beaucoup plus efficace pour trouver des chemins (bien qu'il puisse encore échouer) et trouvera les chemins les plus courts possibles.
    mais sa mise en place demande plus de travail de votre part.
  L'idée générale est la suivante : tout d'abord, nous créons une grille qui couvre la pièce (ou la partie concernée de celle-ci). Vous pouvez choisir d'utiliser une grille fine, ce qui sera plus lent, ou une grille grossière, mais toutes deux doivent être basées sur la résolution de la pièce
    afin que la recherche de chemin soit aussi précise que possible. Par exemple, si vous avez une pièce de 400x200 pixels, vous pouvez avoir une résolution de grille de 40, ou 20, ou 10... tout dépend de la précision dont vous avez besoin pour le chemin et de la quantité de traitement que vous voulez que GameMaker fasse pour le générer.
   GameMaker pour le générer.
  Ensuite, pour tous les objets pertinents que nous voulons éviter, nous devons déterminer les cellules de la grille qu'ils recouvrent (sur la base de leurs boîtes englobantes ou de leur sprite précis) et marquer ces cellules comme étant interdites. Ainsi, une cellule sera marquée comme totalement interdite
    même si l'obstacle ne se chevauche que partiellement.
  Enfin, nous spécifions une position de départ et une position d'arrivée, qui doivent toutes deux se trouver dans des cellules libres, et la fonction calcule alors le chemin le plus court possible entre ces deux positions. Le chemin passera entre les centres de toutes les cellules libres, donc
    si les cellules sont suffisamment grandes pour que l'instance placée en son centre se trouve complètement à l'intérieur, le chemin sera réussi. Ce chemin est ensuite assigné à l'instance à suivre en utilisant les fonctions chemin_* pour le suivre.
    Vous devriez vous rendre compte de l'importance de la taille des cellules pour cela, car les cellules doivent être suffisamment grandes pour que l'objet mobile placé avec son origine au centre d'une cellule se trouve complètement à l'intérieur de celle-ci. (Faites attention à la position de l'origine
    de l'objet. Sachez également que vous pouvez déplacer la trajectoire si l'origine de l'objet n'est pas en son centre). D'autre part, plus les cellules sont petites, plus il y a de chemins possibles. Si vous faites des cellules trop grandes, les ouvertures entre les obstacles peuvent être fermées
    car toutes les cellules intersectent un obstacle.
   
  
    mp_grid_create
    mp_grid_destroy
    mp_grid_path
    mp_grid_add_cell
    mp_grid_add_instances
    mp_grid_add_rectangle
    mp_grid_get_cell
    mp_grid_clear_all
    mp_grid_clear_cell
    mp_grid_clear_rectangle
    mp_grid_to_ds_grid
    mp_grid_draw
  
   
  L'approche basée sur la grille est très puissante (et est utilisée dans de nombreux jeux professionnels) mais elle nécessite une réflexion approfondie car vous devez déterminer quelle surface et quelle taille de cellule sont suffisantes pour résoudre le jeu. De même, vous devez déterminer quels objets
    doivent être évités et si un contrôle précis est important. Tous ces paramètres influencent fortement l'efficacité de l'approche. Vous devez également décider si elle est réellement nécessaire, car l'une des fonctions moins coûteuses de mp_* 
    peut faire le travail tout aussi bien.
   
   
   
  
    
      
        Le dos : Mouvement et collisions
        Suivant : Collisions
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

