json_encode IMPORTANT! Cette fonction - tout en étant toujours valide - a été supplantée par la fonction json_stringify(), et nous vous recommandons de n'utiliser cette fonction que pour le support hérité. JSON (JavaScript Object Notation) est un format d'échange de données léger qui est facile à lire et à écrire, pour les personnes et les machines. Il est construit sur deux structures de base: Une collection de paires nom / valeur, appelée DS Map dans GameMaker Studio 2 mais également appelé «dictionnaire» ou «objet» dans d'autres langages de programmation. Une liste ordonnée de valeurs, appelée DS List dans GameMaker Studio 2 mais cela peut également être appelé «tableau» ou «séquence» dans d'autres langages de programmation.json_encode() prend une carte ou un tableau DS que vous avez précédemment créé et l'encode en tant que chaîne JSON que vous pouvez ensuite utiliser comme partie (par exemple) d'un http_post_string() appel, ou - afin qu'il puisse être stocké en externe - il peut être écrit dans un fichier. Si vous utilisez un tableau comme structure de niveau supérieur, le tableau ne peut contenir que des valeurs valides ou d'autres tableaux, et non des structures de données. Pour cela, vous devez utiliser les fonctions DS appropriées. IMPORTANT! JSON est indépendant des nombres. Dans n'importe quel langage de programmation, il peut y avoir une variété de types de nombres de capacités et de compléments variés, fixes ou flottants, binaires ou décimaux. Cela peut rendre difficile l'échange entre différents langages de programmation. JSON offre à la place uniquement la représentation des nombres que les humains utilisent: une séquence de chiffres. Tous les langages de programmation savent comment donner un sens aux séquences de chiffres même s'ils ne sont pas d'accord sur les représentations internes. Pour plus d'informations, consultez la norme ECMA JSON. Notez que des précautions doivent être prises lors de l'écriture de JSON dans un fichier ini, car les spécifications ini peuvent causer des problèmes lors de l'utilisation de guillemets et de caractères d'échappement. Voir la fonction ini_write_string() pour plus d'informations. Notez également que si vous encodez un int64 en JSON, il l'écrira comme un int s'il est dans la plage valide pour un int32, comme un double s'il peut le faire sans perdre de précision ou (si aucun de ces cas n'est applicable) comme une chaîne avec un identifiant "@i64@ "avant et "$i64$ "après. Lorsque vous venez de décoder le JSON en une carte à nouveau, GameMaker Studio 2 récupérera ces identifiants et reconvertira la valeur en int64. Cela signifie que si le JSON est destiné à un serveur ou à un autre non- GameMaker, ces valeurs ne seront pas appropriées et doivent donc être évitées. REMARQUE: la fonctionnalité hiérarchique de JSON est disponible via des fonctions spéciales de mappage DS et de liste DS (par exemple ds_map_add_list() ou ds_list_mark_as_map() ), vous pouvez donc encoder des sous-listes et des cartes. Syntaxe:json_encode(map) Argument Description map une carte DS avec les informations à encoder (ou un tableau) Retour:string Exemple:var hiscore_map, i, str; hiscore_map = ds_map_create(); for (i = 0; i < 10; i ++;)     {
         ds_map_add(hiscore_map, name[i], score[i]);     }
     str = json_encode(hiscore_map); get[0] = http_post_string("http://www.angusgames.com/game?game_id=" + string(global.game_id), str) ds_map_destroy(hiscore_map);
   Le code ci-dessus crée une carte DS, puis parcourt les tableaux de noms et de scores, ajoutant chaque paire clé / valeur à la nouvelle carte. Ensuite, cette carte est encodée en utilisant json_encode() et stocké sous forme de chaîne dans la variable "str". Cette chaîne est ensuite envoyée à un serveur Web en utilisant http_post_string() et la carte DS est détruite pour éviter une fuite de mémoire car elle n'est plus nécessaire.  Retour: Encodage de fichiers Suivant:json_decode © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

