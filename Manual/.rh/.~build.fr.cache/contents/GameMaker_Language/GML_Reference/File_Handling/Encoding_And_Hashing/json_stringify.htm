json_stringify Avec cette fonction, vous pouvez convertir des structures et des tableaux uniques ou imbriqués en une chaîne JSON valide. Vous fournissez la valeur initiale à utiliser (un index de tableau ou une référence de structure), puis la fonction la «stringifie», la convertit en une chaîne JSON, convertit les GameMaker tableaux JSON et les GameMaker en objets JSON. Lors de l'utilisation de cette fonction, il y a quelques points importants à noter: La fonction ne convertira pas les cartes DS, les listes ou toute autre structure de données en JSON, et stockera simplement la valeur d'index interne de la structure (qui est de peu d'utilité car l'index changera entre les exécutions du jeu), et en tant que tel vous ne doit pas essayer de stringifier une valeur qui peut contenir des références à des structures de données (pour cela, vous avezjson_encode() ). La fonction convertit à peu près n'importe quelle valeur en une chaîne JSON "valide", mais les valeurs réelles contenues dans la chaîne peuvent ne pas être exactement ce que vous attendez en raison de la façon dont le standard JSON fonctionne: "JSON est indépendant des nombres. Dans n'importe quel langage de programmation, il peut y avoir une variété de types de nombres de capacités et de compléments variés, fixes ou flottants, binaires ou décimaux. Cela peut rendre difficile l'échange entre différents langages de programmation. JSON n'offre plutôt que la représentation de nombres que les humains utilisent: une séquence de chiffres. Tous les langages de programmation savent comment donner un sens aux séquences de chiffres même s'ils ne sont pas d'accord sur les représentations internes. " Pour plus d'informations, consultez la norme ECMA JSON. Si vous incluez un int64 dans les valeurs à convertir en JSON, il l'écrira comme un int s'il est dans la plage valide pour un int32, comme un double s'il peut le faire sans perdre de précision ou (si aucun de ces cas n'est applicable ) sous forme de chaîne avec un identifiant "@i64@ "avant et "$i64$ "après. Lorsque vous reviendrez analyser le JSON, GameMaker Studio 2 récupérera ces identifiants et reconvertira la valeur en un int64. Cela signifie que si le JSON est destiné à un serveur ou à une autre cible GameMaker, ces valeurs ne seront pas appropriées et doivent donc être évitées. Si vous incluez infinity, -infinity ou NaN dans les valeurs à convertir en JSON, elles seront encodées sous forme de chaînes car ces valeurs ne font pas partie du standard JSON, et lors de l'analyse du JSON résultant, elles ne seront pas reconverties dans leurs runtime et resteront sous forme de chaînes. Notez que NaN sera converti en "nan" (minuscule) lors de la stringification. Des précautions doivent être prises lors de l'écriture de toute chaîne JSON retournée dans un ini fichier, comme le ini les spécifications peuvent entraîner des problèmes lors de l'utilisation de guillemets et de caractères d'échappement. Voir la fonction ini_write_string() pour plus d'informations. Syntaxe:json_stringify(val) Argument Description val La valeur de référence pour une structure ou un tableau à convertir en chaîne JSON Retour:string Exemple:var _contents = {     version : "1",     data: {         webSocket : 1,         ipv4Address : "95.39.220.218",         ipv6Address : "0000:0000:0000:0000:0000:ffff:5f27:dcda",         header
    : "You are receiving a packet",         body : "This packet is empty and only for testing",     },     };
     packet = json_stringify(map); Le code ci-dessus convertira la structure "_contents" en une chaîne JSON et stockera la chaîne dans une variable. La chaîne réelle serait comme ceci: { "version": "1", "myObj": { "header": "You are receiving a packet", "webSocket": 1, "body": "A packet of cheese and onion crisps", "ipv4Address": "95.39.220.218",
    "ipv6Address": "0000:0000:0000:0000:0000:ffff:5f27:dcda" } } Retour: Encodage de fichiers Suivant:json_parse © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

