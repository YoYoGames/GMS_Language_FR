physics_joint_pulley_create L'articulation de poulie est utilisée pour connecter deux instances dans le monde de la physique de telle sorte que le déplacement de l'une influencera directement le mouvement de l'autre. Ces articulations sont d'abord ancrées dans l'espace du monde en deux points, chacun étant connecté à une instance en son centre de masse. Cela peut être modifié en définissant les coordonnées x / y de l'ancre locale par rapport à l'origine de l'instance, ce qui signifie que la connexion réelle de l'instance au point d'ancrage du monde physique peut être décalée ailleurs que son origine. L'image suivante illustre cela: Si vous regardez inst2, vous pouvez voir que son point d'ancrage local a été décalé de 20 pixels vers la «gauche» de son origine (rappelez-vous! Les points d'ancrage du monde sont définis à l'aide des coordonnées de la pièce, tandis que les points d'ancrage locaux sont définis par rapport au origine de l'instance). Vous pouvez également spécifier un rapport pour l'articulation de poulie, qui indique à un côté ou à l'autre de se déplacer plus rapidement, avec une valeur inférieure à 1 rendant la première instance plus rapide (EG 0.5 le fera bouger deux fois plus vite) et une valeur supérieure à 1 faisant la seconde instance se déplace plus rapidement (EG 2 le fera bouger deux fois plus vite). Comme pour toutes les liaisons, si vous définissez la valeur "col" sur true alors les deux instances peuvent interagir et entrer en collision l'une avec l'autre, mais uniquement si elles ont des événements de collision, mais si elle est définie sur false, ils n'entreront pas en collision quoi qu'il arrive. Syntaxe:physics_joint_pulley_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, l_anchor1_x, l_anchor1_y, l_anchor2_x, l_anchor2_y, ratio, col) Argument Description inst1 La première instance à se connecter avec l'articulation inst2 La deuxième instance pour se connecter avec l'articulation w_anchor1_x La coordonnée x où la première partie de l'articulation est ancrée, dans le monde du jeu w_anchor1_y La coordonnée y où la première partie de l'articulation est ancrée, dans le monde du jeu w_anchor2_x La coordonnée x où la deuxième partie de l'articulation est ancrée, dans le monde du jeu w_anchor2_y La coordonnée y où la deuxième partie de l'articulation est ancrée, dans le monde du jeu l_anchor1_x La coordonnée x locale où l'articulation 1 est ancrée à la première instance l_anchor1_y La coordonnée y locale où l'articulation 1 est ancrée à la première instance l_anchor2_x La coordonnée x locale où l'articulation 2 est ancrée à la deuxième instance l_anchor2_y La coordonnée y locale où l'articulation 2 est ancrée à la deuxième instance ratio Définir le rapport de vitesse entre deux instances col Si les deux instances peuvent entrer en collision (vrai) ou non (faux) Retour:Integer (index of the joint) Exemple:var t_fix, inst1, inst2; t_fix = physics_fixture_create(); physics_fixture_set_circle_shape(t_fix, 20); inst1 = instance_create_layer(150, room_height - 90, "Instances", obj_Block); inst2 = instance_create_layer(300, room_height
    - 90, "Instances", obj_block); physics_fixture_bind(t_fix, inst1); physics_fixture_bind(t_fix, inst2); physics_joint_pulley_create(inst1, inst2, 150, room_height - 140, 300, room_height - 140, 0, 0, 0, 0, 2, 0); physics_fixture_delete(t_fix);
   Le code ci-dessus crée et définit un nouveau fixture, crée deux instances de "obj_Block", puis lie ce fixture à deux. Il définit ensuite un joint de poulie entre ces instances, sans décalage pour les articulations, un rapport de 2: 1 (ce qui signifie que inst2 se déplacera plus rapidement). Aucune collision ne se produit entre les deux instances de la poulie.  Arrière: Joints Suivant:physics_joint_gear_create © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

