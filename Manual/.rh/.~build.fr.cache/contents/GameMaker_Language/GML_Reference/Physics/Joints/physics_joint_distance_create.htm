physics_joint_distance_create L'une des articulations les plus simples est une articulation à distance qui indique que la distance entre deux points sur deux instances doit être constante. Lorsque vous spécifiez une liaison à distance, les deux instances doivent déjà être créées et avoir un appareil assigné, puis vous définissez les deux points d'ancrage dans les coordonnées de la pièce. Le premier point d'ancrage est connecté à l'instance 1, le deuxième point d'ancrage est connecté à l'instance 2 et la distance entre ces points implique la longueur de la contrainte de distance. L'image ci-dessous montre comment cela fonctionne: Comme vous pouvez le voir, les points d'ancrage sont spécifiés en tant que coordonnées de la pièce, il faut donc faire attention lors de leur définition, en particulier si les instances sont créées en même temps que les joints plutôt que d'être placées dans la pièce via l'éditeur de pièce. Vous devez également vous rendre compte que les liaisons sont créées indépendamment de la taille du sprite des instances ou des appareils qu'elles ont attachés. Ainsi, si vous créez une liaison à distance ailleurs que l'origine de l'instance, elle est toujours valide et contraindra les deux instances par rapport à la position à laquelle elle a été créée. Si vous définissez la valeur "col" sur true alors les deux instances peuvent interagir et entrer en collision l'une avec l'autre, mais uniquement si elles ont des événements de collision, mais si elle est définie sur false, ils n'entreront pas en collision quoi qu'il arrive. Syntaxe:physics_joint_distance_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, col) Argument Description inst1 La première instance à se connecter avec l'articulation inst2 La deuxième instance pour se connecter avec l'articulation w_anchor1_x La première coordonnée x pour l'articulation, dans le monde du jeu w_anchor1_y La première coordonnée y pour l'articulation, dans le monde du jeu w_anchor2_x La deuxième coordonnée x pour l'articulation, dans le monde du jeu w_anchor2_y la deuxième coordonnée y pour l'articulation, dans le monde du jeu col Si les deux instances peuvent entrer en collision (vrai) ou non (faux) Retour:Integer (index of the joint) Exemple:var mainFixture, o_id; mainFixture = physics_fixture_create(); physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2); o_id=instance_create_layer(x+300, y, "Instances", obj_Rudder); physics_fixture_bind(mainFixture,
    id); physics_fixture_bind(mainFixture, o_id); physics_joint_distance_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 0); physics_fixture_delete(mainFixture);
   Le code ci-dessus crée et définit un nouvel appareil, puis crée une instance de "obj_Rudder". L'appareil est ensuite affecté à l'instance qui exécute le code ainsi qu'à l'instance nouvellement créée et une liaison est créée entre eux. Enfin, l'appareil est supprimé car il n'est plus nécessaire.  Arrière: Joints Suivant:physics_joint_revolute_create © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

