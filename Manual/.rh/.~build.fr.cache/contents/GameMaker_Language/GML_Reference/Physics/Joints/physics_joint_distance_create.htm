
  
  physique_joint_distance_créer
  L'un des joints les plus simples est le joint de distance, qui stipule que la distance entre deux points sur deux instances doit être constante. Lorsque vous spécifiez un joint de distance, les deux instances doivent déjà être créées et avoir un dispositif de fixation assigné.
    les deux points d'ancrage en coordonnées d'espace. Le premier point d'ancrage est connecté à l'instance 1, le second point d'ancrage est connecté à l'instance 2 et la distance entre ces points implique la longueur de la contrainte de distance. L'image ci-dessous montre
    comment cela fonctionne :
  Comme vous pouvez le constater, les points d'ancrage sont spécifiés en tant que coordonnées de la pièce.
    les définir, surtout si les instances sont créées en même temps que les articulations, plutôt que d'être placées dans la pièce par l'intermédiaire de l'éditeur de pièce. Vous devez également savoir que les articulations sont créées indépendamment de la taille du sprite des instances ou des fixtures qu'elles comportent.
    les instances ou les fixtures qu'elles ont attachées. Ainsi, si vous créez un joint de distance ailleurs qu'à l'origine de l'instance, il est toujours valide et contraindra les deux instances par rapport à la position à laquelle il a été créé. Si vous définissez
    la valeur "col" à true, alors les deux instances peuvent interagir et entrer en collision l'une avec l'autre, mais seulement si elles ont des événements de collision, alors que si elle est réglée à false, elles n'entreront jamais en collision.
   
  Syntaxe :
  physics_joint_distance_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, col)
  
    
      
        Arguments
        Description
      
      
        inst1
        La première instance à se connecter avec l'articulation
      
      
        inst2
        La deuxième instance pour se connecter avec le joint
      
      
        w_anchor1_x
        La première coordonnée x de l'articulation, dans l'univers du jeu.
      
      
        w_anchor1_y
        La première coordonnée y de l'articulation, dans l'univers du jeu.
      
      
        w_anchor2_x
        La deuxième coordonnée x de l'articulation, dans l'univers du jeu.
      
      
        w_anchor2_y
        la deuxième coordonnée y de l'articulation, dans l'univers de jeu
      
      
        col
        Si les deux instances peuvent entrer en collision (vrai) ou non (faux).
      
    
  
   
  Les retours :
  Nombre entier (indice de l'articulation)
   
  Exemple :
  var mainFixture, o_id ; mainFixture = physics_fixture_create() ; physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2) ; o_id=instance_create_layer(x+300, y, "Instances", obj_Rudder) ; physics_fixture_bind(mainFixture,
    id) ; physics_fixture_bind(mainFixture, o_id) ; physics_joint_distance_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 0) ; physics_fixture_delete(mainFixture) ;
  
  Le code ci-dessus crée et définit un nouveau dispositif, puis crée une instance de "obj_Rudder". Le dispositif est ensuite assigné à l'instance qui exécute le code ainsi qu'à l'instance nouvellement créée et un joint est créé entre eux. Enfin,
    le dispositif est supprimé car il n'est plus nécessaire.
   
   
   
  
    
      
        Dos : Articulations
        Suivant : physics_joint_revolute_create
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

