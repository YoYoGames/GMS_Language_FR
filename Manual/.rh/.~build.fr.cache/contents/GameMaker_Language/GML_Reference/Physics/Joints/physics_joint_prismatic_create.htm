
  
  physique_joint_prismatique_créer
  Comme une articulation à rotule, l'articulation prismatique n'a qu'un seul degré de liberté, mais avec cette articulation, il est directionnel par rapport à un axe plutôt que rotatif et empêche en fait toute forme de rotation. Voici une image pour vous aider à visualiser comment cela fonctionne :
  Nous avons deux instances jointes au point d'ancrage, avec un axe de déplacement
    défini à partir du vecteur des deux coordonnées x/y de l'axe w par rapport aux coordonnées (0,0) du monde physique (ainsi, une composante x de 0 et une composante y de 1 (0,1) feraient de l'articulation une articulation prismatique verticale). Cette articulation ne peut alors se déplacer que 
    par rapport à cet axe, comme un ressort ou un piston. Si vous définissez la limite trans inférieure ou supérieure, vous limitez essentiellement la quantité de mouvement le long de cet axe, où la position 0 est l'endroit exact que vous avez défini avec w_anchor x/y, donc une valeur négative
    ira à la "gauche" de ce point le long de l'axe et une valeur positive à la "droite", comme indiqué dans le diagramme suivant (sachez que "gauche" et "droite" sont des termes relatifs !)
  Vous pouvez également définir l'articulation comme ayant un moteur ou non. Cela signifie que lorsqu'elle n'est pas influencée
    par une collision, l'articulation se déplacera dans une direction le long de l'axe. Cette direction est définie par la vitesse du moteur, avec un nombre positif vers les coordonnées de l'axe ("droite") et un nombre négatif vers le point d'ancrage ("gauche").
    L'argument "max_motor_force" permet de limiter la vitesse du mouvement afin de ne pas avoir un moteur en perpétuelle accélération et de limiter l'influence qu'une collision peut avoir sur le mouvement. De cette façon, vous pouvez utiliser un moteur d'articulation
    pour simuler la friction des articulations en fixant la vitesse de l'articulation à zéro et la force maximale à une valeur faible mais significative. Le moteur essaiera d'empêcher l'articulation de bouger, mais cédera à une charge importante.
  Comme pour tous les joints, si vous définissez la valeur "col" sur true, les deux instances peuvent interagir et entrer en collision l'une avec l'autre, mais seulement si elles ont des événements de collision .
    quoi qu'il arrive.
   
  Syntaxe :
  physics_joint_prismatic_create(inst1, inst2, w_anchor_x, w_anchor_y, w_axis_x, w_axis_x, lower_trans_limit, upper_trans_limit, limit, max_motor_force, motor_speed, motor, col)
  
    
      
        Arguments
        Description
      
      
        inst1
        La première instance à se connecter avec l'articulation
      
      
        inst2
        La deuxième instance pour se connecter avec le joint
      
      
        w_anchor_x
        La coordonnée x où l'articulation est ancrée, dans le monde du jeu.
      
      
        w_anchor_y
        La coordonnée y où l'articulation est ancrée, dans le monde du jeu.
      
      
        w_axis_x
        La composante x du vecteur axe
      
      
        w_axis_y
        La composante y du vecteur axe
      
      
        limite_trans_inférieure
        La limite inférieure autorisée pour le mouvement de l'articulation
      
      
        limite_trans_supérieure
        La limite inférieure autorisée pour le mouvement de l'articulation
      
      
        limite
        Limiter le mouvement de l'articulation (vrai) ou non (faux).
      
      
        force_motrice_maximum
        Définit la vitesse de déplacement maximale du moteur
      
      
        vitesse du moteur
        C'est la vitesse à laquelle le moteur doit se déplacer.
      
      
        moteur
        Si le moteur doit être actif (true) ou non (false).
      
      
        col
        Si les deux instances peuvent entrer en collision (vrai) ou non (faux).
      
    
  
   
  Les retours :
  Nombre entier (indice de l'articulation)
   
  Exemple :
  var mainFixture, o_id ; mainFixture = physics_fixture_create() ; physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2) ; o_id = instance_create_layer(x+25, y, "Instances", obj_Piston) ; physics_fixture_bind(mainFixture,
    id) ; physics_fixture_bind(mainFixture, o_id) ; physics_joint_prismatic_create(id, o_id, x, y, 0, 10, 0, 0, 0, 5, 0, 1, 1) ; physics_fixture_delete(mainFixture) ;
  
  Le code ci-dessus crée et définit un nouveau dispositif de fixation, puis crée une instance de "obj_Piston", liant le dispositif de fixation créé aux deux nouveaux objets. Ils sont ensuite reliés par un joint prismatique dont la position d'ancrage se situe aux mêmes coordonnées x/y
    de la première instance et un axe formé par le vecteur de la position x/y et l'axe x/y (dans ce cas, 0,10, qui correspond à "bas"). Aucune limite n'est imposée à la quantité de mouvement le long de cet axe, mais nous avons ajouté un moteur à vitesse 0
    et une force maximale de 5 pour simuler la friction des articulations.
   
   
   
  
    
      
        Dos : Articulations
        Suivant : physics_joint_pulley_create
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

