
  
  physics_joint_revolute_create
  Une articulation revolute oblige deux corps à partager un point d'ancrage commun (souvent appelé point de charnière) et l'articulation a un seul degré de liberté - la rotation relative des deux corps autour de ce point. Pour spécifier une rotule, vous devez fournir deux instances
    et un point d'ancrage unique dans la pièce, comme vous pouvez le voir dans l'image fournie :
  Si vous regardez l'image, vous pouvez voir que les deux instances ont été créées pour se chevaucher.
    pour se chevaucher et au point où elles se touchent, nous avons défini un joint tournant. Maintenant, cette articulation peut être limitée dans sa liberté de rotation grâce aux valeurs "ang_min_limit" et "ang_max_limit". Comment cela fonctionne-t-il ? Eh bien,
    regardons une autre image :
  Comme vous pouvez le constater, les angles dans le monde de la physique ne sont pas les mêmes que les angles standard.
   GameMaker Studio 2 où la droite correspond à 0 degré et où l'on va dans le sens inverse des aiguilles d'une montre de sorte que le haut correspond à 90, la gauche à 180 et le bas à 270. Non, lorsqu'il s'agit d'une articulation rotative, l'axe des 0 degrés va de la position de l'articulation à l'origine de la
    seconde instance définie par la fonction et les angles sont alors calculés dans le sens des aiguilles d'une montre. Si vous activez la limitation d'angle, les limites sont définies comme étant relatives à cet axe de 0 degré et la plage de limites doit inclure zéro, sinon
    l'articulation fera des embardées lorsque la pièce commencera. Enfin, vous pouvez définir l'articulation comme ayant un moteur ou non. Cela signifie que lorsqu'elle n'est pas influencée par une collision, l'articulation se déplacera dans une direction définie par la vitesse du moteur, un nombre positif correspondant au sens des aiguilles d'une montre et un nombre négatif au sens inverse.
    dans le sens des aiguilles d'une montre et un nombre négatif dans le sens inverse. L'argument "max_motor_torque" permet de limiter la vitesse de rotation afin de ne pas avoir un moteur en perpétuelle accélération et de limiter l'influence que peut avoir une collision sur la rotation.
    peut avoir sur la rotation. De cette façon, vous pouvez utiliser un moteur d'articulation pour simuler la friction de l'articulation en fixant la vitesse de l'articulation à zéro et le couple maximum à une valeur faible mais significative. Le moteur essaiera d'empêcher la rotation de l'articulation, mais cédera
    à une charge importante.
  Comme pour tous les joints, si vous définissez la valeur "col" sur true, les deux instances peuvent interagir et entrer en collision l'une avec l'autre, mais seulement si elles ont des événements de collision .
    quoi qu'il arrive.
   
  Syntaxe :
  physics_joint_revolute_create(inst1, inst2, w_anchor_x, w_anchor_y, ang_min_limt, ang_max_limit, ang_limit, max_motor_torque, motor_speed, motor, col)
  
    
      
        Arguments
        Description
      
      
        inst1
        La première instance à se connecter avec l'articulation
      
      
        inst2
        La deuxième instance pour se connecter avec le joint
      
      
        w_anchor_x
        La coordonnée x de l'articulation, dans l'univers du jeu.
      
      
        w_anchor_y
        La coordonnée y de l'articulation, dans l'univers du jeu.
      
      
        ang_min_limit
        La limite inférieure autorisée pour l'angle du joint
      
      
        ang_max_limit
        La limite supérieure autorisée pour l'angle du joint
      
      
        ang_limit
        Si l'on veut limiter l'angle de l'articulation (vrai) ou non (faux).
      
      
        couple_moteur_maximal
        Définit le couple moteur maximal utilisé pour atteindre la vitesse moteur souhaitée (en Newtons par mètre).
      
      
        vitesse du moteur
        C'est la vitesse à laquelle le moteur doit tourner.
      
      
        moteur
        Si le moteur doit être actif (true) ou non (false).
      
      
        col
        Si les deux instances peuvent entrer en collision (vrai) ou non (faux).
      
    
  
   
  Les retours :
  Nombre entier (indice de l'articulation)
   
  Exemple :
  var mainFixture, o_id ; mainFixture = physics_fixture_create() ; physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2) ; o_id=instance_create_layer(x+25, y, "Instances", obj_Door) ; physics_fixture_bind(mainFixture,
    id) ; physics_fixture_bind(mainFixture, o_id) ; physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 0, 0, 0, 0) ; physics_fixture_delete(mainFixture) ;
  
  Le code ci-dessus crée et définit un nouveau dispositif et crée ensuite une instance de "obj_Door", liant le dispositif créé aux deux nouveaux objets. Ils sont ensuite reliés par un joint tournant sans moteur et les angles sont limités à une oscillation de +/- 90 degrés.
    de +/- 90 degrés. Enfin, le dispositif est supprimé car il n'est plus nécessaire.
   
   
   
  
    
      
        Dos : Articulations
        Suivant : physics_joint_prismatic_create
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

