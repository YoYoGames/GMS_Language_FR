
  
  os_get_info
  Cette fonction renvoie un Carte DS contenant des informations détaillées sur le système d'exploitation sur lequel le jeu est exécuté. Les informations exactes renvoyées dépendent du système d'exploitation et du périphérique.
    de tester cette fonction sur toutes les plates-formes que vous souhaitez cibler et d'afficher les valeurs retournées à l'aide d'une fonction comme show_debug_message(). Notez que la carte DS n'est pas
    automatiquement effacée de la mémoire et vous devez utiliser la fonction ds_map_destroy() lorsque vous n'avez plus besoin des données qu'elle contient.
  Vous trouverez ci-dessous quelques détails sur les données supplémentaires qui seront mises à la disposition de la carte DS pour les plateformes suivantes. Il convient de noter que sur toutes les plateformes, à l'exception de HTML5, la carte aura la clé " ".is64bit
    qui sera soit true, soit false, selon que le système d'exploitation de la plate-forme est 64 bits ou non.

  
   
  Windows / UWP
  
    Sur Windows Desktop et Windows UWP, vous obtiendrez quelques données supplémentaires de DX11 avec les touches suivantes disponibles dans la carte DS (utiles pour les extensions) :
    
      video_d3d11_device - pointeur vers le périphérique DX11
      video_d3d11_context - pointeur vers le contexte DX11
      video_adapter_vendorid - chaîne contenant l'identifiant du fournisseur de l'adaptateur.
      video_adapter_deviceid - chaîne de caractères contenant l'identifiant de l'adaptateur.
      video_adapter_subsysid - chaîne de caractères contenant l'identifiant du sous-système de l'adaptateur.
      video_adapter_revision - chaîne avec le numéro de révision de l'adaptateur
      video_adapter_dedicatedvideomemory - Chaîne de caractères indiquant la taille de la mémoire vidéo.
      video_adapter_dedicatedsystemmemory - chaîne de caractères indiquant la taille de la mémoire système (utilisée par l'adaptateur DX11).
    
     
  
  Android
  
    Sur la plateforme Android vous obtiendrez des données supplémentaires provenant de différentes API avec les clés suivantes disponibles dans la carte DS :
    
      android_tv - ceci retournera true si le dispositif est détecté comme étant un dispositif Android TV, ou false autrement
      GL_VERSION - la version d'OpenGL telle que rapportée par le pilote.
      GL_VENDOR - le fournisseur d'OpenGL tel que rapporté par le pilote.
      GL_RENDERER - le moteur de rendu d'OpenGL tel que signalé par le pilote.
      GL_EXTENSIONS - les extensions d'OpenGL qui sont disponibles, telles que signalées par le pilote.
      GL_SHADING_LANGUAGE_VERSION: version du GLSL prise en charge par ce pilote OpenGL.
      GL_MAX_TEXTURE_SIZE: taille maximale de la texture prise en charge par ce pilote OpenGL.
      SDK_INT - valeur de android.os.Build.VERSION.SDK_INT ; voir ici pour plus d'informations.
      RELEASE - Valeur de android.os.Build.VERSION.RELEASE ; voir ici pour plus d'informations.
      MODEL - valeur de android.os.Build.MODEL ; voir ici pour plus d'informations.
      DEVICE - Valeur de android.os.Build.DEVICE ; voir ici pour plus d'informations.
      MANUFACTURER - Valeur de android.os.Build.MANUFACTURER ; voir ici pour plus d'informations.
      CPU_ABI - Valeur de android.os.Build.CPU_ABI ; voir ici pour plus d'informations.
      CPU_ABI2 - Valeur de android.os.Build.CPU_ABI2 ; voir ici pour plus d'informations.
      BOOTLOADER - Valeur de android.os.Build.BOOTLOADER ; voir ici pour plus d'informations.
      BOARD - Valeur de android.os.Build.BOARD ; voir ici pour plus d'informations.
      VERSION - valeur de os.version issue de la méthode Android System.getProperty 
      REGION - valeurs de user.region issues de la méthode Android System.getProperty 
      VERSION_NAME - valeur du nom de la version de ce paquet - voir ici pour plus d'informations.
      PHYSICAL_KEYBOARD - si nous pensons qu'un clavier physique est disponible, alors la chaîne "TRUE" sinon "FALSE".
    
     
  
   
  Syntaxe :
  os_get_info()
   
  Les retours :
  Réel (index ds_map)
   
  Exemple :
  if (os_type == os_android) { var _info = os_get_info() ;      if (_info[ ? "android_tv"]) { global.android_tv = true ; }  }
  Le code ci-dessus vérifie si le système d'exploitation actuel est Android, obtient les informations sur le système d'exploitation et lit la carte retournée pour vérifier si le jeu fonctionne sur une TV Android. Dans ce cas, il définit une variable globale à true.
   
   
  
    
      
        Retour : Système d'exploitation et compilateur
        Suivant : os_powersave_enable
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

