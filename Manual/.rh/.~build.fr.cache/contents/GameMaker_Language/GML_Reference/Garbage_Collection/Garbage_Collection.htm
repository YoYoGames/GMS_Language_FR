 Collecte des ordures Le Garbage Collector GameMaker Studio 2 existe parce que les méthodes peuvent être passées sur la pile et laissées sans référence, tout comme les structures et quelques autres choses, qui à leur tour provoqueraient une fuite de mémoire si elles n'étaient pas "nettoyées" d'une manière ou d'une autre. C'est là que le ramasse-miettes entre en jeu et il fonctionnera en arrière-plan du jeu, collectant tout ce qui a été dé-référencé et maintenant une utilisation optimale de la mémoire. Lorsque nous parlons de quelque chose qui est dé-référencé, nous faisons généralement référence à toute structure ou fonction qui n'est pas connectée (cela ne doit pas nécessairement être directement, mais via une chaîne d'autres variables) à une variable globale ou une variable d'instance d'objet. Notez également que les fonctions définies dans les scripts de l'EDI ne sont pas non plus collectées, car elles sont implicitement rendues globales. REMARQUE: veuillez noter que des éléments tels que les surfaces, les structures de données, les tampons et autres ressources dynamiques ne sont pas récupérés et ont leurs propres destroy fonctions pour nettoyer la mémoire qui leur est associée. En règle générale, si quelque chose que vous créez au moment de l'exécution a un destroy fonction, il ne sera pas ramassé et vous devrez le gérer vous-même dans le code. Les exceptions à cela sont les séquences, les courbes d'animation et les instances, qui nécessitent également le ramasse-miettes, mais doivent quand même avoir leur fonction de destruction appelée. Le ramasse-miettes GameMaker Studio 2 est "générationnel". Cela signifie que, afin de réduire le travail qui doit être fait à chaque image, les objets sont divisés en «générations». De nouveaux objets sont créés à la génération 0 et sont déplacés vers les générations plus anciennes au fur et à mesure qu'ils vieillissent. L'idée générale est que les objets qui traînent pendant un certain temps n'ont pas besoin d'être testés en permanence pour voir s'ils doivent être supprimés, mais peuvent être vérifiés moins fréquemment (notez que «objets» ici fait référence à tout ce qui peut être ramassé et pas des instances d'objet générales telles que définies dans le navigateur d'actifs). Notez que bien que le système de vérification soit générationnel, les vérifications réelles sont effectuées de manière "incrémentielle", de sorte qu'au lieu d'effacer potentiellement des milliers d'objets d'une génération dans une seule trame - provoquant une forte augmentation de l'utilisation du processeur et affectant potentiellement le gameplay - chaque génération sera vérifiée et si nécessaire, le nettoyage sera réparti sur plusieurs images afin que le ramasse-miettes s'exécute plus fréquemment mais travaille moins sur chaque image qu'il collecte (vous pouvez définir le temps cible que le ramasse-miettes doit consacrer à chaque image en utilisant la fonction gc_target_frame_time() ). En général, vous ne devriez jamais avoir besoin d'interagir avec le GameMaker Studio 2 et normalement les résultats de son opération ne sont pas visibles, mais certaines GML sont disponibles pour obtenir des informations sur ce que fait le collecteur et pour influencer son comportement à un degré limité.. IMPORTANT! Notez que sur la plate-forme cible HTML5, le garbage collection est géré par le moteur JavaScript et par conséquent aucune des fonctions répertoriées ci-dessous n'affectera son fonctionnement et la fonction gc_get_stats() renvoie 0 pour tous les champs. gc_enablegc_is_enabledgc_collect gc_target_frame_time gc_get_target_frame_timegc_get_stats Pour vous aider à décider de ce qui doit être récupéré et quand vous avez également quelques fonctions qui peuvent être utilisées pour créer et vérifier des références faibles aux structures. Une référence faible est une référence qui ne protège pas l'objet référencé de la collecte par un garbage collector, et peut donc être utilisée pour vérifier si une structure est toujours "vivante" (référencée) ou pas quelque part dans le jeu. Les fonctions disponibles pour un référencement faible sont: weak_ref_createweak_ref_aliveweak_ref_any_alive Retour: Référence GML Suivant: Fonctions variables © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

