
  
  Gestionnaire d'exceptions non gérées
  Cette fonction d'exécution peut être utilisée pour "reprendre" le message d'erreur par défaut de GameMaker Studio 2 lorsqu'une exception d'exécution se produit. Vous fournissez une méthode ou une fonction qui est appelée lorsque l'exception se produit, et son premier argument sera une structure
    contenant des informations sur l'exception. Cette structure a le format suivant :
  { message : "", // une chaîne qui est un message court pour cette exception longMessage : "", // une chaîne qui est un message plus long pour cette exception script : "", // une chaîne qui décrit l'origine de l'exception
    qui décrit l'endroit d'où provient l'exception line : 0, // un réel qui est le numéro de ligne d'où provient l'exception stacktrace : [ "", "" ], // un tableau de chaînes qui est la trame de la pile où l'exception a été générée
    a été générée }
  
  Vous pouvez également fournir undefined comme argument, ce qui supprimera le gestionnaire d'exception personnalisé (s'il est défini) et rétablira le message d'erreur par défaut de GameMaker Studio 2.
  Cette fonction renvoie la méthode de traitement des exceptions précédemment définie, mais si elle n'a jamais été modifiée ou si elle a été réinitialisée à l'aide de undefined, elle renvoie simplement undefined.
  Si vous passez une méthode à cette fonction, aucun message d'erreur ne sera affiché à l'utilisateur et vous serez autorisé à gérer l'exception vous-même. Cependant, vous ne pouvez pas utiliser cette fonction pour "sortir" de l'exception et continuer votre jeu, car le jeu se fermera toujours après l'appel du gestionnaire d'exception.
    sera toujours fermé après l'appel du gestionnaire d'exception.
  Notez que le contexte d'exécution de la méthode ne se trouve pas dans un événement et qu'il est donc très peu probable que quelque chose puisse être rendu à l'écran à ce moment-là. En général, la chose la plus sûre à faire à ce stade est de sauvegarder un fichier contenant les informations relatives au contexte de l'exception.
    afin qu'il puisse être, par exemple, analysé et traité lors de la prochaine exécution du jeu, puis traité.
  Notez que si vous utilisez l'instruction return dans la méthode fournie, la valeur donnée sera convertie en un nombre entier et utilisée comme code de sortie du programme d'exécution.
   
  Syntaxe :
  exception_unhandled_handler(user_handler) ;
  
    
      
        Arguments
        Description
      
      
        utilisateur_handler
        La méthode (fonction définie par l'utilisateur) à utiliser comme gestionnaire d'exception, ou undefined pour la réinitialiser par défaut.
      
    
  
   
  Les retours :
  Méthode (ou indéfinie)
   
  Exemple :
  exception_unhandled_handler(function(ex)) {
     show_debug_message( "--------------------------------------------------------------") ; show_debug_message( "Unhandled exception " + string(ex) ) ; show_debug_message( "--------------------------------------------------------------") ; if file_exists("crash.txt") file_delete("crash.txt") ; var _f = file_text_open_write("crash.txt") ; file_text_write_string(_f, string(ex)) ; file_text_close(_f) ;
     return 0 ; }
     )
  
  Le code ci-dessus créera une méthode de gestion des exceptions et l'utilisera pour enregistrer un fichier contenant les données de l'exception.
   
   
   
  
    
      
        Retour : Débogage
        Suivant : get_integer
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

