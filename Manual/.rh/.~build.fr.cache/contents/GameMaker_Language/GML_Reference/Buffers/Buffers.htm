
  
  Tampons
  Une mémoire tampon est une région de la mémoire physique utilisée pour contenir temporairement des données pendant qu'elles sont déplacées d'un endroit à un autre ou manipulées d'une manière ou d'une autre, par exemple vous pouvez utiliser une mémoire tampon pour contenir des paquets de données en attente de transmission sur un réseau ou pour stocker un paquet reçu sur un réseau.
    un paquet qui a été reçu sur un réseau. GameMaker Studio 2 dispose d'un certain nombre de fonctions spécifiques liées à la création, à la modification et au chargement/à la sauvegarde des tampons, mais avant de les utiliser, veuillez noter les points suivants :
  
    Lorsqu'un tampon est créé, il est automatiquement effacé et rempli à 0.
    L'argument "size" des fonctions de tampon fait toujours référence à la taille en octets du tampon.
    L'argument "Alignement" fait référence à la façon dont les données sont stockées dans un tampon. Si votre alignement est fixé à 4, par exemple, et que vous écrivez une seule donnée d'un octet, puis effectuez un buffer_tell, vous obtiendrez un décalage de 1. Cependant, si vous écrivez une autre donnée, d'un octet également, puis effectuez un buffer_tell, vous obtiendrez un décalage de 5,
      si vous écrivez une autre donnée, également d'un octet, et que vous faites un buffer_tell, vous obtiendrez un décalage de 5 car l'alignement a "rembourré" les données à cette taille. L'alignement n'affecte que l 'endroit où les données sont écrites.
      vous faites un buffer_tell après avoir écrit quelque chose, il retournera la position d'écriture actuelle qui suit immédiatement les données que vous avez écrites. Notez cependant que si vous écrivez ensuite une autre donnée, le tampon déplacera en interne la position d'écriture vers le multiple suivant de la position d'écriture.
      la position d'écriture au multiple suivant de la taille d'alignement avant d'écrire réellement la donnée.
    Lorsqu'on parle de "décalage", il s'agit de la valeur en octets pour décaler les données dans le tampon donné. Ainsi, si votre tampon est aligné sur 2 octets et que vous voulez sauter les 4 premiers emplacements alignés, vous aurez un décalage de 2 * 4 octets.
    Certaines des fonctions de tampon créent également un nouveau tampon (comme buffer_load par exemple). N'oubliez pas que ces tampons devront également être supprimés de la mémoire lorsqu'ils ne sont pas utilisés à l'aide de la fonction buffer_delete.
    La mémoire utilisée pour la création des tampons est la mémoire système. Ainsi, même lorsque le jeu n'est pas au centre de l'attention, toutes les données stockées dans un tampon sont en sécurité.
  
  Les pages suivantes expliquent le fonctionnement des tampons dans le contexte de GameMaker Studio 2 et contiennent quelques exemples de code pour les utilisateurs qui ne savent pas comment les utiliser :
  
    Utilisation des tampons
  
  IMPORTANT ! Lorsque vous créez un tampon, la valeur d'index utilisée pour l'identifier est une valeur entière commençant à 0. Ces index sont réutilisés par GameMaker, ainsi une valeur d'index de tampon détruite peut être utilisée par un tampon nouvellement créé par la suite,
    Nous vous recommandons donc de donner la valeur -1 à toute variable contenant un index de tampon après avoir détruit le tampon.
  Les fonctions suivantes existent pour que vous puissiez les utiliser avec les tampons binaires dans vos jeux :
  
    tampon_existant
    création d'un tampon
    création d'un tampon à partir d'un tampon_vertex
    tampon_créer_à partir de_vertex_buffer_ext
    tampon_suppression
    buffer_read
    buffer_write
    remplissage de la mémoire tampon
    recherche de tampon
    buffer_tell
    buffer_peek
    tampon_poke
    Sauvegarde de la mémoire tampon
    tampon_save_ext
    buffer_save_async
    Chargement de la mémoire tampon
    buffer_load_ext
    buffer_load_async
    Chargement partiel de la mémoire tampon
    tampon_compressé
    tampon_décompression
    tampon_async_groupe_début
    option_groupe_asynchrone_tampon
    buffer_async_group_end
    buffer_copy
    buffer_copy_from_vertex_buffer
    tampon_get_type
    tampon_get_alignement
    tampon_get_adresse
    tampon_get_taille
    tampon_get_surface
    tampon_set_surface
    redimensionnement du tampon
    Taille de la mémoire tampon
    tampon_md5
    tampon_sha1
    buffer_crc32
    tampon_base64_encode
    buffer_base64_decode
    tampon_base64_decode_ext
    buffer_set_used_size
  
   
  Il existe également deux fonctions supplémentaires liées aux tampons qui peuvent être utilisées pour sauvegarder et charger des états de jeu (notez qu'elles nécessitent qu'un tampon ait été créé auparavant) :
   
  
    tampon de chargement de jeu
    tampon_sauvegarde_jeu
  
   
  Enfin, vous pouvez également utiliser des Vertex Buffers spéciaux pour créer vos propres primitives ou modèles personnalisés, etc... Vous pouvez en savoir plus à ce sujet dans la section suivante du manuel :
   
  
    Bâtiment primitif
  
   
   
   
  
    
      
        Retour : RéférenceGML
        Suivant : UWP et XBox Live
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

