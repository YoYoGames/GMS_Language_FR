
  
  Caméras et miradors
  Lorsque vous créez des pièces dans GameMaker Studio 2, vous devez configurer différents ports de vue et/ou caméras pour contrôler ce qui est affiché au joueur. Les ports d'observation sont, en fait, de petites fenêtres dans votre univers de jeu qui vous permettent de montrer au joueur des parties de la pièce, à l'échelle ou à l'échelle 1:1.
    au joueur des parties d'une pièce, à l'échelle ou à l'échelle 1:1. Ils sont donc essentiels lorsque votre pièce est plus grande que la taille de l'écran. Les caméras définissent exactement ce qui sera affiché dans chaque port de vue.
  GameMaker Studio 2 vous permet de disposer de 8 ports de vue indépendants (numérotés de 0 à 7) et d'un nombre illimité de caméras, dont seulement 8 peuvent être actives à tout moment - une assignée à chacun des ports disponibles - bien que normalement vous n'ayez besoin que d'un ou deux ports de vue.
    normalement qu'un ou deux ports de visualisation. Les caméras peuvent montrer différentes parties de la même pièce et peuvent être activées et désactivées ainsi qu'assignées à des ports de vue à tout moment, ce qui signifie que vous pouvez utiliser des caméras pour dessiner des éléments HUD ou pour avoir des effets d'écran partagé,
    ou pour créer des cut-scenes par exemple. Essentiellement, vous positionnez une caméra dans une pièce et définissez la "vue" (zone) de la pièce qui sera visible pour elle, puis cette vue est dessinée sur un port de vue - notez que le port de vue peut être
    Cette vue est ensuite dessinée sur un port d'observation - notez que le port d'observation peut avoir une taille différente de celle de la vue de la caméra et que vous pouvez déformer et mettre à l'échelle la vue de la caméra si elle a une taille différente de 1:1 avec le port d'observation.
  IMPORTANT ! Il est facile de s'embrouiller lorsqu'on parle de caméras, de vues et de hublots, alors pour clarifier les choses :
  
    La caméra: Un point dans la pièce qui sera utilisé pour définir la façon dont la pièce est affichée - généralement avec la position, l'orientation, le champ de vision et le rapport d'aspect.
    La vue: Ce que la caméra voit, en fonction de la position, de la projection et de la rotation de la caméra.
    Le port de vue: la zone de l'écran où la vue de la caméra sera affichée.
  
  Si vous ajoutez des caméras par le biais de l'éditeur de salle, vous pouvez récupérer leur valeur d 'identification à l'aide de la variable view_camera. Vous pouvez ensuite manipuler la vue à l'aide des fonctions ci-dessous et vous pouvez même détruire les caméras par défaut si nécessaire, bien que vous deviez affecter une nouvelle caméra à la vue, sinon vous obtiendrez un comportement très imprévisible.
    comportement très imprévisible. Les caméras ajoutées à un port de vue dans l'éditeur de salle ont une portée globale, ce qui signifie qu'elles sont créées une fois lorsque vous démarrez le jeu, puis lorsque vous entrez dans chaque salle, elles sont réglées sur les valeurs définies dans l'éditeur de salle,
    Ainsi, si vous détruisez une caméra par défaut dans une pièce, elle cessera d'exister dans toutes les pièces.
  Il convient de noter que la surface totale de la boîte englobante de tous les ports de vue actifs dans la première pièce du jeu définit la taille du canevas d'arrière-plan (ou la taille de la fenêtre sous macOS, Ubuntu(Linux) et Windows).
   Windows), et toutes les zones qui ne sont pas couvertes par un port de vue seront dessinées par défaut en utilisant la couleur de la fenêtre, comme le montre l'image ci-dessous :
  
  REMARQUE: Par défaut, vous devez sélectionner "Clear Display Buffer" dans l'éditeur de salle pour que la couleur soit affichée, et vous ne pouvez définir la couleur qu'en utilisant la fonction window_set_colour (). Si vous n'utilisez pas cette fonction, la fenêtre sera noire par défaut.
    par défaut le noir.
  Vous devez faire attention lorsque vous utilisez plusieurs caméras, car l'événement draw pour toutes les instances est appelé une fois pour chaque vue visible, donc si vous avez trois vues de caméra actives dans une pièce, l'événement draw sera exécuté trois fois à chaque étape (ce qui fait trois fois le travail).
    Donc, si vous avez trois vues de caméra actives dans une pièce, l'événement de dessin sera exécuté trois fois à chaque étape (en fait, il fera trois fois le travail), ce qui peut être une cause de ralentissement si le jeu est grand ou complexe. La variable view_current peut être utilisée pour limiter ces appels au dessin en vérifiant quelle vue est dessinée et en ne dessinant que les éléments qui sont spécifiques à un port de vue donné.
    à un port de vue donné. Faites également attention lorsque vous créez vos propres caméras, car si vous en créez une dans une pièce et que vous ne la supprimez pas à l'aide de la fonction camera_destroy() vous pouvez obtenir une fuite de mémoire.
  Vous trouverez une vue d'ensemble de toutes les fonctions disponibles dans les différentes sections ci-dessous, mais il convient de noter que certaines de ces fonctions nécessitent la mise en place et l'utilisation de différentes matrices, vous pouvez donc consulter la section du manuel
    pour les fonctions matricielles. Notez également qu'il existe quelques fonctions de salle qui peuvent être utilisées pour obtenir et définir des caméras et des valeurs de port de vue dans des salles autres que la salle actuelle (voir la section sur les salles).
  
  Les fonctions suivantes peuvent être utilisées pour créer et détruire des caméras :
   
  
    caméra_créer
    caméra_créer_vue
    camera_destroy
    camera_apply
  
   
  Il existe également un certain nombre de fonctions permettant de régler et d'obtenir des informations sur la caméra :
   
  
    camera_set_view_mat
    camera_set_proj_mat
    camera_set_update_script
    camera_set_begin_script
    camera_set_end_script
    camera_set_view_pos
    camera_set_view_size
    camera_set_view_speed
    camera_set_view_border
    camera_set_view_angle
    camera_set_view_target
    camera_set_default
    camera_get_view_mat
    camera_get_proj_mat
    caméra_get_update_script
    camera_get_begin_script
    camera_get_end_script
    caméra_get_view_x
    caméra_get_view_y
    caméra_get_view_width
    caméra_get_view_height
    camera_get_view_speed_x
    caméra_get_view_speed_y
    camera_get_view_border_x
    camera_get_view_border_y
    camera_get_view_angle
    camera_get_view_target
    camera_get_default
    caméra_get_active
  
   
  Lorsque vous travaillez avec des caméras, vous devez les affecter à un port de vue pour qu'elles soient "actives" et affichent quelque chose. Ces ports de vue sont numérotés de 0 à 7 et peuvent être modifiés et positionnés à l'aide de différents tableaux de variables et de fonctions.
    Vous pouvez également vérifier lequel est en train de dessiner ou quelle caméra y est actuellement attachée.
  Les variables intégrées à la portée globale suivantes sont disponibles :
   
  
    vue_caméra
    vue_courante
    vue_activée
    vue_visible
    vue_exportation
    vue_yport
    vue_wport
    vue_hport
    view_surface_id
  
   
  Il existe également les fonctions suivantes pour traiter les ports de vue :
   
  
    vue_get_caméra
    vue_get_visible
    vue_get_xport
    vue_get_yport
    view_get_wport
    vue_get_hport
    view_get_surface_id
    view_set_camera
    view_set_visible
    vue_set_export
    vue_set_yport
    vue_set_wport
    vue_set_hport
    view_set_surface_id
  
   
   
   
  
    
      
        Retour : Appareils photo et écran
        Suivant : La fenêtre de jeu
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

