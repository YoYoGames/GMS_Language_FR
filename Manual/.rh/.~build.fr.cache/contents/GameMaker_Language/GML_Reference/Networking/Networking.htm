
  
  Mise en réseau
  Les fonctions de mise en réseau de GameMaker Studio 2 sont basées sur les sockets, qui constituent une norme industrielle sur toutes les plates-formes. Avec les sockets, vous avez la possibilité de créer des clients et des serveurs à l'aide d'un simple GML, ce qui vous permet de créer même un jeu à un seul joueur en utilisant le modèle client/serveur (ce qui permettra d'ajouter facilement le multijoueur plus tard).
    joueur en utilisant le modèle client/serveur (ce qui permettra d'ajouter facilement le multijoueur par la suite).
  Fondamentalement, un socket est un objet qui peut envoyer, recevoir, se connecter et écouter des ports sur le réseau. Ces fonctions traitent uniquement les connexions TCP/IP, sur lesquelles Internet est basé (IPv4 pour être plus précis). En substance, cela vous permet de
    connecter un socket utilisant une adresse IP (disons 192.168.1.10) à un autre socket sur une autre adresse IP (disons 192.168.1.11). Une fois connectées, ces deux sockets peuvent envoyer des données dans les deux sens à l'aide des fonctions network_send_* (par exemple réseau_send_packet())
    et l'événement asynchrone dédié qui est déclenché par celles-ci. Cet événement asynchrone génère une carte DS contenant les données reçues ainsi que d'autres détails, et vous pouvez trouver tous les détails
    dans la section sur l'événement asynchrone réseau.
  Au lieu que les programmes aient à lire et à traiter chaque partie du trafic réseau entrant dans une machine, les adresses IP traitent également les ports, qui sont numérotés de 0 à 65535. Cela permet à chaque programme de ne recevoir que les paquets de données qui l'intéressent.
    et non pas tout ce qui a été envoyé par chaque programme. Cela permet également de gagner un temps considérable sur le processeur, car cela réduit considérablement le traitement des données. Avec GameMaker Studio 2, vous pouvez donc également "écouter" les ports. Ainsi, un serveur créera un socket, puis le liera à un port spécifique afin d'écouter les ports.
    l'associer à un port spécifique à écouter. Il sera alors informé des connexions, déconnexions et transferts de données à partir de ce socket.
  Les "paquets" de données sont eux-mêmes constitués de données binaires extraites d'un tampon. Ce tampon peut être créé et manipulé à l'aide des fonctions Buffer de GameMaker Studio 2.
  Il convient de noter que si vous créez un projet pour la cible HTML5, vous ne pourrez pas utiliser les fonctions de création de serveur en raison des restrictions du navigateur et devrez écrire votre propre serveur pour cette plateforme en utilisant quelque chose comme Electron ou
   NodeJS. Notez également que si votre jeu est multiplateforme et que vous prévoyez de vous connecter à une instance HTML5 du jeu à partir d'un serveur fonctionnant sur un appareil mobile ou de bureau, votre serveur peut uniquement communiquer avec l'instance HTML5
    en utilisant le protocole Web Socket (cela se fait à l'aide de la constante network_socket_ws - cf. network_create_server() pour plus d'informations). Cela signifie que votre serveur devra peut-être créer deux sockets
    sur des ports différents, l'un pour se connecter aux cibles non HTML5(Android, Windows, etc...) et l'autre pour se connecter à la cible HTML5.
  Les fonctions suivantes peuvent être utilisées pour la mise en réseau :
   
  
    réseau_créer_serveur
    réseau_créer_serveur_raw
    réseau_créer_socket
    réseau_créer_socket_ext
    réseau_connect
    réseau_connexion_asynchrone
    réseau_connexion_raw
    réseau_connect_async_raw
    résolution de réseau
    réseau_set_config
    réseau_set_timeout
    réseau_send_broadcast
    réseau_envoi_paquet
    réseau_send_raw
    réseau_send_udp
    réseau_send_udp_raw
    réseau_destruction
  
   
   
   
  
    
      
        Retour : RéférenceGML
        Suivant : Web
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

