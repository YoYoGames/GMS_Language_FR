




  
  point_produit
  Le produit scalaire est une valeur exprimant la relation angulaire entre deux vecteurs. On le trouve en prenant deux vecteurs, en les multipliant et en additionnant les résultats. Le nom "produit scalaire" est dérivé du point centré "-" qui est souvent utilisé pour désigner cette opération.
    centré qui est souvent utilisé pour désigner cette opération (l'appellation alternative "produit scalaire" souligne la nature scalaire plutôt que vectorielle du résultat).
  La formule mathématique réelle peut être écrite comme suit :
  
  Ainsi, en 2D, le produit scalaire des vecteurs a[x1,y1] et b[x2,2] est x1x2 + y1y2, ce qui signifie que le produit scalaire dans GameMaker Studio 2 est calculé comme suit :
  a - b = (x1*x2)+(y1*y2) ;
  Ce qui est curieux avec le produit scalaire, c'est la relation qu'il a avec l'angle formé par les vecteurs d'entrée qui peut être exprimé comme suit :
  a - b = (longueur de a) * (longueur de b) * cos(angle)
  C'est-à-dire que le produit scalaire de deux vecteurs sera égal au cosinus de l'angle entre ces vecteurs, multiplié par la longueur de chacun d'eux. Voici une image pour l'illustrer :
  
  NOTE: Pour plus d'informations sur les vecteurs, voir ici.
  Il y a quelques éléments que nous pouvons maintenant affirmer à partir de deux vecteurs quelconques en relation avec le résultat de leur produit scalaire :
  
    Si a et b sont perpendiculaires (à 90 degrés l'un par rapport à l'autre), le résultat du produit scalaire sera égal à zéro, car cos(ang) sera égal à zéro.
    Si l'angle entre a et b est inférieur à 90 degrés, le produit scalaire sera positif (supérieur à zéro), car cos(ang) sera positif.
    Si l'angle entre a et b est supérieur à 90 degrés, le produit scalaire sera négatif (inférieur à zéro), car cos(ang) sera négatif.
  
  Qu'est-ce que cela signifie pour ceux d'entre nous qui créent des jeux ? Eh bien, cette relation mathématique peut être utilisée dans de nombreuses circonstances, mais la meilleure façon de s'en rendre compte est de construire un scénario réel et de voir par vous-même ce qui se passe. L'une des façons les plus simples
    L'une des façons les plus simples de le faire est de générer une simple vérification de la "ligne de vue" d'un ennemi dans un jeu de plates-formes, par exemple, afin que l'ennemi "voie" le joueur s'il se trouve à 90° de part et d'autre de sa normale vectorielle.
  En gros, nous devons obtenir le vecteur normal de l'ennemi (c'est-à-dire composé d'une direction et d'une distance de vue)
    et ensuite nous devons obtenir le vecteur du joueur par rapport à l'ennemi. Nous obtiendrons ensuite le produit scalaire de ces vecteurs, et si le résultat est positif, le joueur a été vu, et s'il est négatif, il ne l'a pas été. Le code réel pour que cela fonctionne est fourni
    dans l'exemple ci-dessous.
   
  Syntaxe :
  dot_product(x1, y1, x2, y2)
  
    
      
        Arguments
        Description
      
      
        x1
        La coordonnée x du premier vecteur.
      
      
        y1
        La coordonnée y du premier vecteur.
      
      
        x2
        La coordonnée x du deuxième vecteur.
      
      
        y2
        La coordonnée y du deuxième vecteur.
      
    
  
   
  Les retours :
  Real
   
  Exemple :
  var x1, y1, x2, y2 ; x1 = lengthdir_x(1, image_angle) ; y1 = lengthdir_y(1, image_angle) ; x2 = o_Player.x - x ; y2 = o_Player.y - y ; if dot_product(x1, y1, x2, y2) > 0 seen=true else seen=false ;
  Le code ci-dessus crée un vecteur en utilisant l'angle de l'image de l'instance, puis il obtient le vecteur de l'objet joueur "o_Player" à lui-même. Enfin, il calcule le produit scalaire de ces deux vecteurs et s'il est supérieur à 0, il met la variable "seen" à true.
    "seen" à true, et si elle est égale ou inférieure à 0, elle la met à "false".
   
   
   
  
    
      
        Retour : Angles et distances
        Suivant : dot_product_3d
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

