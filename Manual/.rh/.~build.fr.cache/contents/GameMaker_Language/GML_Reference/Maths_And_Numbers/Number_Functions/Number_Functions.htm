 Fonctions numériques Les nombres réels dans GameMaker Studio 2 sont considérés comme des nombres à virgule flottante double précision - c'est-à-dire qu'ils ont un point décimal en eux sans nombre fixe de chiffres avant ou après le point - ou des entiers - c'est-à-dire qu'ils sont nombres entiers sans valeur de virgule décimale. 2, par exemple, est un entier mais 2,01 est un réel à virgule flottante. REMARQUE: sur la cible HTML5, tous les nombres réels sont des doubles. Cette distinction entre les nombres entiers et les nombres flottants est très importante lorsqu'il s'agit de développement multiplateforme car la précision des calculs effectués sur un PC Windows n'est pas la même que la précision de ces mêmes calculs lorsqu'ils sont effectués sur un appareil mobile. Cela signifie que vous devez porter une attention particulière lorsque vous effectuez des comparaisons, par exemple:if (image_index == 1)     {     do something...     } Dans l'exemple ci-dessus, si nous avons défini le image_speed à 0,25 - par exemple - puis après quatre étapes, vous pouvez supposer que le image_index valeur serait 1, mais il peut s'agir d'une valeur telle que 1.0000002 en raison du fonctionnement des mathématiques en virgule flottante et donc l'évaluation ne sera pas true. Ces types d'erreurs peuvent être assez difficiles à déboguer et il est donc toujours bon d'en être conscient et de planifier à l'avance et d'utiliser d'autres moyens de vérifier les valeurs ou d'utiliser les fonctions de revêtement de sol ou d'arrondi appropriées (répertoriées ci-dessous) pour convertir le nombre en vérifier dans un entier (pour plus d'informations sur les mathématiques en virgule flottante et pourquoi c'est un problème, veuillez voir ici ). Par exemple, le code ci-dessus pourrait être écrit comme suit:if (floor(image_index) == 1)     {     do something...     } Il est également intéressant de noter que lors de l'utilisation des cibles du compilateur YoYo, toutes les expressions et fonctions sont évaluées de gauche à droite, tandis que sur toutes les autres plates-formes cibles, elles sont évaluées de droite à gauche, ce qui signifie que cela - par exemple - donnera des résultats différents selon Sur la plateforme:val = max(num, ++num, num++); REMARQUE: pour plus d'informations, reportez-vous à la section sur la commande d'évaluation. Vous pouvez également utiliser une fonction spéciale disponible dans GameMaker Studio 2 pour définir la valeur epsilon pour les calculs en virgule flottante. Lorsqu'un nombre réel est arrondi au nombre à virgule flottante le plus proche, l'epsilon (également connu sous le nom de "machine epsilon") forme une limite supérieure sur l'erreur relative, et vous pouvez obtenir et définir la valeur epsilon à l'aide des fonctions suivantes:math_set_epsilonmath_get_epsilon Ces fonctions traitent toutes de l'utilisation de nombres et de valeurs aléatoires: REMARQUE: lorsque vous utilisez les fonctions aléatoires, GameMaker Studio 2 conserve la même graine aléatoire à chaque fois que vous démarrez le jeu. Cela rend le débogage beaucoup plus facile car vous avez la garantie que les fonctions aléatoires renverront toujours initialement la même valeur, mais si vous ne souhaitez pas que cela se produise, vous devez d'abord définir une nouvelle graine aléatoire au tout début du jeu, soit en utilisant randomise ( ) ou random_set_seed (). chooserandomrandom_rangeirandomirandom_rangerandom_set_seedrandom_get_seedrandomise Ce sont toutes des fonctions qui arrondiront les valeurs d'une manière ou d'une autre, ou sélectionneront une seule valeur parmi diverses valeurs données: roundfloorfracabssignceilmaxmeanmedianminlerpclamp Enfin, nous avons une collection diverse de fonctions mathématiques importantes: explnpowersqrsqrtlog2log10logn Retour: Maths et nombres Suivant: Vecteurs © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

