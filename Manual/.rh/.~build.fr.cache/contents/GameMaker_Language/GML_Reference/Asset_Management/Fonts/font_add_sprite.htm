font_add_sprite Avec cette fonction, vous pouvez utiliser une "bande de sprite" pour créer une nouvelle ressource de police, où chaque sous-image serait un symbole ou une lettre individuelle. L'index est le numéro de carte UTF8 pour le premier caractère à utiliser et les plages à utiliser sont les mêmes que vous le feriez pour une police normale, commençant par "!" mais rappelez-vous que vous ne devez inclure que ce dont vous avez besoin et que vous devez utiliser le ord() pour obtenir la valeur UTF8 correcte de la lettre de départ. La police de sprite créée aura alors les sous-images définies sur un glyphe individuel de la police, où le "premier" glyphe aura l'image_index de 0. Vous pouvez définir "espace" comme étant n'importe quel caractère que vous voulez, par exemple un seul line la taille que vous voulez que l'espace soit, et tous les espaces dans le texte seront rendus à cette largeur (mais l'image choisie ne sera jamais rendue), ou si vous ne fournissez pas de sprite pour l'espace, alors la largeur du plus large le caractère de la police sprite sera utilisé à la place. Vous pouvez également définir l'espacement de la police pour qu'il soit proportionnel (true ) ou non (false ), où une police proportionnelle est espacée en fonction de la largeur réelle des lettres (la lettre «i» prend donc moins de place que la lettre «w», par exemple) tandis qu'une police non proportionnelle sera espacée en fonction du sous- largeur de l'image, comme une police à espacement fixe. Enfin, vous pouvez définir l'espace à laisser entre chaque lettre lors de l'écriture, et cela peut être n'importe quelle valeur entière, 0 étant sans espace (les lettres "toucheront" si elles sont proportionnelles). La fonction renvoie une valeur d'index qui doit être stockée dans une variable car elle sera nécessaire dans tous les autres codes faisant référence à cette police, ou elle retournera -1 si la fonction échoue pour une raison quelconque. Il convient également de noter qu'il ne peut y avoir d' espaces dans la table de caractères, de sorte que si vous, par exemple, utilisez '. et '0' mais pas '/', vous devez quand même inclure '/' ou laisser une sous-image vide entre les deux caractères utilisés. Le sprite lui-même peut être un élément de sprite à partir du navigateur de ressources ou chargé à partir d'un fichier à l'aide de sprite_add d'abord pour obtenir l'index du sprite chargé (qui est ensuite utilisé dans la fonction). Il est important de noter que pour les fonctions d'alignement des polices (comme draw_set_halign() ) pour fonctionner comme prévu lors de l'utilisation d'une police de sprite, le sprite doit avoir son origine définie dans le coin supérieur gauche. Si vous utilisez d'autres valeurs, vous devrez prendre en compte le décalage d'origine lors du dessin du texte à l'aide de la police. REMARQUE: lorsque vous chargez une police dans GameMaker Studio 2 vous devez vous rappeler de la supprimer à nouveau (avec font_delete () ) lorsqu'elle n'est plus nécessaire, sinon il y a un risque de fuite de mémoire qui ralentira et finira par planter votre jeu. Syntaxe:font_add_sprite(spr, first, prop, sep); Argument Description spr Le sprite sur lequel ajouter une police. first L'index du premier caractère disponible. prop Définir comme police proportionnelle ou non. sep L'espace à laisser entre chaque lettre. Retour:Real Exemple:global.Font = font_add_sprite(spr_HUD_Font, ord("!"), true, 2); Le code ci-dessus créera un nouvel actif de police à partir d'un actif de sprite et stockera l'index de la nouvelle police dans la variable "global.Font" pour une utilisation ultérieure.  Retour: Polices Suivant:font_add_sprite_ext © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

