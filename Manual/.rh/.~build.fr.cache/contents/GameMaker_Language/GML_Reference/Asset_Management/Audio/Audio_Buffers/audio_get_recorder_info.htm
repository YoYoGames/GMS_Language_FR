
  
  audio_get_recorder_info
  Cette fonction renvoie une carte DS Map contenant des informations sur l'indice de source d'enregistrement donné. Vous pouvez savoir combien de sources d'enregistrement sont disponibles à l'aide de la fonction audio_get_recorder_count(),
    et la carte retournée contiendra les paires clé/valeur suivantes :
  
    "nom"- un nom pour décrire le dispositif.
    "index" - l'index à utiliser pour enregistrer les données.
    "data_format" - le format dans lequel les données seront renvoyées (actuellement, il s'agit toujours de buffer_s16 , mais d'autres formats pourront être pris en charge à l'avenir).
    "sample_rate" - la fréquence d'échantillonnage (en Hz) des données renvoyées (actuellement fixée à 16000hz mais cela peut changer à l'avenir).
    "channels" - la constante audio_mono (d'autres constantes pour la stéréo et la 3D pourront être prises en charge à l'avenir)
  
  Notez que si la fonction crée une carte DS pour vous, elle ne la supprime pas ultérieurement. Vous devez donc détruire vous-même la carte lorsqu'elle n'est plus nécessaire pour éviter toute fuite de mémoire.
  REMARQUE : la plupart des plates-formes , à l'exception de HTML5, prennent en charge l'enregistrement audio sous une forme ou une autre, mais cela ne signifie pas que tous les périphériques le permettront, même si la plate-forme le fait. Vous devez donc toujours vérifier que la fonction audio_get_recorder_count()    renvoie une valeur supérieure à 0 pour vérifier que les périphériques d'enregistrement sont disponibles avant d'utiliser le reste des fonctions d'enregistrement.
   
  Syntaxe :
  audio_get_recorder_info(recorder_index) ;
  
    
      
        Arguments
        Description
      
      
        enregistreur_index
        L'index de la source de l'enregistreur pour obtenir l'information.
      
    
  
   
  Les retours :
  Entier (ID de la carte DS)
   
  Exemple :
  len = async_load[ ? "data_len"] ; audio_buff = buffer_create(len, buffer_fast, 1) ; buffer_copy(async_load[ ? "buffer_id"], 0, len, buff, 0) ; audio_queue_sound(audio_queue, audio_buff, 0, len) ; audio_play_sound(audio_queue,
    10, 0) ;
  Le code ci-dessus serait appelé dans l'événement d'enregistrement audio asynchrone et attribuerait certaines données enregistrées à un tampon, qui serait ensuite ajouté à une file d'attente audio.
    Celle-ci est ensuite lue.
   
   
   
  
    
      
        Retour : Tampons audio
        Suivant : audio_create_buffer_sound
         
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

