audio_create_buffer_sound Avec cette fonction, vous pouvez créer un nouveau son à partir du contenu d'un tampon. Le tampon aura été créé précédemment (voir les fonctions de tampon pour plus de détails sur la façon de procéder), et des données y auront été ajoutées ou chargées. Vous le passez ensuite à cette fonction avec le format de données (uniquement buffer_u8 ou buffer_s16 sont actuellement pris en charge), la fréquence d'échantillonnage (qui peut être comprise entre 1000 Hz et 48 000 Hz), et un décalage dans la mémoire tampon pour obtenir les données. Vous devez également fournir le nombre d'échantillons dans le tampon et les canaux requis par le son. Ces canaux sont définis par l'une des constantes suivantes: Constant Descriptionaudio_mono Audio mono (canal unique).audio_stereo Audio stéréo (double canal).audio_3D Audio 3D (5.1). Notez qu'après avoir créé un son, vous devez libérer l'index du pointeur qui lui est associé lorsqu'il n'est plus nécessaire à l'aide de la fonction audio_free_buffer_sound(). Si vous ne parvenez pas à le faire et que vous réassignez la variable ou les vestiaires, etc., l'identifiant sonore sera perdu et vous aurez une fuite de mémoire. Notez également que vous ne pouvez pas supprimer le tampon si un son a été créé à partir de celui-ci et que le son n'a pas été libéré en premier. Vous libérez donc d'abord le son (ou les sons), puis supprimez le tampon. Il est également intéressant de noter que l'ajout de quoi que ce soit au tampon, ou la modification de la taille du tampon, après avoir créé un son à partir de celui-ci donnera des résultats inattendus et ce n'est pas recommandé - une fois que vous avez commencé à créer des sons à partir de n'importe quel tampon, vous ne devez pas manipuler de toute autre manière par la suite. Syntaxe:audio_create_buffer_sound(bufferId, bufferFormat, bufferRate, bufferOffset, bufferLength, bufferChannels); Argument Description bufferId L'ID du tampon à utiliser. bufferFormat Le format des données dans le tampon (buffer_u8 ou buffer_s16 ). bufferRate La fréquence d'échantillonnage des données dans le tampon. bufferOffset Décalage dans la mémoire tampon à partir de laquelle lire les données d'exemple (en octets). bufferLength La longueur du tampon (le nombre d'octets de données audio, à l'exclusion de l'en-tête). bufferChannels Les canaux à utiliser à partir de l'une des constantes répertoriées ci-dessous. Retour:Integer (Sound ID) Exemple:var rate = 44100; var hertz = irandom_range(220, 880); var samples = 44100; var bufferId = buffer_create(rate, buffer_fast, 1); var buffer_seek(bufferId, buffer_seek_start, 0); var num_to_write = rate / hertz; var length
    = buffer_get_size(bufferId) ; var val_to_write = 1; for (var i = 0; i < (samples / num_to_write) + 1; i++;)    {
        for (var j = 0; j < num_to_write; j++;)       {
           buffer_write(bufferId, buffer_u8, val_to_write * 255);       }
        val_to_write = (1 - val_to_write);    }
     soundId = audio_create_buffer_sound(bufferId, buffer_u8, rate, 0, length, audio_stereo); Ce qui précède crée un tampon, puis le remplit de manière procédurale avec des données. Ces données sont ensuite utilisées pour créer un nouveau son, qui est stocké dans la variable "soundId".  Arrière: Tampons audio Suivant:audio_free_buffer_sound © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

