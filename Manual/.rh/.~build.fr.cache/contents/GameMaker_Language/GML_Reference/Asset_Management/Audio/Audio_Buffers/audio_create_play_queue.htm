audio_create_play_queue Cette fonction prépare une file d'attente de tampon pour l'audio. Vous passez le format de données (uniquement buffer_u8 ou buffer_s16 sont actuellement pris en charge), la fréquence d'échantillonnage (qui peut être comprise entre 1000 Hz et 48000 Hz) et les canaux requis par l'audio à partir de l'une des constantes répertoriées ci-dessous: Constant Descriptionaudio_mono Audio mono (canal unique).audio_stereo Audio stéréo (double canal).audio_3D Audio 3D (5.1). Notez que vous devez libérer toutes les files d'attente audio créées avec cette fonction lorsqu'elles ne sont plus nécessaires pour éviter les fuites de mémoire à l'aide de la fonction audio_free_play_queue(). Cette fonction déclenchera un événement asynchrone de lecture audio lorsque la file d'attente aura atteint la fin, et dans ce cas, une carte DS spéciale sera créée dans la variable async_load avec les paires clé / valeur suivantes: " queue_id " - la file d'attente qui a fini de lire les données " buffer_id " - le tampon qui n'est plus lu à partir de " queue_shutdown " - il est mis à 0 pendant la lecture normale et à 1 lorsque l'événement est reçu car audio_free_play_queue() a été appelé. Lorsqu'il est défini sur 1, vous ne souhaitez pas mettre d'autres données en file d'attente. Syntaxe:audio_create_play_queue(queueFormat, queueRate, queueChannels); Argument Description queueFormat Le format des données de tampon à utiliser (buffer_u8 ou buffer_s16 ). queueRate La fréquence d'échantillonnage des données dans la file d'attente de la mémoire tampon. queueChannels Les canaux à utiliser à partir de l'une des constantes répertoriées ci-dessous. Retour:Real (Buffer ID) Exemple:audio_queue = audio_create_play_queue(buffer_s16, 11052, audio_mono); Le code ci-dessus crée une nouvelle file d'attente audio et attribue son ID à une variable pour référence future.  Arrière: Tampons audio Suivant:audio_free_play_queue © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

