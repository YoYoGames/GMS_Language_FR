
  
  audio_play_sound_at
  Cette fonction permet de lire n'importe quelle ressource sonore à une position donnée dans l'espace audio. Vous fournissez l'index du son, puis vous lui attribuez une position dans l'espace 3D. La position par défaut de l'écouteur est (0, 0, 0).
    n'a pas été déplacé et que vous souhaitez que le son provienne de la gauche (par exemple), vous devez définir la position x sur une valeur négative (pour plus d'informations sur la définition de la position de l'auditeur, voir audio_listener_position()).
  Vous pouvez également définir une distance de décroissance (0 rendra le son silencieux, la valeur par défaut est 100) qui fera décroître le son à mesure qu'il s'éloigne de la position de l'auditeur. La façon dont le fondu est entendu dépend de la référence du fondu (qui est la distance sous laquelle le volume de la source devrait normalement diminuer de moitié).
    sous laquelle le volume de la source devrait normalement diminuer de moitié) et du facteur d'atténuation (qui affecte le son uniquement au-delà de la distance de référence d'atténuation). Le facteur par défaut est normalement de 1, et l'effet des différentes valeurs de falloff dépendra du modèle choisi (pour un modèle complet, le facteur par défaut est de 1).
    du modèle choisi (pour un guide complet des différents modèles de falloff et de l'utilisation de ces valeurs, veuillez consulter la fonction audio_falloff_set_model()).
  Les deux derniers arguments servent à définir si le son doit être mis en boucle ou non et, enfin, à attribuer une priorité au son. Cette priorité est ensuite utilisée pour déterminer comment les sons sont traités lorsque le nombre de sons joués dépasse la limite fixée par la fonction
    audio_channel_num(). Les sons de priorité inférieure seront arrêtés en faveur des sons de priorité supérieure. La valeur de la priorité peut être un nombre réel quelconque (la valeur réelle est arbitraire et peut aller de 0 à 1 ou de 0
    à 100, car GameMaker Studio 2 leur accordera la même priorité). Notez que lorsqu'il s'agit de priorité, plus le nombre est élevé, plus la priorité est élevée, de sorte qu'un son de priorité 100 sera favorisé par rapport à un son de priorité 1.
  Cette fonction renvoie un numéro d'index unique pour le son en cours de lecture, qui peut ensuite être stocké dans une variable afin que vous puissiez le mettre en pause ou l'arrêter avec les fonctions appropriées. Cela signifie que si vous avez plusieurs instances du même son en cours de lecture, vous pouvez
    à un moment donné, vous pouvez cibler une seule instance de ce son à traiter à l'aide des fonctions audio.
   
  Syntaxe :
  audio_play_sound_at(index, x, y, z, falloff_ref, falloff_max, falloff_factor, loop, priority) ;
  
    
      
        Arguments
        Description
      
      
        indice
        L'index du son à jouer.
      
      
        x
        La position x.
      
      
        y
        La position y.
      
      
        z
        La position z.
      
      
        falloff_ref
        La référence du falloff par rapport à l'auditeur (clamp).
      
      
        falloff_max
        La distance maximale de falloff par rapport à l'auditeur.
      
      
        Facteur de falloff
        Le facteur de falloff (par défaut 1).
      
      
        boucle
        Indique que le son est en boucle ou non.
      
      
        priorité
        Définissez la priorité du canal pour le son.
      
    
  
   
  Les retours :
  Index (ID sonore)
   
  Exemple :
  if global.SFX {
     audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1) ; }
  
  Le code ci-dessus vérifie la variable globale "SFX" et s'il retourne vrai alors le son indexé dans la variable "snd_Waterfall" sera mis en boucle à sa position dans la pièce, avec une référence de chute de 100, une distance de chute de 300,
    un facteur de falloff de 1 et une priorité faible.
   
   
   
  
    
      
        Retour : Audio
        Suivant : audio_pause_sound
         
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

