audio_falloff_set_model Pour ajouter plus de polyvalence au moteur audio, GameMaker Studio 2 vous permet de sélectionner le modèle d'atténuation qui convient à votre jeu. Ce modèle sera utilisé pour toutes les fonctions audio du jeu ou de l'application, et vous devez donc vous assurer que le modèle que vous choisissez est le bon, car chacun affectera la façon dont l'auditeur perçoit les sons que vous jouez à travers les émetteurs ou avec le fonction audio_play_sound_at. Lorsque vous définissez l'atténuation dans votre jeu avec les fonctions appropriées, vous devrez définir trois arguments, chacun étant approprié à un modèle spécifique et affectera la façon dont le son final est "entendu" par le joueur en fonction de la distance. que l'auditeur est de la source. Les trois arguments sont: distance de référence - il s'agit de la distance par rapport à l'auditeur, la distance sous laquelle le volume pour la lecture du son chuterait normalement de moitié avant d'être influencé par le facteur de réduction ou la distance maximale spécifiée. distance maximale - ceci définit la distance à laquelle il n'y aura plus d'atténuation du son source. Cela peut être le point auquel le son n'est plus entendu ou le point auquel le volume sonore ne diminue plus en dessous du seuil minimum défini par le modèle choisi. facteur d'atténuation - Le facteur d'atténuation est utilisé dans l'atténuation de distance basée sur le modèle de distance inverse et définit le seuil minimum final pour un son avec atténuation. Les modèles d'atténuation affectés par ces arguments sont représentés dans GameMaker Studio 2 par les constantes suivantes (le tableau montre également les calculs exacts utilisés): Constant Fonction audio_falloff_exponent_distance gain = (distance_auditeur / distance_référence) ^ (-facteur_falloff) audio_falloff_exponent_distance_clamped distance = pince (distance_auditeur, distance_référence, distance_maximum) gain = (distance / distance_de référence) ^ (-facteur_facture) audio_falloff_inverse_distance gain = reference_distance / (reference_distance + falloff_factor * (listener_distance - reference_distance)) audio_falloff_inverse_distance_clamped distance = pince (distance_auditeur, distance_référence, distance_maximum) gain = reference_distance / (reference_distance + falloff_factor * (distance - reference_distance)) audio_falloff_linear_distance distance = min (distance, distance_maximale) gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance)) audio_falloff_linear_distance_clamped distance = pince (distance_auditeur, distance_référence, distance_maximum) gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance)) audio_falloff_none gain = 1 Les graphiques suivants sont des représentations visuelles de la façon dont les constantes ci-dessus fonctionnent et affectent le son joué: Syntaxe:audio_falloff_set_model(model); Argument Description model Constante utilisée pour définir le modèle d'atténuation. Retour:N/A Exemple:audio_falloff_set_model(audio_falloff_exponent_distance_clamped); audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1); Le code ci-dessus définit le modèle d'atténuation, puis lit le son indexé dans la variable "snd_Waterfall", qui sera bouclé à sa position de la pièce, avec une référence d'atténuation de 100, une distance d'atténuation de 300, un facteur d'atténuation de 1 et une faible priorité.  Retour: Audio Suivant:audio_sound_gain © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

