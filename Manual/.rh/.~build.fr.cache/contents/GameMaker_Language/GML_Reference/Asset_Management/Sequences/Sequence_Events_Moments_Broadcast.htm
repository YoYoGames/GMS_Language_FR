
  
  Événements, moments et messages diffusés
  Outre toutes les propriétés énumérées ici pour une structure de séquence, vous avez également la possibilité d'ajouter des propriétés spéciales "d'action" à une séquence. Il existe trois types différents de
    types de propriétés d'action qui peuvent être ajoutés à un objet de séquence - Événements. Moments et Messages de diffusion - et chacune d'entre elles est expliquée plus en détails
    dans les sections ci-dessous.
   
  Séquence des événements
  Des événements peuvent être ajoutés aux objets de séquence. Ces événements sont analogues à ceux utilisés par les actifs d'objet. Les événements que vous attribuez à un objet séquence se produiront dans un ordre spécifique, soit une fois à un moment défini du cycle de vie de la séquence, soit à chaque image du déroulement de la séquence.
    moment défini du cycle de vie de la séquence, soit à chaque image de la séquence en cours d'exécution. Dans cette section, nous abordons la manière dont ces événements sont traités à l'aide du code, mais ils peuvent également être ajoutés à l'aide de l'éditeur de séquence.
    Notez que l'ordre des événements énumérés ici n'est pas influencé par la direction de la tête de lecture, et même si la séquence est lue à l'envers, les événements seront toujours exécutés dans l'ordre indiqué ci-dessous.
    ci-dessous.
  Les événements disponibles sont les suivants :
  
    Créer: cette action est déclenchée lorsqu'une instance de séquence est créée sur une couche.
    Destroy: cette action est déclenchée lorsqu'une instance de séquence sur une couche est détruite.
    Nettoyage: il est déclenché lorsqu'une instance de séquence est ramassée.
    Step: déclenché juste avant l'événement habituel de l'objet step. Important ! Si la séquence est en pause, cet événement ne sera pas déclenché avant le prochain pas après la reprise de la séquence.
    Begin Step: déclenché juste avant l'événement begin-step de l'objet. Important ! Si la séquence est en pause, cet événement ne sera pas déclenché avant le prochain pas après la reprise de la séquence.
    End Step: déclenché juste avant l'événement end-step de l'objet. Important ! Si la séquence est en pause, cet événement ne sera pas déclenché avant le prochain pas après la reprise de la séquence.
    Système asynchrone: déclenché de la même manière que n'importe quel objet Gestionnaire d'événements du système asynchrone. Important !Si la séquence est en pause, cet événement ne sera pas déclenché.
    Message de diffusion: déclenché pendant la mise à jour de la séquence lorsqu'une image clé de message de diffusion est rencontrée.
  
  Tous les événements doivent être associés à des fonctions définies dans un script. Ainsi, pour configurer un événement, une variable de méthode doit être assignée à une propriété portant le nom correct.
    qui indique à la séquence quel événement doit appeler la fonction. La syntaxe pour cela est la suivante :
  
  <séquence_struct>.<propriété_événement> = méthode(<séquence_struct>, <nom_de_fonction>) ;
  Les propriétés de la structure séquentielle pour les différents événements sont les suivantes :
  
    événement_créer
    événement_destruction
    événement_nettoyage
    événement_step
    event_step_begin
    event_step_end
    système_asynchrone
    message_diffusé_événement
  
  Pour donner un exemple d'utilisation, disons que nous voulons que la séquence inverse la direction lorsqu'un clic sur le bouton gauche de la souris est détecté. Nous devrions d'abord créer un script avec la fonction que nous voulons appeler, quelque chose comme ceci :
  /// @function seq_reverse() ;
     function seq_reverse() {
     if mouse_check_button_pressed(mb_left) {
     if self.headDirection == seqdir_right {
     self.headDirection = seqdir_left ; }
     else self.headDirection = seqdir_right ; }
     }
  
  Dans cette fonction, tout ce que nous faisons est d'écouter une pression de la souris et d'inverser le sens de lecture de la séquence à laquelle la méthode a été liée. Vous remarquerez qu'actuellement, il n'est pas possible de passer des paramètres aux fonctions
    qui sont liées à ces propriétés, et dans tous les cas, la variable self dans la portée de la fonction est assignée à l'instance de la séquence.
  REMARQUE: Il convient de noter que dans le script ci-dessus, l'identificateur de soi peut être omis et n'est utilisé que pour montrer explicitement la portée de la variable de méthode utilisée dans cet exemple.
  Pour l'attribuer à une séquence, vous devez procéder comme suit :
  var _seq = sequence_get(Sequence1) ; _seq.event_step = method(_seq, seq_reverse) ;
  Nous avons maintenant assigné un événement step à l'objet séquence avec une fonction pour détecter la pression de la souris et changer la direction de la tête de lecture de l'instance de la séquence après qu'elle ait été créée dans une pièce.
    après avoir été créée dans une pièce.
   
  Moments
  Un moment de séquence est une action de code unique qui est déclenchée sur une ou plusieurs images spécifiées pendant la lecture de la séquence. Ces moments de code sont, comme les événements (expliqués ci-dessus), simplement des variables de méthode prédéfinies qui
    sont déclenchées sur l'image donnée. Par exemple, si vous voulez qu'une séquence crée une instance de "balle" sur une image spécifique de l'animation, vous devez d'abord créer la fonction qui sera utilisée pour cette action, comme ceci :
  /// @function seq_shoot() ;
     seq_shoot = function() {
     instance_create_layer(sequence.xorigin, sequence.yorigin, "Instances", obj_Bullet) ; }
  
  Vous devez ensuite ajouter ces données à une image dans la propriété momentKeyframes de la structure de la séquence. Il s'agit essentiellement d'une piste "spéciale" qui n'est utilisée qu'à cette fin et qui ne peut donc prendre que des données d' images clés associées aux actions de moment que vous voulez que la séquence ait.
    qui sont associées aux actions de moment que vous voulez que la séquence ait. Cette piste est créée de la même manière que n'importe quelle autre piste, en créant des structures d'images clés et en les remplissant avec des données d'images clés, où le canal 0 est le seul canal que vous pouvez utiliser.
    que vous pouvez utiliser et le type de piste est seqtracktype_moment. Vous trouverez ci-dessous un exemple de création, utilisant la fonction que nous avons définie ci-dessus pour déclencher les moments (images) donnés :
  var _seq = sequence_get(my_Seq) ; var _k = array_create(3) ; _k[0] = sequence_keyframe_new(seqtracktype_moment) ; _k[0].frame = 60 ; _k[1] = sequence_keyframe_new(seqtracktype_moment) ; _k[1].frame = 120 ; _k[2] = sequence_keyframe_new(seqtracktype_moment) ; _k[2].frame = 180 ; var _d = array_create(1) ; _d[0] = sequence_keyframedata_new(seqtracktype_moment) ; _d[0].channel = 0 ; _d[0].event = method(_d[0], seq_shoot) ; _k[0].channels = _d ; _k[1].channels = _d ; _k[2].channels
    = _d ; _seq.momentKeyframes = _k ;
  Le code ci-dessus va simplement définir les images 60, 120 et 180 de la piste "moment" pour appeler la méthode seq_shoot. Vous remarquerez qu'actuellement, il n'est pas possible de passer des paramètres aux fonctions qui sont utilisées pour chaque moment.
    moment, et dans tous les cas, la variable self dans la portée de la fonction est assignée à l'instance de la séquence (vous n'avez généralement pas besoin d'utiliser self mais dans certains cas particuliers, cela peut être utile).
    cas particuliers, cela peut être utile).
   
  Messages de diffusion
  Les séquences peuvent générer des messages de diffusion, qui sont des chaînes simples ajoutées à des images spécifiques le long de la ligne de temps de l'animation, et lorsque ce point de la ligne de temps est atteint, la chaîne est diffusée à toutes les instances d'objets qui l'écoutent.
    instances d'objets qui l'écoutent. Vous pouvez ajouter ces messages dans l'IDE à l'aide de l'éditeur de séquence, mais ils peuvent également être créés et modifiés à l'aide du code.
  Pour créer un message de diffusion sur une séquence à l'aide de GML, vous devez les ajouter à un cadre dans la propriété messageEventKeyframes de la structure de la séquence. Il s'agit essentiellement d'une piste "spéciale" qui est uniquement utilisée
    à cette fin et qui ne peut donc prendre que les données d'images clés associées aux messages de diffusion que vous voulez que la séquence ait. Cette piste est créée de la même manière que n'importe quelle autre piste, en créant des structures d'images clés et en les remplissant de données d'images clés.
    en les remplissant de données d'images clés, où le canal 0 est le seul canal que vous pouvez utiliser et le type de piste est seqtracktype_message. Vous trouverez ci-dessous un exemple de création :
  var _seq = sequence_get(my_Seq) ; var _k = array_create(2) ; _k[0] = sequence_keyframe_new(seqtracktype_message) ; _k[0].frame = 60 ; _k[1] = sequence_keyframe_new(seqtracktype_message) ; _k[1].frame = 120 ; var _m1 = array_create(2) ; _m1[0] = "Hello" ; _m1[1] = "World" ; var _m2 = array_create(1) ;  _m2[0] = "Ceci est un message de diffusion" ; var _d1 = array_create(1) ; _d1[0] = sequence_keyframedata_new(seqtracktype_message) ; _d1[0].channel = 0 ; _d1[0].events = _m1 ; var _d2 = array_create(1) ; _d2[0] = sequence_keyframedata_new(seqtracktype_message) ; _d2[0].channel = 0 ; _d2[0].events = _m2 ; _k[0].channels = _d1 ; _k[1].channels = _d2 ; _seq.messageEventKeyframes = _k ;
  Vous remarquerez que le texte du message est transmis au canal de données de l'image clé sous forme de tableau. En effet, vous pouvez diffuser plusieurs messages sur la même image, et faire en sorte que différentes instances d'objets les écoutent et réagissent différemment en fonction du message qu'elles attendent.
    du message qu'elles attendent.
  Une fois qu'un message de diffusion a été émis par la séquence, vous pouvez l'analyser en utilisant l'événement Other > Broadcast Message dans les instances d'objets, qui est expliqué en détail ici.
   
   
   
  
    
      
        Retour : Séquences
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

