 Événements, moments et messages diffusés Outre toutes les propriétés listées ici pour une structure de séquence, vous avez également la possibilité d'ajouter des propriétés spéciales "action" à une séquence. Il existe trois types différents de ces propriétés "action" qui peuvent être ajoutées à un objet séquence - Evénements. Moments et messages diffusés - et chacun d'eux est expliqué plus en détail dans les sections ci-dessous. Événements de séquence Des événements peuvent être ajoutés aux objets de séquence, et ces événements sont analogues aux événements utilisés par les actifs d'objets. Les événements que vous affectez à un objet séquence se produiront dans un ordre spécifique, soit une fois à un moment défini dans le cycle de vie de la séquence, soit chaque image que la séquence est en cours d'exécution. Dans cette section, nous expliquons comment ces événements sont gérés à l'aide de code, mais ils peuvent également être ajoutés à l'aide de l' éditeur de séquence. Notez que l'ordre des événements répertoriés ici n'est pas influencé par la direction de la tête de lecture, et même si la séquence est lue à l'envers, les événements seront toujours exécutés dans l'ordre indiqué ci-dessous. Les événements disponibles sont: Créer: il se déclenche lorsqu'une instance de séquence est créée sur un calque. Destroy: cela se déclenche lorsqu'une instance de séquence sur un calque est détruite. Nettoyage: il est déclenché lorsqu'une instance de séquence est garbage collection. Step: déclenché juste avant l'événement habituel de l'étape d'objet. Important! Si la séquence est mise en pause, cet événement ne sera déclenché qu'à l'étape suivante après le redémarrage de la lecture de la séquence. Étape de début: déclenchée juste avant l'événement de début d'étape de l'objet. Important! Si la séquence est mise en pause, cet événement ne sera déclenché qu'à l'étape suivante après le redémarrage de la lecture de la séquence. End Step: déclenché juste avant l'événement de fin d'objet. Important! Si la séquence est mise en pause, cet événement ne sera déclenché qu'à l'étape suivante après le redémarrage de la lecture de la séquence. Système asynchrone: déclenché de la même manière que n'importe quel objet Gestionnaires d'événements du système asynchrone. Important! Si la séquence est mise en pause, cet événement ne sera pas déclenché. Message de diffusion: déclenché lors de la mise à jour de la séquence lorsqu'une keyframe message de diffusion est rencontrée. Tous les événements doivent être associés à des fonctions définies dans un script, donc pour configurer un événement, une variable de méthode doit être affectée à une propriété avec le nom correct qui indique à la séquence quel événement doit appeler la fonction. La syntaxe pour cela est la suivante:<sequence_struct>.<event_property> = method(<sequence_struct>, <function_name>); Les propriétés de structure de séquence pour les différents événements sont les suivantes: event_create event_destroy event_clean_up event_step event_step_begin event_step_end event_async_system event_broadcast_message Pour donner un exemple d'utilisation, disons que nous voulons que la séquence inverse la direction lorsqu'un clic gauche de la souris est détecté. Nous aurions d'abord besoin de créer un script avec la fonction que nous voulons appeler, quelque chose comme ceci:/// @function seq_reverse();
     function seq_reverse() {
     if mouse_check_button_pressed(mb_left)     {
         if self.headDirection == seqdir_right         {
             self.headDirection = seqdir_left;         }
         else self.headDirection = seqdir_right;     }
     }
   Dans cette fonction, tout ce que nous faisons est d'écouter un clic de souris, puis d'inverser le sens de lecture de la séquence à laquelle la méthode a été liée. Vous remarquerez qu'actuellement vous n'êtes pas en mesure de passer de paramètres aux fonctions qui sont liées à ces propriétés, et dans tous les cas self la variable dans la portée de la fonction est affectée à l'instance de séquence. REMARQUE: il convient de noter que dans le script ci-dessus, le self L'identifiant peut être omis et n'est utilisé que pour afficher explicitement la portée de la variable de méthode utilisée pour cet exemple. Pour attribuer ceci à une séquence, vous feriez alors quelque chose comme ceci:var _seq = sequence_get(Sequence1); _seq.event_step = method(_seq, seq_reverse); Nous avons maintenant attribué un événement d'étape à l' objet séquence avec une fonction permettant de détecter le moment où une souris est enfoncée, puis de changer la direction de la tête de lecture de l' instance de séquence après sa création dans une pièce. Des moments Un moment de séquence est une action de code unique qui est déclenchée sur une ou plusieurs images spécifiées pendant la lecture de la séquence. Ces moments de code sont - comme pour les événements (expliqués ci-dessus) - simplement des variables de méthode prédéfinies qui sont déclenchées sur l'image donnée. Par exemple, supposons que vous souhaitiez qu'une séquence crée une occurrence de "puce" sur une image spécifique de l'animation - vous devez d'abord créer la fonction à utiliser pour cette action, quelque chose comme ceci:/// @function seq_shoot();
     seq_shoot = function()     {
         instance_create_layer(sequence.xorigin, sequence.yorigin, "Instances", obj_Bullet);     }
   Vous l'ajouteriez ensuite à un cadre dans le momentKeyframes propriété de la structure de séquence. Il s'agit essentiellement d'une piste "spéciale" qui n'est utilisée qu'à cette fin et qui ne peut donc prendre keyframe associées aux actions de moment que vous souhaitez que la séquence ait. Cette piste est créée à peu près de la même manière que vous le feriez pour toute autre piste, en créant des keyframe et en les remplissant avec des keyframe, où le canal 0 est le seul canal que vous pouvez utiliser et le type de piste est seqtracktype_moment. Voici un exemple de la façon dont cela serait créé, en utilisant la fonction que nous avons définie ci-dessus pour se déclencher sur les moments (images) donnés:var _seq = sequence_get(my_Seq); var _k = array_create(3); _k[0] = sequence_keyframe_new(seqtracktype_moment); _k[0].frame = 60; _k[1] = sequence_keyframe_new(seqtracktype_moment); _k[1].frame = 120; _k[2] = sequence_keyframe_new(seqtracktype_moment);    _k[2].frame = 180; var _d = array_create(1); _d[0] = sequence_keyframedata_new(seqtracktype_moment); _d[0].channel = 0; _d[0].event = method(_d[0], seq_shoot); _k[0].channels = _d; _k[1].channels = _d; _k[2].channels
    = _d; _seq.momentKeyframes = _k; Le code ci-dessus définira simplement les images 60, 120 et 180 de la piste "moment" pour appeler la méthode seq_shoot. Vous remarquerez qu'actuellement vous n'êtes pas en mesure de passer de paramètres aux fonctions qui sont utilisées à chaque instant, et dans tous les cas les self la variable dans la portée de la fonction est affectée à l'instance de séquence (vous n'avez généralement pas besoin d'utiliser self mais dans certains cas particuliers, cela peut être utile). Diffuser des messages Les séquences peuvent être créées pour générer des messages de diffusion, quelles chaînes simples sont ajoutées à des images spécifiques le long de la chronologie de l'animation, et lorsque ce point de la chronologie est atteint, la chaîne sera diffusée à toutes les instances d'objet qui l'écoutent. Vous pouvez ajouter ces messages dans l'EDI à l'aide de l' éditeur de séquence, mais ils peuvent également être créés et modifiés à l'aide de code. Pour créer un message de diffusion sur une séquence à l'aide de GML, vous devez les ajouter à une image dans le messageEventKeyframes propriété de la structure de séquence. Il s'agit essentiellement d'une piste "spéciale" qui n'est utilisée qu'à cette fin et qui ne peut donc prendre keyframe associées aux messages de diffusion que vous souhaitez que la séquence ait. Cette piste est créée à peu près de la même manière que vous le feriez pour toute autre piste, en créant des keyframe et en les remplissant avec des keyframe, où le canal 0 est le seul canal que vous pouvez utiliser et le type de piste est seqtracktype_message. Voici un exemple de la façon dont cela serait créé:var _seq = sequence_get(my_Seq); var _k = array_create(2); _k[0] = sequence_keyframe_new(seqtracktype_message); _k[0].frame = 60; _k[1] = sequence_keyframe_new(seqtracktype_message); _k[1].frame = 120; var _m1 = array_create(2);    _m1[0] = "Hello"; _m1[1] = "World"; var _m2 = array_create(1); _m2[0] = "This is a Broadcast Message"; var _d1 = array_create(1); _d1[0] = sequence_keyframedata_new(seqtracktype_message);    _d1[0].channel = 0; _d1[0].events = _m1; var _d2 = array_create(1); _d2[0] = sequence_keyframedata_new(seqtracktype_message); _d2[0].channel = 0; _d2[0].events = _m2; _k[0].channels = _d1; _k[1].channels = _d2;    _seq.messageEventKeyframes = _k; Vous remarquerez que le texte du message est transmis au keyframe sous forme de tableau. En effet, vous pouvez diffuser plusieurs messages sur la même trame et faire en sorte que différentes instances d'objet les écoutent et réagissent différemment en fonction du message auquel elles s'attendent réellement. Une fois qu'un message de diffusion a été émis par la séquence, vous pouvez l'analyser à l'aide de l' événement Autre > Message de diffusion dans les instances d'objet, qui est expliqué en détail ici.  Retour: Séquences © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

