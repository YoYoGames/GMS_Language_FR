
  
  Sprites d'animation squelettique
  Les fonctions trouvées dans cette section sont uniquement destinées à être utilisées avec des sprites qui ont été importés depuis un fichier d'animation squelettique (plus précisément, les fichiers JSON que les Colonne vertébrale exporte)
    et peuvent être utilisées pour obtenir des informations sur une animation dans votre jeu, ainsi que pour définir certaines propriétés dans une animation. Ces fonctions peuvent être utilisées avec les fonctions et les variables habituelles des sprites, ce qui vous permet (par exemple) de
    mélanger deux animations de squelette à l'aide de ces fonctions spéciales tout en définissant l'échelle de l'image à l'aide des variables d'instance de sprite normales (pour plus d'informations sur les variables d'instance de sprite, voir ici).
  REMARQUE: pour plus d'informations sur l'importation de sprites d'animation squelettique réalisés avec Spine, veuillez consulter la section Importation de sprites non bitmap.
  Vous pouvez en savoir plus sur les fonctions de ces types de sprites dans les sections ci-dessous :
   
  
    Animation
    Skins
    Pièces jointes
    Bones
    Machines à sous
    Dessin et divers
  
   
   
  Support Tint Black
  Cette fonctionnalité permet de teinter les zones sombres des emplacements de sprites Spine différemment des zones claires (c'est une fonctionnalité de l'IDE Spine, voir la section Tint black ici pour plus de détails). Actuellement, afin d'utiliser cette fonctionnalité dans GameMaker Studio 2, vous devez utiliser un fichier personnalisé de type shader lorsque
    dessiner un sprite Spine qui l'utilise. Ce shader contient une variable globale uniforme appelée "gm_SpineTintBlackColour" que le runner remplit avec la couleur Tint Black actuelle, récupérée automatiquement à partir des données Spine. Le shader
    requis est présenté ci-dessous :
  Le Vertex Shader (c'est le même que le vertex shader passthrough par défaut)
  attribut vec3 in_Position ; // (x,y,z) attribut vec4 in_Colour ; // (r,g,b,a) attribut vec2 in_TextureCoord ; // (u,v)
     variable vec2 v_vTexcoord ; variable vec4 v_vColour ;
     void main() {
     vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0) ; gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos ; v_vColour = in_Colour ; v_vTexcoord = in_TextureCoord ; }
  
  Le Fragment Shader:
  vec2 variable v_vTexcoord ; vec4 variable v_vColour ;
     uniform vec4 gm_SpineTintBlackColour ; // Il s'agit de l'uniforme contenant la couleur noir-teint
     void main() {
     vec4 tb = gm_SpineTintBlackColour ; vec4 texcol = texture2D( gm_BaseTexture, v_vTexcoord ) ; vec4 outcol ; outcol.rgb = v_vColour.rgb * texcol.rgb ; outcol.rgb += tb.rgb * ((tb.a * (texcol.a - 1.0)) + (1.0 - texcol.rgb)) ; //
    Cette ligne exécute la logique de mélange tint-noir outcol.a = v_vColour.a * texcol.a ; gl_FragColor = outcol ; }
  
  Vous pouvez l'utiliser en appelant d'abord le shader, puis en dessinant le sprite, puis en réinitialisant le shader, comme ceci :
  shader_set(shd_spine_tint_black) ; draw_self() ;
     shader_reset() ;
  
   
   
   
  
    
      
        Retour : Sprites
        Suivant : Informations sur les sprites
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

