sprite_set_alpha_from_sprite Cette fonction utilise la valeur / saturation d'un sprite et la multiplie par l'alpha du sprite cible. Idéalement, le sprite utilisé pour générer la nouvelle carte alpha doit être en échelle de gris, les zones blanches ayant une valeur alpha équivalente de 1 (opaque), les zones noires étant équivalentes à alpha 0 (transparent) et les zones grises étant un alpha entre 0 et 1. Le sprite dont vous définissez l'alpha ne peut pas être une ressource permanente, pas plus que le sprite que vous utilisez pour définir l'alpha, car cela produira une erreur. Cela signifie que vous devez créer deux sprites complètement nouveaux "à la volée" d'une manière ou d'une autre pour que la fonction fonctionne correctement. Cela peut être réalisé en utilisant des surfaces ou en créant un sprite à partir de l'écran (l'exemple de code ci-dessous montre comment l'effet peut être obtenu avec des surfaces). REMARQUE: Cette fonction n'est utile que pour les sprites bitmap et ne fonctionnera pas avec les sprites SWF ou JSON (Spine). Voici une image qui illustre le fonctionnement de cette fonction: Syntaxe:sprite_set_alpha_from_sprite(ind, spr); Argument Description ind L'index de l'image-objet pour modifier la carte de transparence. spr L'index de l'image-objet à partir duquel les données de la carte de transparence seront extraites. RetourN/A Exemple étendu: Dans cet exemple étendu, nous montrons comment créer un sprite à effet spécial à partir de deux ressources de sprite. Pour commencer, nous devons avoir une variable de contrôleur dans l' événement de création de l'instance. Cette variable permet de garantir que le sprite n'est créé qu'une seule fois:spr_create = true; Une fois que cela est fait, nous devons ensuite accéder à l' événement Draw et ajouter ce code:if spr_create     {
         spr_create = false;     var _sw = sprite_get_width(spr_Explosion_Alpha);     var _sh = sprite_get_height(spr_Explosion_Alpha);     var _xo = sprite_get_xoffset(spr_Gradient);     var _yo = sprite_get_yoffset(spr_Gradient);        var _surf = surface_create(_sw, _sh);     surface_set_target(_surf);
         draw_clear_alpha(c_black, 0);     draw_sprite(spr_Gradient, 0, 0, 0);     sprite_index = sprite_create_from_surface(_surf, 0, 0, _sw, _sh, false, false, _xo, _yo);     draw_clear_alpha(c_black, 0);     draw_sprite(spr_Explosion_Alpha,
    0, _xo, _yo);     var _spr = sprite_create_from_surface(_surf, 0, 0, _sw, _sh, false, false, _xo, _yo);     surface_reset_target();
         surface_free(_surf);
         sprite_set_alpha_from_sprite(sprite_index, _spr);     sprite_delete(_spr);
         }
     draw_sprite(sprite_index, 0, x, y); Le code ci-dessus vérifie d'abord si la variable de contrôle est vraie ou non, et si c'est le cas, il exécute ensuite le code pour définir l'alpha du sprite, en définissant la variable sur false pour empêcher le code de s'exécuter plus d'une fois. Dans ce cas, il crée une surface de la taille du masque alpha que nous souhaitons utiliser, puis dessine le sprite dont l'alpha est changé sur la surface et crée un nouveau sprite à partir de celle-ci, en l'attribuant comme le sprite_index de l'objet. Le code efface ensuite la surface et y dessine le sprite de la carte alpha et crée un autre nouveau sprite, en stockant son index dans une variable locale. Enfin, le nouveau sprite affecté à l'objet obtient son jeu alpha de ce sprite temporaire, la surface est libérée et le sprite temporaire est supprimé. Il y a une dernière chose à faire ici, et c'est de supprimer le sprite qui a été créé pour l'objet de la mémoire lorsqu'il n'est pas utilisé. Cela se ferait soit dans l' événement de destruction, soit dans l'événement de fin de salle comme ceci: sprite_delete(sprite_index); Retour: Manipulation des sprites Suivant:sprite_set_cache_size © Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

