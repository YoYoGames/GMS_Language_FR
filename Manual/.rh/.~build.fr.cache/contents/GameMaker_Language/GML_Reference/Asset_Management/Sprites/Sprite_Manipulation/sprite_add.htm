
  
  sprite_add
  Avec cette fonction, vous pouvez ajouter une image en tant que sprite, en la chargeant depuis une source externe. Le fichier image à charger doit toujours être au format *.png, *.gif, *.jpg/jpeg ou *.json( les fichiers*json sont utilisés pour charger les sprites d'animation de squelette réalisés avec Spine). La fonction renvoie le nouvel index du sprite qui doit ensuite être utilisé dans tout autre code relatif au sprite. Si
    vous utilisez cette fonction avec HTML5 ou que vous obtenez une image à partir d'une URL, cette fonction générera également un événement asynchrone Image Loaded. Voir cette page pour
    plus d'informations.
  Toutes les images qui doivent être transformées en sprites animés - à l'exception des *.gif (voir ci-dessous) - doivent avoir un format "bande" (voir l'image ci-dessous) et elles seront divisées en un nombre de sous-images spécifié selon la règle suivante : largeur du sprite = largeur de la bande / sous-images.
  
  Comme vous pouvez le voir dans l'image ci-dessus, le sprite a été placé sur un fond violet foncé, et cela peut être supprimé en définissant l'argument "removeback" à true. Cela fonctionne en vérifiant la couleur du pixel inférieur gauche du sprite.
    la couleur qui s'y trouve, puis l'utilise comme couleur à supprimer. Par exemple, dans l'image ci-dessus, si la couleur du pixel inférieur gauche était le vert, toutes les parties vertes du sprite auraient été supprimées et le reste du fond violet ignoré.
  Si vous choisissez l'option "removeback", vous pouvez également souhaiter que GameMaker Studio 2 lisse les bords du sprite en définissant l'argument "smooth" sur true. Tout ce que cela fait, c'est de créer une bordure semi-transparente autour des bords du sprite après la suppression de son arrière-plan.
    le sprite après la suppression de son arrière-plan.
  Enfin, vous pouvez également spécifier l'origine x et y du sprite. Il s'agit du point où le sprite est "fixé" sur l'instance qui l'utilise, et il est toujours calculé par rapport au coin supérieur gauche 0,0 d'une sous-image du sprite. Ainsi,
    par exemple, un sprite de 32 x 32 pixels dont les valeurs sont définies sur (16,16) aura son origine au centre.
  Si vous ajoutez une image au format *.gif, il vous suffit de spécifier le nom du fichier et le numéro de l'image (qui doit être 1 pour la première image) et vous pouvez laisser tous les autres arguments à 0, en notant que seule la première image du GIF sera chargée.
    Pour les sprites *.json, le numéro de l'image doit être 1, et les paramètres "removeback" et "smooth" seront ignorés.
  Par défaut, les boîtes de délimitation de tous les nouveaux sprites sont calculées automatiquement (la boîte de délimitation exacte dépend de la taille et de la transparence du sprite), mais vous pouvez personnaliser cette fonction, auquel cas vous devez également utiliser la fonction
    sprite_collision_mask().
  Il convient de noter que la mémoire utilisée lors de l'ajout d'un sprite de cette manière sera plus importante que vous ne le pensez. En effet, GameMaker Studio 2 stockera le sprite sous forme de page de texture et il sera également stocké dans la mémoire du GPU.
    sera donc plus importante que celle d'un fichier image du même sprite.
  REMARQUE: Lorsque vous chargez un sprite dans GameMaker Studio 2, vous devez vous souvenir de le supprimer à nouveau (avec sprite_delete()) lorsqu'il n'est plus nécessaire, sinon il y a un risque de fuite de mémoire qui ralentira et fera planter votre jeu.
    et éventuellement faire planter votre jeu.
  NOTE: Sur iOSsi vous chargez un fichier inclus à partir d'un dossier, c'est-à-dire avec un chemin d'accès du type "Arrière-plans/arrière-plan1.png", il n'est pas nécessaire d'inclure le dossier dans le chemin d'accès.
    et le simple fait de fournir le nom du fichier est suffisant. Sur toutes les autres plateformes, vous devez fournir le(s) dossier(s) dans le chemin d'accès au fichier.
  REMARQUE: en HTML5, si vous chargez un sprite à partir d'un serveur sécurisé, vous devrez peut-être définir le type cross-origin et utiliser un chemin relatif au lieu d'un chemin absolu. Voir http_set_request_crossorigin() pour
    plus de détails.
   
  Syntaxe :
  sprite_add(fname, imgnumb, removeback, smooth, xorig, yorig) ;
  
    
      
        Arguments
        Description
      
      
        nom de famille
        Le nom (un chemin de fichier de type chaîne) du fichier à ajouter.
      
      
        imgnum
        Permet d'indiquer le nombre de sous-images (1 pour une seule image ou pour un *.gif).
      
      
        retirer
        Indique s'il faut rendre transparents tous les pixels ayant la couleur de fond (pixel inférieur gauche).
      
      
        lisse
        Indique s'il faut lisser les bords s'ils sont transparents.
      
      
        xorig
        Indique la position x de l'origine dans le sprite.
      
      
        yorig
        Indique la position y de l'origine dans le sprite.
      
    
  
   
  Les retours :
  Réel (valeur de l'ID du sprite)
   
  Exemple :
  spr = sprite_add("player_5.png", 16, true, true, 0, 0) ;
  Le code ci-dessus charge un sprite dans le jeu et stocke son index dans la variable "spr".
   
   
   
  
    
      
        Retour : Manipulation des sprites
        Suivant : sprite_replace
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

