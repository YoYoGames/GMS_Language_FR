
  
  Shaders
  Lesnuanceurs sont un outil incroyablement puissant pour manipuler ce qui est rendu à l'écran par la carte graphique et la manière dont il l'est. Puisque ces minuscules programmes sont en fait exécutés sur la carte graphique
    cela signifie qu'ils sont extrêmement rapides à traiter, libérant ainsi de précieux cycles CPU pour une logique de jeu plus poussée.
  Pour créer un shader, vous devrez avoir écrit à la fois un Vertex Shader et un Fragment Shader (également connu sous le nom de Pixel Shader) à l'aide de l'éditeur deshader, et même si (par exemple)
    vous souhaitez uniquement modifier la position des sommets d'une instance en cours de dessin, ou si vous souhaitez uniquement modifier les valeurs de couleur des pixels, vous aurez toujours besoin des deux programmes pour qu'un shader complet fonctionne.
  REMARQUE: Les shaders ne vous permettent pas de modifier la valeur des variables que vous leur transmettez, et celles-ci seront donc appelées constantes deshaders dans toute la documentation qui s'y réfère.
  Pour un aperçu complet des fonctions et variables GLSL ES disponibles que vous pouvez utiliser pour programmer les shaders eux-mêmes, veuillez consulter les pages de référence du langage d'ombrage OpenGL ES (GLSL ES).
    Le lien suivant est également utile car il contient quelques cartes de référence rapide pour l'API OpenGL ES (notez que seules les deux dernières cartes présentées sont applicables à GameMaker Studio 2) : Cartes de référence OpenGL ES.
  L'utilisation d'un shader dans vos projets est très simple et ne nécessite que quelques lignes de code pour en tirer le meilleur parti :
  shader_set(myShader) ; draw_self() ;
     shader_reset() ;
  
  Comme vous pouvez le constater, ils sont utilisés de manière similaire aux modes de fusion et aux surfaces, où vous sélectionnez (définissez) d'abord le shader, dessinez ce que vous voulez en l'utilisant, puis réinitialisez à nouveau la cible de dessin. Si vous souhaitez rendre l'écran entier à travers un shader,
    et pas seulement un sprite ou un arrière-plan, vous devrez configurer une surface pour capturer la vue actuelle, puis la transmettre au shader (voir Surfaces pour plus d'informations).
  REMARQUE: Les shaders, comme tout ce qui est lié au dessin, ne peuvent être utilisés que dans l'événement draw. Il convient également de noter que si vous essayez d'utiliser une valeur de couleur dans un shader et que l'objet n'a pas de texture, le résultat sera noir.
  Si le shader que vous utilisez a des valeurs d'entrée, celles-ci sont définies à l'aide des fonctions uniformes. Vous devez d'abord obtenir le handle de l'uniforme (qui est essentiellement une valeur d'identification de l'uniforme à définir) en utilisant la fonction shader_get_uniform() dans
    l'événement Create de l'instance utilisant le shader, puis vous stockez ces identifiants dans des variables, comme ceci :
  colour_to_find = shader_get_uniform(sShaderDemo5, "f_Colour1") ; colour_to_set = shader_get_uniform(sShaderDemo5, "f_Colour2") ;
  Une fois que vous avez les poignées uniformes, elles peuvent être définies dans le code du shader pour l'événement Draw comme ceci :
  shader_set(sShaderDemo5) ; shader_set_uniform_f(colour_to_find, 1,1,1 ) ; shader_set_uniform_f(colour_to_set, 1,0,0 ) ; draw_sprite(sprite_index,image_index,x+24, y) ; shader_reset() ;
  
  Une dernière chose à noter est que, bien que les shaders soient acceptés sur toutes les plateformes, ils sont toujours spécifiques à un appareil et si le matériel ou le logiciel de l'appareil ne peut pas utiliser les shaders, vous obtiendrez une erreur. Il est donc recommandé de vérifier que
    le shader a été compilé avant de définir les uniformes ou d'utiliser le shader lui-même, comme ceci :
  if(shader_is_compiled(myShader)) {
     shader_set(myShader) ;
     draw_self() ;
     shader_reset() ;
     }
     else show_debug_message(" Shader failed ") ;
  Comme vérification supplémentaire, vous pouvez également appeler la fonction shaders_are_supported() pour voir si le matériel supporte les shaders. En général, vous ferez ces vérifications au début du jeu et stockerez les résultats dans une
   variable globale pour les vérifier plus tard.
  Il est important de noter que GameMaker Studio 2 prend également en charge certaines macros de compilation conditionnelle qui peuvent être utilisées dans les shaders GLSL ES afin qu'ils puissent exécuter un code alternatif sur des plateformes spécifiques prises en charge. Les macros et les plates-formes sur lesquelles elles
    sur lesquelles elles seront générées sont indiquées dans le tableau ci-dessous :
   
  
    
      
        MacroShader 
        Valeur
        Plate-forme cible
      
      
        _YY_GLSLES_
        1
        Toutes les plateformes cibles
      
      
        _YY_GLSL_
        2
        Mac et Ubuntu(Linux)
      
      
        _YY_HLSL11_
        3
        Windows, UWP, XboxOne
      
      
        _YY_PSSL_
        4
        PS4
      
    
  
   
  Lorsque vous compilez votre projet GameMaker Studio 2 sur l'une des plates-formes répertoriées en utilisant un shader au format GLSL ES, l'une des macros ci-dessus sera générée et pourra ensuite être utilisée en contrôle dans le code du shader comme ceci :
  #ifdef _YY_HLSL11_ // Code du shader HLSL ici #else
     // Le code du shader GLSL est ici #endif
  
  Si vous êtes novice en matière de shaders ou si vous souhaitez un guide plus complet pour les créer et les utiliser avec GameMaker Studio 2, veuillez consulter la page suivante du manuel :
  
    Guide d'utilisation des shaders
  
   
  Les fonctions suivantes sont disponibles pour dessiner et définir les ombres:
   
  
    shader_get_name
    shader_get_uniform
    shader_get_sampler_index
    shader_set
    shader_set_uniform_f
    shader_set_uniform_f_array
    shader_set_uniform_i
    shader_set_uniform_i_array
    shader_set_uniform_matrix
    shader_set_uniform_matrix_array
    shader_reset
    shader_est_compilé
    shaders_sont_supportés
    shader_current
  
   
  Nous avons également une fonction spéciale qui définit un état global pour tous les shaders:
  
    shader_enable_corner_id
  
   
  Lorsque vous travaillez avec des échantillonneurs de texture dans des shaders, vous aurez besoin d'informations sur la texture utilisée. Dans ce cas, vous pouvez utiliser les fonctions suivantes :
   
  
    sprite_get_texture
    sprite_get_uvs
    font_get_texture
    font_get_uvs
    largeur_de_la_texture
    texture_get_height
    largeur de texture_get_texel
    texture_get_texel_height
    texture_set_stage
    gpu_set_texfilter_ext
    gpu_set_texrepeat
  
   
  Bien que ce manuel ne couvre pas toutes les fonctions et variables des shaders Open GL, il contient une liste de celles qui sont propres à GameMaker Studio 2. Ces constantes ne font pas partie de la spécification Open GL pour les shaders et sont fournies pour simplifier l'intégration des shaders dans vos projets.
    pour simplifier l'intégration des shaders dans vos projets.
  
    Constantes de l'ombrage 
  
   
  Enfin, GameMaker Studio 2 vous permet de définir vos propres formats de sommets à partir desquels vous pouvez créer vos propres primitives personnalisées. Cela peut accélérer considérablement les opérations des shaders ou être utilisé pour étendre leurs capacités et créer des effets surprenants.
    Vous trouverez des informations à ce sujet dans les sections suivantes :
  
    Primitives et formats de sommets
  
   
   
   
  
    
      
        Retour : Gestion des actifs
        Suivant : Séquences
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

