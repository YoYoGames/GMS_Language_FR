
  
  array_sort
  Avec cette fonction, vous pouvez trier un tableau par ordre croissant ou décroissant ou en utilisant une fonction personnalisée pour définir l'ordre de tri. La fonction nécessite que vous fournissiez le tableau à trier, puis l'un des éléments suivants :
  
    Les constantes true ou false pour indiquer l'ordre de tri ascendant (true) ou descendant (false).
    
    Une fonction personnalisée pour définir l'ordre de tri
  
  Si vous utilisez une fonction personnalisée pour le tri, elle doit prendre 2 arguments qui recevront respectivement les valeurs de l'élément courant et de l'élément suivant. La fonction doit retourner l'une des valeurs suivantes pour affecter l'ordre de tri (où elm1 est
    l'élément courant et elm2 l'élément suivant) :
  
    0: si elm1 et elm2 sont égaux
    <0 ( nombre négatif) : si elm1 passe avant elm2
    >0 ( nombre positif) : si elm1 passe après elm2
  
  Si le tableau contient un ensemble de chaînes de caractères, celles-ci seront triées par ordre alphabétique sur la base de l'alphabet anglais en utilisant le type de tri croissant/décroissant par défaut. Tous les autres types de données seront triés en fonction de leur valeur numérique, dont les valeurs exactes dépendront du type de données lui-même.
    dont les valeurs exactes dépendent du type de données lui-même (par exemple, un tableau de tampons sera trié sur la base de la valeur numérique de leurs adresses mémoire).
  Notez que cette fonction va modifier le contenu du tableau original qui a été fourni. Pour créer une copie triée, utilisez array_copy() pour dupliquer le tableau d'abord, et ensuite le passer à cette fonction.
   
  Syntaxe :
  array_sort(variable, sorttype_ou_fonction) ;
  
    
      
        Arguments
        Description
      
      
        variable
        La variable qui contient le tableau.
      
      
        fonction_ou_triple 
        
        Le type de tri (true pour un tri ascendant ou false pour un tri descendant) ou une référence de fonction à utiliser pour le tri.
        
      
    
  
   
  Les retours :
  N/A
   
  Exemple :
  var _a = [10, 9, 8, 7, 6, 5] ;
     array_sort(_a, function(elm1, elm2) { return elm1 - elm2 ; }) ;
  Le code ci-dessus utilise une fonction de tri personnalisée pour trier le tableau dans un ordre croissant. La fonction de tri prend les deux éléments du tableau comme elm1 et elm2 et effectue une soustraction sur eux. Si elm1 est supérieur à elm2,
    la soustraction donne un nombre positif qui place elm1 après elm2, les plaçant ainsi dans un ordre croissant.
  Voici un exemple détaillé :
  var _xx, _yy, _a ; for (var i = 0 ; i < 10 ; i++) { _xx = irandom(room_width) ; _yy = irandom(room_height) ; _a[i] = instance_create_layer(_xx, _yy, layer, obj_Bullet) ; } 
     show_debug_message(_a) ;
    
     var _f = function(inst1, inst2) { return inst1.x - inst2.x ; } 
     array_sort(_a, _f) ; show_debug_message(_a) ;
  
  Le code ci-dessus va créer un tableau de 10 instances placées à des positions aléatoires dans la pièce. Le message de débogage affichera quelque chose comme le suivant :
  [ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]
  Le code crée ensuite une méthode à utiliser dans la fonction array_sort() qui renvoie la différence entre chacune des positions X des instances de la pièce. Ensuite, la fonction array_sort() est
    exécutée en utilisant cette méthode, en triant les instances par X, de la plus basse à la plus haute. La sortie du tableau ressemblerait alors à quelque chose comme ceci :
  [ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]
   
   
   
  
    
      
        Retour : Fonctions variables
        Suivant : array_length
      
    
    Copyright YoYo Games Ltd. 2021 Tous droits réservés
  
  
  

