<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>repeat</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page décrivant la fonction de répétition" />
  <meta name="rh-index-keywords" content="repeat" />
  <meta name="search-keywords" content="if,else,then,?,ternaire,conditionnel" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>repeat</h1><p> Le <span class="notranslate">GameMaker Language</span> a un certain nombre de façons dont vous pouvez effectuer des <i>boucles</i>, c&#39;est-à-dire: faire itérer une ou plusieurs instructions sur elle-même un certain nombre de fois. Le plus simple d&#39;entre eux est le <tt>repeat</tt> déclaration, qui a la forme:</p><p class="code">repeat (&lt;expression&gt;)<br/>     {<br/>     &lt;statement&gt;;<br/>     &lt;statement&gt;;<br/>     ...<br/>     }</p><p> Avec <tt>repeat</tt> l&#39; <a class="glossterm" data-glossterm="déclaration" href="#">instruction</a> donnée est répétée le nombre de fois indiqué par la valeur arrondie de l&#39; <a class="glossterm" data-glossterm="expression" href="#">expression</a>. Par exemple, ce qui suit crée cinq balles à des positions aléatoires:</p><p class="code">repeat (5)<br/>     {
    <br/>     instance_create_layer(random(400), random(400), &quot;Instances&quot;, obj_ball);<br/>     }
  </p><p> Cela peut être très utile pour éviter de taper plusieurs fois le même code, ou pour utiliser des tableaux, ou pour compter à travers un certain nombre d&#39;opérations, etc. les entre accolades <tt>{}</tt>. Par exemple:</p><p class="code">var _x = 32;<br/> repeat (global.p_lives)<br/>     {<br/>     draw_sprite(spr_heart, 0, _x, 32);<br/>     _x += sprite_get_width(spr_heart);<br/>     }</p><p> L&#39;exemple ci - dessus reprend les déclarations contenues dans les accolades pour que soit le nombre d&#39; <a class="glossterm" data-glossterm="itération" href="#">itération</a> <span class="glossextra">de</span> la variable globale « vie » a, et chaque itération dessine l&#39;image - objet cardiaque au <span class="inline">_x</span> position, puis déplace la position le long d&#39;un peu en fonction de la largeur du sprite cœur.</p><p> <strong>Quand devriez-vous utiliser un <span class="inline">repeat</span> boucle?</strong> Chaque fois que vous souhaitez répéter une ou plusieurs instructions un nombre fixe de fois sans qu&#39;il soit nécessaire de maintenir un nombre d&#39;itérations.</p><p> Il est à noter que vous pouvez utiliser le spécial <span class="inline"><a href="break.htm">break</a></span> et <span class="inline"><a href="continue.htm">continue</a></span> instructions dans une boucle de <font face="Lucida Console"><span style="font-size: 16px;"><b>répétition aussi.</b></span></font> Utilisant <span class="inline">break</span> quittera immédiatement la boucle et passera à tout code qui est dans l&#39;événement ou la fonction après que la boucle aurait dû se terminer, par exemple:</p><p class="code">var i = 0;<br/> var temp = 0;<br/> repeat (10)<br/>     {<br/>     temp += array[i];<br/>     if (temp &gt; max_total)<br/>         {<br/>         break;<br/>         }<br/>     else<br/>         {<br/>         i += 1;<br/>         }<br/>     }</p><p> Le code ci-dessus parcourt 10 <a href="../Arrays.htm">valeurs de tableau</a> et les ajoute à une variable locale. Si le total de la variable locale est supérieur à la valeur donnée pour <span class="inline">max_total</span>, la boucle se termine par break, sinon la boucle continuera.</p><p> Un exemple d&#39;utilisation <span class="inline">continue</span> dans un <span class="inline">repeat</span> boucle serait:</p><p class="code">repeat(10)<br/>     {   <br/>     var _x = random(room_width);<br/>     var _y = random(room_height);<br/>     if (instance_position(_x, y, obj_Enemy)<br/>         {
    <br/>         continue;
    <br/>         }
    <br/>     instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br/>     }</p><p> Ce code se répétera 10 fois, générant une position de pièce aléatoire puis vérifiant si une instance de l&#39;objet <span class="inline">obj_Enemy</span> existe à cette position. Si tel est le cas, l&#39;itération de la boucle actuelle se termine en utilisant <span class="inline">continue</span> et une nouvelle itération est lancée, et si ce n&#39;est pas le cas, une instance de l&#39;objet <span class="inline">obj_Enemy</span> est créé à la position aléatoire.</p><p> Pour plus d&#39;exemples de fonctions de boucle, veuillez consulter les sections sur <a href="while.htm"><tt>while</tt></a>, <a href="do___until.htm"><tt>do... until</tt></a>, et <a href="for.htm"><tt>for</tt></a>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="../Language_Features.htm">Caractéristiques linguistiques</a></div><div style="float:right"> Suivant:<a href="while.htm">while</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
repeat
-->
  <!-- TAGS
repeat
-->
</body>
</html>