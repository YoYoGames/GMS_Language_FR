<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>tandis que</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>tandis que</h1>
  <p>Le <span class="notranslate">langage GameMaker</span> permet d'effectuer des <i>boucles de</i> plusieurs façons, l'une des plus importantes étant la boucle <tt>while</tt>. Cette fonction de boucle a la forme :</p>
  <p class="code">while (&lt;expression&gt;)<br> {<br> &lt;statement&gt; ;<br> &lt;statement&gt; ;<br>...<br> }</p>
  <p>Il s'agit d'une <a class="glossterm" data-glossterm="déclaration" href="#">instruction</a> qui est itérée encore et encore en fonction des résultats de l'évaluation d'une <a class="glossterm" data-glossterm="expression" href="#">expression</a>.
    une boucle <span class="inline">while</span>, tant que l'expression est évaluée à <span class="inline">true</span>, l'instruction (qui peut également être un bloc de code composé de plusieurs instructions entre crochets <tt>{}</tt>) est exécutée. Vous trouverez ci-dessous
    un exemple d'utilisation typique de &quot;while&quot; :</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br> {
    <br> x -= 1 ;<br> }
  </p>
  <p>Le code ci-dessus vérifie la présence d'une collision entre l'instance appelante et une instance de &quot;mur<span class="glossextra">&quot;.</span> 
    l'instance vers la gauche d'un pixel, jusqu'à ce que l'instance ne soit plus en collision.</p>
  <p><strong>Quand faut-il utiliser une boucle <span class="inline">while</span>?</strong> Elle doit être utilisée chaque fois que vous voulez répéter une ou plusieurs instructions, sans savoir - ou sans vous soucier - du nombre de répétitions.
    l'évaluation initiale est <span class="inline">false</span>, il se peut que les instructions ne soient même pas exécutées.</p>
  <p>Veuillez noter que vous devez <strong>être très prudent avec vos boucles <tt>while</tt></strong>! Vous pouvez facilement faire des boucles <i>infinies</i>, auquel cas votre jeu se bloquera et ne réagira plus à aucune entrée utilisateur et devra être fermé de force. Par exemple :</p>
  <p class="code">while (!place_free(x, y))<br> {
    <br> x = random(room_width) ;<br> y = random(room_height) ;<br> }
  </p>
  <p>Maintenant, le code ci-dessus peut fonctionner correctement, mais il peut aussi causer une boucle infinie si l'instance est incapable de trouver une position vide où se déplacer, et cela fera que le jeu se bloquera. Si vous vous trouvez dans une position où ce genre de chose est possible,
    alors vous devriez soit utiliser un autre type de boucle non-bloquante, soit utiliser une vérification de variable supplémentaire dans l'expression (vous pouvez utiliser plusieurs expressions avec le <a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>),</a>
    <a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span>)</a> et <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span>)</a><span class="glossextra">pour</span> la vérification) :</p>
  <p class="code">var _check = 0 ;<br> while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br> {
    <br> x = random(room_width) ;<br> y = random(room_height) ;<br> _check += 1 ;<br> }
    <br> if _check &gt;= 100<br> {<br> // le code a échoué, il faut donc faire avec<br> }</p>
  <p>Vous pouvez également utiliser l'instruction <span class="inline"><a href="break.htm">break</a></span> pour sortir de la boucle. Par exemple, le code suivant va générer 100 nombres aléatoires puis continuer, même si l'évaluation <span class="inline">while</span> sera <em>toujours</em> <span class="inline">true</span>:</p>
  <p class="code">var i = 0 ;<br> while (true)<br> {
    <br> x[i] = random(room_width) ;<br> y[i] = random(room_height) ;<br> if ((i++) &gt;= 100)<br> {<br> break ;<br> } <br> }
  </p>
  <p>Vous pouvez également utiliser l'instruction <a href="continue.htm">continue</a> dans une boucle <span class="inline">while</span>. Cette instruction permet de mettre fin à l'itération de la boucle en cours et de relancer la boucle à une nouvelle itération, par exemple :</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;) ;<br> var _num = 0 ;<br> while (!file_text_eof(file))<br> {<br> var _s = file_text_readln(file) ;<br> if (_s == &quot;&quot;)<br> {<br> continue ;<br> } <br> str[num++] = _s ;<br> } <br> file_text_close(file) ;
  </p>
  <p>Le code ci-dessus ouvre un fichier et en lit une ligne à chaque itération de la boucle jusqu'à ce que la fin du contenu du fichier soit atteinte. Si la ligne lue est une chaîne vide, l'itération de la boucle en cours est terminée à l'aide de l'instruction <span class="inline">continue</span> et une nouvelle itération est lancée, sinon la chaîne est ajoutée dans un <a href="../Arrays.htm">tableau</a> et la position du tableau est incrémentée.</p>
  <p>Pour d'autres exemples de fonctions de boucle, veuillez consulter les sections suivantes <a href="repeat.htm"><tt>répéter</tt></a>, <a href="do___until.htm"><tt>faire... jusqu'à</tt></a>, et <a href="for.htm"><tt>pour</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Language_Features.htm">Caractéristiques de la langue</a></div>
        <div style="float:right">Suivant : <a href="do___until.htm">do / until</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->

</body></html>