<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>pour</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the for function" />
  <meta name="rh-index-keywords" content="for" />
  <meta name="search-keywords" content="for" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>pour</h1>
  <p>L'une des façons les plus utilisées pour itérer sur une ou plusieurs <a class="glossterm" data-glossterm="déclaration" href="#">déclarations</a> plusieurs fois est d'utiliser une boucle <tt>for</tt>, qui a cette forme :</p>
  <p class="code">for (&lt;assignment&gt; ; &lt;expression&gt; ; &lt;operation&gt; ;)<br> {<br> &lt;statement&gt; ;<br> &lt;statement&gt; ;<br>...<br> }</p>
  <p>Cela fonctionne de la manière suivante : on exécute d'abord l'affectation qui attribue une valeur à une variable, puis on évalue l'<a class="glossterm" data-glossterm="expression" href="#">expression</a> et, si elle est <tt>vraie</tt>, on exécute les instructions entre crochets{}.
    sont exécutées. Ensuite, l'opération est exécutée sur la variable assignée, puis l'expression est évaluée à nouveau. Cette boucle se poursuit jusqu'à ce que l'expression soit <tt>fausse</tt>.</p>
  <p>Maintenant, cela peut sembler compliqué quand c'est écrit comme ça, mais vous devez l'interpréter comme suit :</p>
  <ol>
    <li>La première affectation initialise la boucle for</li>
    <li>L'expression teste si la boucle doit être terminée</li>
    <li>La déclaration est effectuée</li>
    <li>L'opération est effectuée</li>
    <li>Retournez à l'étape 2 et réalisez à nouveau l'expression et continuez ou quittez la boucle.</li>
  </ol>
  <p>C'est extrêmement utile pour effectuer des tâches répétitives qui impliqueraient de multiples lignes de code d'une autre manière, et est couramment utilisé comme compteur pour évaluer des tableaux, dessiner des choses, définir des valeurs incrémentielles, etc... L'exemple de code suivant illustre
    une utilisation typique de ce type d'instruction :</p>
  <p class="code">for (var i = 0 ; i &lt; 10 ; i += 1)<br> {
    <br> draw_text(32, 32 + (i * 32), string(i) + &quot;. &quot;+ string(scr[i])) ;<br> }
  </p>
  <p>Le code ci-dessus initialise une boucle <span class="inline">for</span>, commençant à 0 et comptant jusqu'à (et y compris) 9, puis utilise la valeur de boucle de <tt>i</tt> pour dessiner à l'écran les valeurs stockées dans un tableau. Notez comment la variable de boucle <tt>for</tt> 
   <tt>i</tt> est utilisée non seulement pour boucler le tableau, mais aussi pour dessiner un nombre et indiquer à <span class="notranslate">GameMaker Studio 2</span> où dessiner les valeurs dans la pièce. Cette flexibilité est l'une des principales raisons pour lesquelles les boucles <tt>for</tt> sont si importantes en programmation.</p>
  <p><strong>Quand utiliser une boucle <tt>for</tt></strong>? Chaque fois que vous devez effectuer un nombre fixe d'itérations sur une ou plusieurs instructions tout en gardant la trace de l'<a class="glossterm" data-glossterm="itération" href="#">itération</a> en cours d'exécution et en utilisant cette valeur d'itération.
    en cours d'exécution et en utilisant cette valeur d'itération.</p>
  <p class="note"><b>NOTE</b>: Vous verrez de nombreux exemples, lorsque vous travaillerez avec d'autres personnes, où les variables &quot; i &quot;<tt>et</tt>&quot; j &quot; sont utilisées pour la variable du compteur de boucle. Ces noms de variables <b>ne sont pas</b> obligatoires et vous pouvez utiliser n'importe quoi
    comme &quot; a &quot; ou &quot; foo &quot; ou<tt>autre.</tt> L'utilisation de &quot; i &quot;<tt>et</tt>&quot; j &quot; est simplement une convention standard en programmation.</p>
  <p>Il convient de noter que vous pouvez également utiliser les instructions spéciales <span class="inline"><a href="break.htm">break</a></span> et <span class="inline"><a href="continue.htm">continue</a></span> dans une boucle <span class="inline">for</span>. L'utilisation de <span class="inline">break</span> permet de sortir immédiatement de la boucle et de passer à tout code se trouvant dans l'événement ou la fonction après que la boucle ait dû se terminer, par exemple :</p>
  <p class="code">var _inst = noone ;<br> for (var i = 0 ; i &lt; 10 ; i += 1)<br> {
    <br> _inst = instance_find(obj_Enemy_Parent, i) ;<br> if instance_exists(_inst)<br> {<br> if _inst.object_index == obj_Enemy_Melee<br> {<br> break ;<br> } <br> } <br> } <br> target = _inst ;</p>
  <p>Le code ci-dessus boucle sur les 10 instances les plus proches de l'objet &quot;parent&quot; donné, et si une instance est trouvée, il vérifie l'ID de l'objet de l'instance, et si c'est une instance de <span class="inline">obj_Enemy_Melee</span> alors la boucle est terminée
    en utilisant <span class="inline">break</span> et la valeur de l'ID assignée à une variable (si aucune instance n'est trouvée, alors le mot clé <span class="inline"><a href="../Instance_Keywords.htm">noone</a></span> sera ajouté à la variable).</p>
  <p>Voici un exemple d'utilisation de <span class="inline">continue</span> dans une boucle <span class="inline">for</span>:</p>
  <p class="code">var _val = 0 ;<br> for (var i = 0 ; i &lt; 10 ; i += 1)<br> {
    <br> if (val_array[i] &lt;= 0)<br> {<br> continue ;<br> } <br> _val += val_array[i] ;<br> }
    <br> draw_text(32, 32, &quot;Total des valeurs positives = &quot; + string(_val)) ;</p>
  <p>Ce code va vérifier la valeur stockée dans chaque position d'un tableau 1D <a href="../Arrays.htm">de</a> 10 longueurs, et si l'une d'entre elles est inférieure ou égale à 0, il va <span class="inline">continue</span> la boucle, ce qui signifie que l'itération actuelle va se terminer,
    <span class="inline">i</span> sera incrémenté, et l'itération suivante de la boucle sera lancée. Si la valeur est supérieure à 0, elle est ajoutée à la variable locale <span class="inline">_val</span> et, une fois la boucle terminée, la valeur totale est affichée à l'écran.
    est affichée à l'écran.</p>
  <p>Pour plus d'exemples de mots-clés de boucle, veuillez consulter les sections suivantes <a href="repeat.htm"><tt>répéter</tt></a>, <a href="while.htm"><tt>pendant que</tt></a>, et <a href="do___until.htm"><tt>do / until</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Language_Features.htm">Caractéristiques de la langue</a></div>
        <div style="float:right">Suivant : <a href="switch.htm">interrupteur</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
for
-->
  <!-- TAGS
for
-->

</body></html>