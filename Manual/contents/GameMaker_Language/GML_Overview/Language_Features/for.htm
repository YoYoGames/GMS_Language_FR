<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>for</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page décrivant la fonction for" />
  <meta name="rh-index-keywords" content="for" />
  <meta name="search-keywords" content="for" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>for</h1><p> L&#39;un des moyens les plus utilisés pour itérer <a class="glossterm" data-glossterm="déclaration" href="#">plusieurs fois sur une instruction</a> (ou des instructions) consiste à utiliser une <tt><span class="notranslate">for</span></tt>, qui a cette forme:</p><p class="code">for (&lt;assignment&gt;; &lt;expression&gt;; &lt;operation&gt;;)<br/>     {<br/>     &lt;statement&gt;;<br/>     &lt;statement&gt;;<br/>     ...<br/>     }</p><p> Cela fonctionne comme suit - Tout d&#39;abord, l&#39;affectation est exécutée qui attribue une valeur à une variable, puis l&#39; <a class="glossterm" data-glossterm="expression" href="#">expression</a> est évaluée et, si elle est <tt><span class="notranslate">true</span></tt>, les instructions entre accolades {} sont exécutées. Ensuite, l&#39;opération est effectuée sur la variable affectée, puis l&#39;expression est à nouveau évaluée. Cette boucle se poursuivra jusqu&#39;à ce que l&#39;expression soit jugée <tt><span class="notranslate">false</span></tt>.</p><p> Maintenant, cela peut sembler compliqué quand il est écrit comme ça, mais vous devriez l&#39;interpréter comme:</p><ol><li> La première affectation initialise la boucle for</li><li> L&#39;expression teste si la boucle doit être terminée</li><li> La déclaration est exécutée</li><li> L&#39;opération est effectuée</li><li> Revenez à l&#39;étape 2 et exécutez à nouveau l&#39;expression et continuez ou quittez la boucle</li></ol><p> Ceci est extrêmement utile pour effectuer des tâches répétitives qui impliqueraient plusieurs lignes de code de toute autre manière, et est couramment utilisé comme compteur pour évaluer des tableaux, dessiner des éléments, définir des valeurs incrémentielles, etc. L&#39;exemple de code suivant illustre une utilisation typique pour ce type de déclaration:</p><p class="code">for (var i = 0; i &lt; 10; i += 1)<br/>     {
    <br/>     draw_text(32, 32 + (i * 32), string(i) + &quot;. &quot;+ string(scr[i]));<br/>     }
  </p><p> Le code ci-dessus initialise un <span class="inline">for</span> loop, en commençant à 0 et en comptant jusqu&#39;à (et y compris) 9, puis utilise la valeur de boucle de <tt><span class="notranslate">i</span></tt> pour dessiner les valeurs stockées dans un tableau en bas de l&#39;écran. Notez comment la variable de boucle <tt><span class="notranslate">for</span></tt> <tt><span class="notranslate">i</span></tt> est utilisée non seulement pour parcourir le tableau, mais aussi pour dessiner un nombre et pour indiquer à <span class="notranslate">GameMaker Studio 2</span> où dessiner les valeurs dans la pièce. Cette flexibilité est l&#39;une des principales raisons <tt><span class="notranslate">for</span></tt> lesquelles les boucles for sont si importantes dans la programmation.</p><p> <strong>Quand devriez-vous utiliser une boucle <tt><span class="notranslate">for</span></tt></strong> Chaque fois que vous devez effectuer un nombre fixe d&#39;itérations sur une ou plusieurs instructions tout en gardant une trace de l&#39; <a class="glossterm" data-glossterm="itération" href="#">itération</a> en cours d&#39;exécution et en utilisant cette valeur d&#39;itération.</p><p class="note"> <b>REMARQUE</b>: lorsque vous travaillez avec d&#39;autres personnes, vous verrez plusieurs exemples des variables « <tt><span class="notranslate">i</span></tt> » et « <tt><span class="notranslate">j</span></tt> » utilisées pour la variable de compteur de boucle. Ce <b>ne</b> sont pas des noms de variables obligatoires et vous pouvez utiliser n&#39;importe quoi comme &quot; <tt><span class="notranslate">a</span></tt> &quot; ou &quot; <tt><span class="notranslate">foo</span></tt> &quot; ou autre. L&#39;utilisation de &quot; <tt><span class="notranslate">i</span></tt> &quot; et &quot; <tt><span class="notranslate">j</span></tt> &quot; est simplement une convention standard en programmation.</p><p> Il est à noter que vous pouvez utiliser le spécial <span class="inline"><a href="break.htm">break</a></span> et <span class="inline"><a href="continue.htm">continue</a></span> déclarations dans un <span class="inline">for</span> boucle aussi. Utilisant <span class="inline">break</span> quittera immédiatement la boucle et passera à tout code qui est dans l&#39;événement ou la fonction après que la boucle aurait dû se terminer, par exemple:</p><p class="code">var _inst = noone;<br/> for (var i = 0; i &lt; 10; i += 1)<br/>     {
    <br/>     _inst = instance_find(obj_Enemy_Parent, i);<br/>     if instance_exists(_inst)<br/>         {<br/>         if _inst.object_index == obj_Enemy_Melee<br/>             {<br/>             break;<br/>             }<br/>         }<br/>     }<br/>    target = _inst;</p><p> Le code ci-dessus parcourt les 10 instances les plus proches de l&#39;objet &quot;parent&quot; donné, et si une instance est trouvée, il vérifie l&#39;ID d&#39;objet d&#39;instance, et s&#39;il s&#39;agit d&#39;une instance de <span class="inline">obj_Enemy_Melee</span> puis la boucle se termine en utilisant <span class="inline">break</span> et la valeur d&#39;ID attribuée à une variable (si aucune instance n&#39;est trouvée, alors le mot-clé <span class="inline"><a href="../Instance_Keywords.htm">noone</a></span> sera ajouté à la variable).</p><p> Un exemple d&#39;utilisation <span class="inline">continue</span> dans un <span class="inline">for</span> boucle serait:</p><p class="code">var _val = 0;<br/> for (var i = 0; i &lt; 10; i += 1)<br/>     {
    <br/>     if (val_array[i] &lt;= 0)<br/>         {<br/>         continue;<br/>         }<br/>     _val += val_array[i];<br/>     }
    <br/> draw_text(32, 32, &quot;Positive Values Total = &quot; + string(_val));</p><p> Ce code vérifiera la valeur stockée dans chaque position de tableau d&#39;un <a href="../Arrays.htm">tableau</a> 1D de 10 longueurs, et s&#39;il y en a qui sont inférieurs ou égaux à 0, il sera <span class="inline">continue</span> la boucle, ce qui signifie que l&#39;itération en cours se terminera, <span class="inline">i</span> sera incrémenté et la prochaine itération de boucle sera lancée. Si la valeur est supérieure à 0, elle est ajoutée à la variable locale <span class="inline">_val</span>, et une fois la boucle terminée, la valeur totale est dessinée à l&#39;écran.</p><p> Pour plus d&#39;exemples de mots-clés de boucle, veuillez consulter les sections sur la <a href="repeat.htm"><tt><span class="notranslate">repeat</span></tt></a>, <a href="while.htm"><tt><span class="notranslate">while</span></tt></a> et <a href="do___until.htm"><tt><span class="notranslate">do / until</span></tt></a>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="../Language_Features.htm">Caractéristiques linguistiques</a></div><div style="float:right"> Suivant: <a href="switch.htm"><span class="notranslate">switch</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
for
-->
  <!-- TAGS
for
-->
</body>
</html>