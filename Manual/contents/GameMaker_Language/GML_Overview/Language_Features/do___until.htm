<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>faire / jusqu'à ce que</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the do / until functions" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>faire / jusqu'à ce que</h1>
  <p>Une fonction <tt>do</tt> est une autre façon d'itérer sur une ou plusieurs<span class="glossextra">déclarations</span> plusieurs fois, et est en fait une déclaration &quot; do...<tt>jusqu'à &quot;</tt>.
    vous ne pouvez pas avoir l'une sans l'autre puisque vous demandez à <span class="notranslate">GameMaker Studio 2</span> de faire quelque chose jusqu'à ce qu'une <a class="glossterm" data-glossterm="expression" href="#">expression</a> spécifique renvoie la <tt>vérité</tt>. Elle se présente sous la forme suivante :</p>
  <p class="code">do<br> {
    <br> &lt;déclaration&gt; ;
    <br> &lt;déclaration&gt; ;
    <br> ...
    <br> }
    <br> jusqu'à ce que (&lt;expression&gt;) ;</p>
  <p>L'instruction (qui peut être un bloc de code composé de plusieurs instructions entre accolades <tt>{}</tt>) est exécutée jusqu'à ce que l'expression soit <tt>vraie</tt>, et l'instruction initiale est <strong>toujours exécutée au moins une fois</strong>. Vous trouverez ci-dessous
    ci-dessous un exemple d'utilisation typique de <tt>do... until</tt>:</p>
  <p class="code">faire<br> {
    <br> x = random(room_width) ;<br> y = random(room_height) ;<br> }
    <br> jusqu'à ce que (place_free(x, y)) ;</p>
  <p>Le code ci-dessus essaie de placer l'objet actuel à une position libre et va définir les variables x/y au moins une fois, puis effectuer autant d'<a class="glossterm" data-glossterm="itération" href="#">itérations</a>que nécessaire
    jusqu'à ce que l'expression <tt>place_free()</tt> renvoie <tt>vrai</tt>.</p>
  <p><strong>Quand faut-il utiliser une boucle <span class="inline">do</span> / <span class="inline">until</span>?</strong> Elle doit être utilisée chaque fois que vous voulez répéter une ou plusieurs instructions, mais que vous ne savez pas combien de fois elles doivent être répétées et que vous voulez vous assurer que les instructions sont exécutées au moins une fois avant la fin de la boucle.
    s'assurer que les instructions sont exécutées <em>au moins une fois</em> avant la fin de la boucle.</p>
  <p>Vous pouvez également utiliser les <a href="break.htm"><span class="inline">break</span></a> et <a href="continue.htm"><span class="inline">continue</span></a> dans vos boucles <span class="inline">do</span>. L'utilisation de <span class="inline">break</span> 
    quittera immédiatement la boucle et passera à tout code se trouvant dans l'événement ou la fonction après que la boucle ait dû se terminer, par ex :</p>
  <p class="code">var _id = noone ;<br> do
    <br> {<br> _id = list[| 0] ;<br> if instance_exists(_id)<br> {<br> _break ;<br> } <br> ds_list_delete(list, 0) ;<br> } <br> until (ds_list_empty(list)) ;<br> target = _id ;</p>
  <p>Dans le code ci-dessus, nous créons une variable locale et la définissons comme contenant le mot clé <a href="../Instance_Keywords.htm">noone</a>. Nous exécutons ensuite une boucle <span class="inline">do / until</span> en vérifiant la première position d'une liste DS pour voir si elle contient un ID d'instance valide.
    Si c'est le cas, nous envoyons la boucle à <span class="inline">break</span>, sinon la valeur de la position de la liste est supprimée. Une fois la boucle terminée (soit par <span class="inline">break</span>, soit parce que la liste est vide), la valeur de la variable locale est alors affectée à l'ID d'instance.
    locale est alors affectée à la variable d'instance <span class="inline">target</span>.</p>
  <p>Voici un exemple d'utilisation de continue dans une boucle <span class="inline">do / until</span>:</p>
  <p class="code">do<br> {
    <br> var _x = random(room_width) ;<br> var _y = random(room_height) ;<br> if (instance_position(_x, y, obj_Enemy)<br> {
    <br> continue ;
    <br> }
    <br> instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy) ;<br> }
    <br> jusqu'à ce que (instance_count(obj_Enemy) &gt;= 10) ;</p>
  <p>Ce code génère une position de pièce aléatoire puis vérifie si une instance de l'objet <span class="inline">obj_Enemy</span> existe à cette position. Si c'est le cas, l'itération actuelle de la boucle se termine en utilisant <span class="inline">continue</span> et une nouvelle itération est lancée.
    une nouvelle itération est lancée. Si ce n'est pas le cas, une instance de l'objet <span class="inline">obj_Enemy</span> est créée à la position aléatoire. La boucle ne se termine que lorsqu'il y a 10 instances ou plus de l'objet dans la pièce.</p>
  <p>Une dernière remarque : faites attention à vos boucles <tt>do</tt>, car vous pouvez facilement les faire tourner en boucle à l'infini, auquel cas votre jeu se bloquera et ne réagira plus à aucune entrée de l'utilisateur, qui devra le fermer de force.</p>
  <p>Pour d'autres exemples de mots-clés de boucle, veuillez consulter les sections sur les éléments suivants <a href="repeat.htm"><tt>repeat</tt></a>, <a href="while.htm"><tt>while</tt></a>, et <a href="for.htm"><tt>pour</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Language_Features.htm">Caractéristiques de la langue</a></div>
        <div style="float:right">Suivant : <a href="for.htm">pour</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->

</body></html>