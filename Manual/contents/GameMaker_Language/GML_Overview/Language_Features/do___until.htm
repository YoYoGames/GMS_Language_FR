<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>do / until</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page décrivant les fonctions do / until" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>do / until</h1><p> UNE <tt>do</tt> fonction est une autre façon de itérer sur un ou plusieurs <a class="glossterm" data-glossterm="déclaration" href="#">états</a> plusieurs fois <span class="glossextra">de,</span> et est vraiment un &quot;<tt>do... until</tt> &quot;car vous ne pouvez pas avoir l&#39;un sans l&#39;autre puisque vous <span class="notranslate">GameMaker Studio 2</span> de faire quelque chose jusqu&#39;à ce qu&#39;une <a class="glossterm" data-glossterm="expression" href="#">expression</a> spécifique retourne <tt>true</tt>. Il a cette forme:</p><p class="code">do<br/> {
    <br/> &lt;statement&gt;;
    <br/> &lt;statement&gt;;
    <br/> ...
    <br/> }
    <br/> until (&lt;expression&gt;);</p><p> L&#39;instruction (qui peut être un bloc de code de plusieurs instructions entre accolades <tt>{}</tt> ) est exécutée jusqu&#39;à ce que l&#39;expression soit trouvée <tt>true</tt>, et l&#39;instruction initiale est <strong>toujours exécutée au moins une fois</strong>. Vous trouverez ci-dessous un exemple d&#39;utilisation typique <tt>do... until</tt>:</p><p class="code">do<br/>     {
    <br/>     x = random(room_width);<br/>     y = random(room_height);<br/>     }
    <br/> until (place_free(x, y));</p><p> Les essais de code ci - dessus pour placer l&#39;objet courant à une position libre et fixeront les variables x / y au moins une fois, puis effectuer autant <a class="glossterm" data-glossterm="itération" href="#">itération</a> <span class="glossextra">s</span> que nécessaire jusqu&#39;à ce que la <tt>place_free()</tt> expression renvoie <tt>true</tt>.</p><p> <strong>Quand devriez-vous utiliser un <span class="inline">do</span> / <span class="inline">until</span> boucle?</strong> Il doit être utilisé chaque fois que vous souhaitez répéter une ou plusieurs instructions, mais que vous ne savez pas combien de fois il doit se répéter et que vous voulez vous assurer que les instructions sont exécutées <em>au moins une fois</em> avant la fin de la boucle.</p><p> Vous pouvez également utiliser le<a href="break.htm"><span class="inline">break</span></a> et<a href="continue.htm"><span class="inline">continue</span></a> déclarations dans votre <span class="inline">do</span> boucles. Utilisant <span class="inline">break</span> quittera immédiatement la boucle et passera à tout code qui est dans l&#39;événement ou la fonction après que la boucle aurait dû se terminer, par exemple:</p><p class="code">var _id = noone;<br/> do
    <br/>     {<br/>     _id = list[| 0];<br/>     if instance_exists(_id)<br/>         {<br/>         _break;<br/>         }<br/>     ds_list_delete(list, 0);<br/>     }<br/> until (ds_list_empty(list));<br/> target = _id;</p><p> Dans le code ci-dessus, nous créons une variable locale et la définissons pour contenir le mot-clé<a href="../Instance_Keywords.htm">noone</a>. Nous effectuons ensuite un <span class="inline">do / until</span> vérifiant en boucle la première position d&#39;une liste DS pour voir si elle contient un ID d&#39;instance valide, et si c&#39;est le cas, nous <span class="inline">break</span> la boucle, sinon la valeur de la position de la liste est supprimée. Une fois la boucle terminée (soit par le <span class="inline">break</span> ou parce que la liste est vide) la valeur de la variable locale est alors affectée à la variable d&#39;instance <span class="inline">target</span>.</p><p> Un exemple d&#39;utilisation de continuer dans un <span class="inline">do / until</span> boucle serait:</p><p class="code">do<br/>     {
    <br/>     var _x = random(room_width);<br/>     var _y = random(room_height);<br/>     if (instance_position(_x, y, obj_Enemy)<br/>         {
    <br/>         continue;
    <br/>         }
    <br/>     instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br/>     }
    <br/> until (instance_count(obj_Enemy) &gt;= 10);</p><p> Ce code générera une position de pièce aléatoire puis vérifiera si une instance de l&#39;objet <span class="inline">obj_Enemy</span> existe à cette position. Si tel est le cas, l&#39;itération de la boucle actuelle se termine en utilisant <span class="inline">continue</span> et une nouvelle itération est lancée, et si ce n&#39;est pas le cas, une instance de l&#39;objet <span class="inline">obj_Enemy</span> est créé à la position aléatoire. La boucle ne se terminera que lorsqu&#39;il y a 10 instances ou plus de l&#39;objet dans la pièce.</p><p> Une dernière remarque: soyez prudent avec votre <tt>do</tt> boucles, car vous pouvez facilement les faire boucler pour toujours, auquel cas votre jeu se bloque et ne réagit plus à aucune entrée de l&#39;utilisateur et il devra forcer sa fermeture.</p><p> Pour plus d&#39;exemples de mots-clés de boucle, veuillez consulter les sections sur <a href="repeat.htm"><tt>repeat</tt></a>, <a href="while.htm"><tt>while</tt></a>, et <a href="for.htm"><tt>for</tt></a>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="../Language_Features.htm">Caractéristiques linguistiques</a></div><div style="float:right"> Suivant:<a href="for.htm">for</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->
</body>
</html>