<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Tableaux</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Arrays" />
  <meta name="rh-index-keywords" content="Arrays" />
  <meta name="search-keywords" content="Arrays" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Tableaux</h1>
  <p>Les tableaux peuvent être extrêmement utiles et constituent un élément essentiel de la création de jeux. Voici quelques exemples de choses qui seraient impossibles (ou du moins beaucoup plus difficiles) sans les tableaux :</p>
  <ul class="colour">
    <li>Les menus. Un tableau ou deux peuvent faciliter la création d'un bon système de menus.</li>
    <li>RPGs. Les tableaux sont essentiels pour la création de RPG, car au lieu d'avoir un fouillis de variables, vous n'avez que quelques lignes, auxquelles vous pouvez vous référer à tout moment.</li>
    <li>Jeux de cartes. Idéal pour garder la trace des cartes et des mains.</li>
    <li>Les meilleurs scores et autres statistiques. Il est beaucoup plus facile de garder la trace d'un tableau que de multiples variables.</li>
  </ul>
  <p>Ce n'est que la partie visible de l'iceberg, car les tableaux sont l'un des outils de programmation les plus fondamentaux et les plus utiles que vous puissiez utiliser, et vous seriez surpris des applications qu'ils peuvent avoir ! Ils sont également très efficaces en termes de mémoire et généralement rapides à analyser,
    ce qui les rend idéaux pour maintenir les performances au maximum.</p>
  <p><label for="aone">Un tableau de base est classé comme ayant une <strong>dimension</strong>, mais vous pouvez aussi avoir des tableaux avec plus d'une dimension. Les sections ci-dessous expliquent un peu plus les deux types de tableaux : </label></p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Tableaux à 1 dimension</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Avant d'aller plus loin, précisons ce qu'est un tableau et comment il est structuré. Un tableau est tout simplement un <a href="Data_Types.htm">type de données</a> qui est assigné à une variable, et il peut contenir non seulement une valeur, mais de multiples
      valeurs. L'image ci-dessous montre le schéma d'un tableau de base : </p>
    <p class="dropspot"><img class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/1DArrayExample.png" /></p>
    <p class="dropspot">C'est ce qu'on appelle un tableau <strong>1D</strong> (une dimension), et comme vous pouvez le voir, le tableau est stocké dans la variable &quot;<span class="inline">a</span>&quot; et contient plusieurs valeurs. Pour accéder au tableau, il faut faire quelque chose comme ce qui suit :</p>
    <p class="code">var _val = a[0] ;<br> show_debug_message(_val) ;
    </p>
    <p class="dropspot">Le code ci-dessus récupère la valeur de la position 0 du tableau &quot;a&quot; puis l'envoie à la console, qui - sur la base du contenu du tableau montré dans l'image ci-dessus - devrait afficher 125. Si vous faites ce qui suit :</p>
    <p class="code">var _val = a[3] ;<br> show_debug_message(_val) ;
    </p>
    <p class="dropspot">La sortie indiquerait &quot;Salut !&quot;.</p>
    <p class="dropspot">Comme vous pouvez le voir, vous donnez au tableau un nom de variable, puis une valeur entre crochets <span class="inline">[]</span>, où la valeur est la position dans le tableau pour obtenir des données. Donc, essentiellement, un tableau est un conteneur avec un certain nombre d'espaces pour
      stocker des valeurs, et chaque position dans le conteneur a un numéro spécifique pour l'identifier, qui est ce que nous mettons dans le <span class="inline">[]</span>. Il est intéressant de noter que le contenu d'un tableau <b>commence toujours à 0 et</b> <i>ne peut jamais être négatif !</i></p>
    <p class="dropspot">Nous avons montré comment vérifier la présence de données dans un tableau, mais comment créer le tableau pour commencer ? Il faut d'abord l'<i>initialiser</i> avant de pouvoir l'utiliser, sinon <span class="notranslate">GameMaker Studio 2</span> nous enverra une erreur. L'initialisation d'un tableau signifie simplement que nous donnons à chaque position du tableau une valeur initiale dans le tableau.
      position du tableau une valeur initiale en vue de son utilisation dans le code du projet. Il est important de s'en souvenir car cela signifie que vous devez faire un peu de planification avant d'utiliser des tableaux, mais il est assez facile d'en initialiser un en utilisant une boucle répétitive comme celle-ci.
      un tableau en utilisant une boucle répétitive comme ceci...</p>
    <p class="code">var i = 9 ;<br> repeat(10)
      <br> {
      <br> array[i] = 0 ;<br> i -= 1 ;<br> }
    </p>
    <p class="dropspot">Ce code simple initialisera un tableau de dix positions (de 0 à 9) pour contenir 0, c'est-à-dire que chaque position du tableau contient la valeur 0. Vous remarquerez que le tableau a été initialisé <i>à l'envers</i>, la dernière valeur étant définie en premier. Ce
      Ce n'est pas strictement nécessaire, mais c'est la meilleure façon de procéder, car cela permet de réserver un espace en mémoire qui correspond à la taille exacte du tableau, alors que si vous initialisez un tableau à <em>partir</em> de 0, la mémoire doit être réallouée pour chaque valeur supplémentaire ajoutée (ainsi, pour un tableau de dix éléments, la mémoire doit être réallouée pour chaque valeur supplémentaire).
      supplémentaire ajoutée (ainsi, pour un tableau de dix éléments, l'initialiser dans une boucle modifierait dix fois l'allocation de mémoire). La différence de vitesse est négligeable pour les petits tableaux, mais les tableaux plus grands devraient être optimisés autant que possible de cette manière.</p>
    <p class="note"><b>REMARQUE</b>: L'exportation HTML5 est l'exception à la règle ci-dessus, et lorsque vous ciblez cette cible, vous devez initialiser les tableaux dans un ordre consécutif à partir de 0.</p>
    <p class="dropspot">Vous pouvez également utiliser la fonction <span class="notranslate">GML</span> <a href="../GML_Reference/Variable_Functions/array_create.htm"><tt>array_create()</tt></a> pour initialiser un tableau à une taille fixe, et vous pouvez même créer des tableaux &quot;vides&quot; sans valeur, par exemple :</p>
    <p class="code">mon_tableau= [] ;</p>
    <p class="dropspot">Cela indique à <span class="notranslate">GameMaker</span> que la variable &quot;mon_tableau&quot; est un tableau, et que vous pouvez donc y ajouter des valeurs à tout moment. Cependant, si vous essayez d'accéder à une valeur dans un tableau vide, vous obtiendrez une erreur. En fait, vous devez toujours veiller à
      attention à n'accéder qu'aux positions valides du tableau, car si vous essayez d'accéder à une valeur en dehors d'un tableau, vous obtiendrez également une erreur. Par exemple, cela provoquera un crash du projet lors de son exécution :</p>
    <p class="code">mon_tableau = array_create(5, 0) ;<br> var _val = mon_tableau[6] ;</p>
    <p class="dropspot">Le tableau n'a été initialisé qu'avec 5 positions, mais nous avons essayé d'obtenir la position 7 - les tableaux sont numérotés à partir de 0, donc <span class="inline">array[6]</span> est la position 7 - le jeu génère donc une erreur et se plante.</p>
    <p class="dropspot">Nous avons montré comment initialiser un tableau avec la même valeur pour chaque position, mais que faire si nous voulons initialiser le tableau avec des valeurs différentes pour chaque position ? Pour cela, nous devons saisir manuellement chaque position, mais il existe une astuce intéressante pour nous aider à garder la trace de ces valeurs.
      il existe une astuce pour nous aider à garder la trace des choses :</p>
    <p class="code">var _count = 3 ;<br> array[_count] = &quot;you ?&quot;<br> count -= 1 ;<br> array[_count] = &quot;are &quot;<br> count -= 1 ;<br> array[_count] = &quot;How &quot;<br> count -= 1 ;<br> array[_count] = &quot;Hello !&quot;<br> count -= 1 ;</p>
    <p class="dropspot">Comme vous pouvez le constater, nous n'avons pas utilisé de chiffres dans le tableau proprement dit, mais plutôt une <a href="Variables/Local_Variables.htm">variable locale pour</a> décompter les valeurs. C'est très utile, surtout pour les tableaux de grande taille, car cela signifie que vous n'avez pas à suivre le nombre de positions ni le numéro sur lequel vous vous trouvez.
      car cela signifie que vous n'avez pas besoin de savoir combien de positions il y a ni sur quel numéro vous êtes, car le code s'en occupe pour vous. Il suffit de connaître le nombre total de positions que le tableau doit contenir.</p>
    <p class="dropspot">Enfin, vous pouvez affecter les valeurs à un tableau en utilisant un appel de variable unique comme ceci :</p>
    <p class="code">var _a = [0, 1, 2, 3, 4] ;<br> var _b = [] ;</p>
    <p class="dropspot">L'exemple ci-dessus créera deux tableaux en tant que variables locales, le premier étant déjà peuplé de 5 éléments et le second étant un tableau vide prêt à recevoir des valeurs.</p>
    <p class="dropspot">Ceci étant fait, comment utiliser un tableau pour des choses pratiques ? Exactement de la même manière que nous utiliserions une variable normale, comme le montrent les exemples suivants :</p>
    <p class="code">// Additionne deux valeurs de tableau<br> total = tableau[0] + tableau[5] ;<br>
      <br> // Vérifie une valeur de tableau<br> if (tableau[9]) == 10<br> {
      <br> // Faire quelque chose<br> }
      <br>
      <br> // Dessine une valeur de tableau<br> draw_text(32, 32, array[3]) ;</p>
    <p class="dropspot">Comme les tableaux sont numérotés consécutivement, cela signifie que vous pouvez les parcourir en boucle pour effectuer des actions supplémentaires, comme nous l'avons fait pour les initialiser :</p>
    <p class="code">var total = 0 ;<br> for (var i = 0 ; i &lt; 10 ; ++i ;)<br> {
      <br> total += tableau[i] ;<br> draw_text(32, 32 + (i * 32), tableau[i]) ;<br> }
      <br> draw_text(32, 32 + (i * 32), total) ;</p>
    <p class="dropspot">Le code ci-dessus va additionner toutes les valeurs de notre tableau, dessiner chacune d'entre elles et afficher la valeur totale à la fin.</p>
    <p class="dropspot">La dernière chose à mentionner à propos des tableaux est que vous pouvez également supprimer un tableau simplement en &quot;réassignant&quot; la variable qui le définit à une valeur unique. Cela libérera la mémoire associée à toutes les positions et valeurs de ce tableau.
      Par exemple :</p>
    <p class="code">//Créer le tableau for (var i = 9 ; i &gt; -1 ; --i ;)<br> {
      <br> a[i] = i ;<br> }
      <br> //Supprimer le tableau<br> a = -1 ;</p>
    <p class="dropspot">Si le tableau a plusieurs dimensions (voir ci-dessous), elles seront toutes nettoyées également, et notez que lorsque vous créez des tableaux dans des instances, ceux-ci n'ont pas besoin d'être nettoyés lorsque l'instance est retirée du jeu, car ils seront supprimés automatiquement par le garbage collector lors de la destruction ou de la fin de la room.
      automatiquement par le <a class="glossterm" data-glossterm="éboueur" href="#">ramasseur d'ordures</a> à la destruction ou à la fin de l'instance. Cependant, si l'une des positions du tableau contient des références à des actifs <em>dynamiques</em> - comme des systèmes de particules, des tampons ou des structures de données
      - alors celles-ci <em>devront</em> être détruites avant que le tableau ne soit supprimé ou que l'instance ne soit détruite ou que la pièce ne se termine.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Matrices multidimensionnelles</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span style="text-align: justify;">Nous savons ce qu'est un tableau à une dimension, mais dans <span class="notranslate">GameMaker Studio 2</span>, vous pouvez avoir des tableaux à plusieurs dimensions, qui sont essentiellement structurés comme un tableau dans un tableau dans un tableau... Par exemple, le tableau suivant est un tableau <strong>2D</strong> (à deux dimensions)</span></p>
    <p class="code"><span style="text-align: justify;"></span>tableau[0][0] = 5 ;</p>
    <p class="dropspot">Cela revient à dire à <span class="notranslate">GameMaker</span> que le tableau est en fait composé de plusieurs tableaux 1D. Voici un exemple détaillé :</p>
    <p class="code">array[1][2] = 1 ;<br> array[1][1] = &quot;hello&quot; ;<br> array[1][0] = 55.5 ;<br> array[0][2] = sprite_index ;<br> array[0][1] = &quot;world&quot; ;<br> array[0][0] = -67.89 ;</p>
    <p class="dropspot">Un tableau multidimensionnel doit être initialisé avant d'être utilisé, de la même manière qu'un tableau simple à 1D, et peut contenir des nombres réels, des chaînes de caractères et tout autre <a href="Data_Types.htm">type de données</a>, comme n'importe quelle variable.
      qui a besoin de stocker de grandes quantités de données d'une manière facilement accessible (rappelez-vous que vous pouvez facilement boucler dans un tableau). Voici un dernier exemple de la façon dont cela peut être utilisé dans un jeu réel... Supposons que vous vouliez faire apparaître quatre ennemis différents à quatre moments
      points de votre jeu en fonction d'une valeur aléatoire. Eh bien, nous pouvons utiliser un tableau à 2 dimensions pour le faire et éviter d'écrire une grande quantité de code.</p>
    <p class="dropspot">Tout d'abord, nous devons initialiser le tableau que nous allons utiliser dans l'événement create de notre objet &quot;controller&quot; (notez l'utilisation de commentaires pour vous rappeler ce que fait chaque entrée du tableau) :</p>
    <p class="code">ennemi[3][2] = 448 ; //position y<br> ennemi[3][1] = 32 ; //position x<br> ennemi[3][0] = obj_Slime ; //Objet<br> ennemi[2][2] = 448 ;<br> ennemi[2][1] = 608 ;<br> ennemi[2][0] = obj_Skeleton ; <br> ennemi[1][2] = 32 ;<br> ennemi[1][1] = 608 ;<br> ennemi[1][0] = obj_Knight ;<br> ennemi[0][2] = 32 ;<br> ennemi[0][1] = 32 ;<br> ennemi[0][0] = obj_Ogre ;</p>
    <p class="dropspot">Nous avons maintenant les objets pour créer des instances et leurs coordonnées x et y correspondantes dans la pièce, le tout stocké dans notre tableau. Ceci peut maintenant être utilisé comme suit dans un autre événement de l'objet contrôleur (une alarme par exemple, ou une pression de touche
      ) :</p>
    <p class="code">//obtient un nombre aléatoire de 0 à 3, inclus<br> var i = irandom(3) ;<br> //Utilise le tableau pour créer l'objet<br> instance_create_layer(enemy[i][1], enemy[i][2], &quot;Enemy_Layer&quot;, enemy[i][0]) ;</p>
    <p class="dropspot">Ce court code va maintenant faire apparaître un ennemi aléatoire dans la salle de jeu, et il utilise beaucoup moins de code qu'une structure &quot; if /<tt>then / else &quot;</tt> ou même un &quot; switch &quot;, et comme<tt>le</tt> tableau est initialisé tous ensemble dans l'événement create
      il est BEAUCOUP plus facile d'éditer et de modifier n'importe laquelle de ces valeurs car elles ne sont pas <a class="glossterm" data-glossterm="codé en dur" href="#">codées en dur</a> dans le reste du code du projet.</p>
    <p class="dropspot">Il faut également noter que la longueur de chaque dimension du tableau peut être différente, ainsi vous pouvez avoir la dimension initiale du tableau avec une longueur de 3, mais la deuxième entrée de la dimension peut avoir une longueur différente pour chacune des valeurs initiales du tableau.
      à laquelle elle est affectée, par exemple :</p>
    <p class="code">tableau[2][2] = &quot;3&quot; ;<br> tableau[2][1] = &quot;2&quot; ;<br> tableau[2][0] = &quot;1&quot; ;<br> tableau[1][3] = &quot;quatre&quot; ;<br> tableau[1][2] = &quot;trois&quot; ;<br> tableau[1][1] = &quot;deux&quot; ;<br> tableau[1][0] = &quot;un&quot; ;<br> tableau[0][1] = 2 ;<br> tableau[0][0] = 1 ;</p>
    <p class="dropspot">Enfin, les tableaux multidimensionnels ne sont pas limités <em>à </em>deux dimensions, et vous pouvez avoir 3, 4 ou plus de dimensions à un tableau selon les besoins de votre code, en ajoutant simplement <span class="inline">[n]</span> arguments supplémentaires, par exemple :</p>
    <p class="code">array[0][0][0] = 1 ; // Un tableau à trois dimensions<br> array[0][0][0][0] = 1 ; // Un tableau à quatre dimensions<br> // etc...</p>
  </div>
  <p> </p>
  <p>Tout comme les variables normales, vous pouvez transmettre des tableaux aux <a href="Script_Functions.htm">fonctions de script</a> et aux <a href="Method_Variables.htm">variables de méthode</a> pour qu'ils soient utilisés puis renvoyés à l'instance qui a appelé la fonction. Pour ce faire
    vous devez simplement spécifier la variable tableau (pas besoin de chacune des positions individuelles, ni des parenthèses <span class="inline">[]</span> ) et le tableau entier sera <b>passé par référence</b> dans la fonction. Cependant, si vous modifiez une
    des valeurs du tableau, celui-ci sera copié dans un tableau <em>temporaire </em>réservé à cette fonction. <strong>Notez l'utilisation du mot <i>temporaire</i></strong> ici ! Vous ne passez pas réellement le tableau lui-même dans la fonction (comme vous le feriez avec une
    ), mais vous demandez à la fonction de créer une <i>copie</i> de ce tableau, que vous allez modifier. Cela signifie que vous <b>devez toujours retourner le tableau</b> depuis la fonction si vous souhaitez modifier une valeur du tableau (ce comportement est appelé " copy on write ").
    ce comportement est appelé &quot; copy<em>on write &quot;).</em></p>
  <p class="note"><b>NOTE : </b>En raison de la façon dont cela fonctionne en interne, le passage de tableaux aux fonctions peut affecter les performances, en particulier si le tableau est très grand. Utilisez donc cette fonctionnalité avec précaution !</p>
  <p>À titre d'exemple, considérons le code suivant. D'abord, nous créons le tableau que nous voulons utiliser, puis nous passons ce tableau à la fonction :</p>
  <p class="code">for (var i = 9 ; i &gt; -1 ; --i ;)<br> {
    <br> a[i] = i ;<br> }
    <br> mon_tableau_func(a) ;
  </p>
  <p>La fonction elle-même est quelque chose de simple comme :</p>
  <p class="code">my_array_func = function(array)<br> {
    <br> for (var i = 9 ; i &gt; -1 ; --i ;)<br> {
    <br> array[i] = i * 100 ;<br> }
    <br> }
  </p>
  <p>Maintenant, on pourrait s'attendre à ce que le tableau final contienne les valeurs 900, 800, 700, etc... MAIS ce ne sera pas le cas, puisque nous <i>n'avons pas</i> retourné le tableau depuis la fonction, donc tout ce que nous avons changé est la copie temporaire qui a été créée lorsque nous avons passé le tableau
    comme argument dans la fonction, et lorsque la fonction est terminée, cette copie temporaire disparaît également. Pour rectifier cela, nous aurions dû formater le code comme suit :</p>
  <p class="code">for (var i = 9 ; i &gt; -1 ; --i ;)<br> {
    <br> a[i] = i ;<br> }
    <br> a = my_array_func(a) ;</p>
  <p>Et la fonction devrait maintenant ressembler à ceci :</p>
  <p class="code">my_array_func = function(array)<br> {
    <br> for (var i = 9 ; i &gt; -1 ; --i ;)<br> {
    <br> array[i] = i * 100 ;<br> }
    <br> return array ;<br> }
  </p>
  <p class="note"><b>NOTE : </b>Ce qui précède <b>n'</b> est <b>pas</b> nécessaire si vous ne modifiez aucune des valeurs du tableau, mais que vous les référencez simplement. Le fait de référencer un tableau ne le copiera pas et sera plus rapide à analyser.</p>
  <p>Il convient également de noter que vous pouvez utiliser l'accesseur <tt>@</tt> pour référencer un tableau à partir d'une fonction et modifier ses valeurs directement, ce qui permet d'éviter la surcharge du processeur due à la copie du tableau dans la fonction. Vous pouvez trouver plus d'informations sur les accesseurs
    et leur fonctionnement, ainsi qu'un exemple pour les tableaux, à la page suivante :</p>
  <ul class="colour">
    <li><a href="Accessors.htm">Accesseurs</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="GML_Overview.htm">Aperçu du<span class="notranslate">GML</span></a></div>
        <div style="float:right">Suivant : <a href="Data_Types.htm">Types de données</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Arrays
passing arrays to scripts
deleting arrays
-->
  <!-- TAGS
arrays
-->

</body></html>