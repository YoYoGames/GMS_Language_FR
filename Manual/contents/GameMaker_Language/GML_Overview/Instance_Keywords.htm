<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Mots clés de l'instance</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different instance &quot;keywords&quot;" />
  <meta name="rh-index-keywords" content="Instance Keywords,noone,self,other,all" />
  <meta name="search-keywords" content="self,all,noone,other,instance keywords" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Mots clés de l'instance</h1>
  <p>Pour faciliter certaines choses dans <span class="notranslate">GameMaker Studio 2</span>, vous pouvez utiliser l'un des nombreux <b>mots-clés d'instance</b> dans votre code (qu'il soit <span class="notranslate">GML</span> ou <span class="notranslate">Drag and Drop™</span>). Ces mots-clés sont principalement utilisés pour identifier les instances - et dans certains cas les structs - dans différentes situations.
    situations et chacun d'entre eux est expliqué dans le texte ci-dessous. Notez que tous les mots-clés sont représentés par une <strong>valeur entière négative</strong> en interne, il faut donc faire attention lors de l'affectation ou de la vérification des valeurs de variables par rapport à ces mots-clés ou avec eux,
    car vous pourriez obtenir des résultats inattendus par la suite, <span class="notranslate">GameMaker Studio 2</span> interprétant la valeur que vous avez utilisée comme autre chose. Vous devez également noter que l'utilisation des valeurs à la place des mots-clés dans votre code <b>n'</b> est <b>pas du tout recommandée</b> et pourrait causer des problèmes
    plus tard.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span class="inline">self</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <table>
      <tbody>
        <tr>
          <th>Mot clé</th>
          <th>Description</th>
          <th>valeur</th>
        </tr>
        <tr>
          <td><span class="inline">self</span></td>
          <td>L'instance/structure qui exécute le bloc de code actuel.</td>
          <td>   -1</td>
        </tr>
      </tbody>
    </table>
    <p class="dropspot"> </p>
    <p class="dropspot"><span class="inline">self</span> peut être utilisé pour identifier la structure ou l'instance actuelle qui est dans le champ d'application dans le bloc de code actuel. Par exemple :</p>
    <p class="code">var val = 100 ;<br> with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Fire))<br> {
      <br> self.val = val ;<br> }
    </p>
    <p class="dropspot">Dans cet exemple, vous pouvez voir que nous avons une variable <i>locale</i> appelée <span class="inline">val</span> et que nous voulons qu'elle définisse la variable d'<i>instance</i> portant le même nom dans l'instance d'objet nouvellement créée. Pour identifier correctement la variable d'instance
      et indiquer à <span class="notranslate">GameMaker Studio 2</span> de la définir dans l'instance appelant le bloc de code, nous utilisons le mot-clé <span class="inline">self</span>. Dans la plupart des cas, vous pouvez également utiliser la variable d'instance intégrée <span class="inline">id</span> au lieu de <span class="inline">self</span>,
      mais <span class="inline">self</span> offre certains avantages. Tout d'abord, il est plus rapide pour le compilateur d'identifier l'instance (ou la structure) en utilisant <span class="inline">self</span> plutôt que <span class="inline">id</span>, car la valeur de l'<tt>id</tt> passe par la table de recherche de l'instance alors que <span class="inline">self</span> ne le fait pas. Deuxièmement, pour les personnes qui créent des extensions, il est très utile de s'assurer de la portée correcte des variables, car il est possible qu'un projet qui utilise une extension ait une variable de portée globale.
      une extension puisse avoir une variable de portée globale ou quelque chose avec le même nom qu'une variable dans l'extension.</p>
    <p class="note"><strong>REMARQUE</strong>: Le mot-clé <span class="inline">self</span> <strong>n'</strong>est <strong>pas </strong>un raccourci pour la valeur d'identification réelle d'une instance ou d'une structure et ne doit être utilisé que dans le contexte expliqué ci-dessus. Si vous avez besoin de la <strong>valeur </strong>ID d'une
      une instance, vous devez utiliser <span class="inline">self.id</span>, par exemple :</p>
    <p class="code">var myID = id ;<br> with (all)<br> {
      <br> if self.id == myID<br> {<br> // faire quelque chose<br> } <br> }
    </p>
    <p class="dropspot">Il convient également de noter que <span class="inline">self</span> peut également être utilisé dans les <a href="Structs.htm">structures</a> - dans des circonstances très spécifiques - pour référencer les variables membres de la structure.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span class="inline">other</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <table>
      <tbody>
        <tr>
          <th>Mot clé</th>
          <th>Description</th>
          <th>valeur</th>
        </tr>
        <tr>
          <td><span class="inline">other</span></td>
          <td>L'autre instance impliquée dans un événement de collision, ou l'autre instance ou structure d'une fonction <tt>avec</tt>.</td>
          <td>   -2</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
    <p class="dropspot">Le <i>mot-clé</i> spécial <span class="inline">other</span> peut être utilisé de deux manières différentes pour faire référence à une instance spécifique (et dans certains cas, à une structure) : lorsqu'il est utilisé dans une fonction <span class="inline">with</span> (expliqué <a href="Language_Features/with.htm">ici</a>)
      ou lorsqu'il est utilisé dans un <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">événement de collision</a>, ce qui est ce que cette section va expliquer.</p>
    <p class="dropspot">Un événement de collision ne peut se produire qu'entre deux instances. Vous <i>pouvez</i> avoir plusieurs collisions entre plusieurs instances, mais elles sont toutes résolues par <span class="notranslate">GameMaker Studio 2</span> sur une base individuelle, avec l'instance qui a l'événement de collision et l'"autre" instance impliquée.
      l'&quot;autre&quot; instance impliquée. Imaginez que vous ayez un objet joueur, plusieurs objets ennemis et plusieurs objets balles que l'ennemi peut vous tirer dessus. Vous pouvez attribuer à chaque ennemi une seule instance de balle, mais avec une variable de dégâts différente
      qui lui est attribuée aléatoirement lors de sa création, par exemple :</p>
    <p class="code">var nnn ;<br> nnn = instance_create_layer(x, y, &quot;Bullets&quot;, obj_Bullet) ;<br> nnn.damage = 5 + irandom(5) ;<br> nnn.speed = 8 ;<br> nnn.direction = point_direction(x, y, obj_Player.x, obj_Player.y) ;</p>
    <p class="dropspot">Vous pouvez voir comment nous définissons ses variables à l'aide de la &quot;méthode des points&quot; décrite dans la section &quot;Adresser les <a href="Addressing_Variables_In_Other_Instances.htm">variables dans d'autres instances&quot;.</a> Cela donnera aux objets balles une valeur de dommage
      différents. Mais qu'en est-il de l'objet joueur ? Comment va-t-il détecter les dégâts qu'il doit subir ? En utilisant <span class="inline">other</span> dans l'événement de collision :</p>
    <p class="code">hp -= other.damage ;<br> if hp &lt;= 0 instance_destroy() ;</p>
    <p class="dropspot">Le code ci-dessus déduira le montant stocké dans l'<i>autre</i> instance dans la variable &quot;damage&quot; des collisions de la variable &quot;hp&quot; du joueur, puis il vérifiera si le &quot;hp&quot; est inférieur ou égal à 0. Si c'est le cas
      alors il détruira l'objet joueur. Veuillez noter qu'une <b>autre</b> instance utilisée de cette manière <i>ne fonctionne que dans l'événement de collision</i> et que l'autre instance doit avoir la variable à vérifier, sinon une erreur sera déclenchée. Cependant, vous pouvez assigner
      des valeurs aux variables, ou même en créer de nouvelles, en utilisant <span class="inline">other</span> dans l'événement de collision également, comme ceci :</p>
    <p class="code">//ajoute dix à la variable &quot;mana&quot; de l'autre instance<br> other.mana += 10 ;<br> //définit la variable &quot;hit&quot; de l'autre instance à true, en la créant si la variable n'existe pas déjà<br> other.hit = true ;</p>
    <p class="dropspot">Il convient également de noter que <span class="inline">other</span> peut également être utilisé dans les <a href="Structs.htm">structures</a> - dans des circonstances très spécifiques - pour référencer les variables membres de la structure. </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span class="inline">all</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <table>
      <tbody>
        <tr>
          <th>Mot clé</th>
          <th>Description</th>
          <th>valeur</th>
        </tr>
        <tr>
          <td><span class="inline">all</span></td>
          <td>Toutes les instances actuellement actives dans la salle.</td>
          <td>   -3</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
    <p class="dropspot">Ce mot-clé est utilisé pour indiquer à <span class="notranslate">GameMaker Studio 2</span> qu'une fonction doit être appliquée, ou pour vérifier, toutes les instances actives d'une room (les instances désactivées ne seront pas vérifiées ou accédées). Vous <b>ne pouvez pas</b> utiliser <span class="inline">all</span> pour accéder à
      ou définir des variables dans d'autres instances en utilisant la méthode du point (voir <a href="Addressing_Variables_In_Other_Instances.htm">ici</a>), mais vous <strong>pouvez </strong>l'utiliser lors de l'appel de la fonction <a href="Language_Features/with.htm"><tt>avec()</tt></a>par exemple :</p>
    <p class="code">avec (tous)<br> {
      <br> vitesse = 0 ;<br> }
    </p>
    <p class="dropspot">Le code ci-dessus réglera la vitesse de toutes les instances de la pièce sur 0. Vous pouvez également utiliser <span class="inline">all</span> dans les fonctions pour cibler ou vérifier toutes les instances de la pièce, par exemple :</p>
    <p class="code">//Chercher un point pour toute instance active dans la salle<br> inst = instance_position(mouse_x, mouse_y, all) ; <br>
      <br> //Chercher une collision entre toutes les instances le long d'une ligne<br> if collision_line(x, y, mouse_x, mouse_y, all, false, true) {}<br>
      <br> //Ajouter toutes les instances de la salle dans une grille de planification de mouvement<br> mp_grid_add_instances(grid, all, false) ;</p>
    <p class="dropspot"><span class="inline">all</span> est un mot-clé très utile qui peut être utilisé dans de nombreuses situations au sein de votre code et de vos actions, réduisant souvent la quantité de code que vous devez écrire pour obtenir un effet souhaité.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span class="inline">noone</span></a></p>
  <div class="droptext" data-targetname="drop-down3">
    <table>
      <tbody>
        <tr>
          <th>Mot clé</th>
          <th>Description</th>
          <th>valeur</th>
        </tr>
        <tr>
          <td><span class="inline">noone</span></td>
          <td>Aucune instance du tout.</td>
          <td>   -4</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
    <p class="dropspot">Cela peut sembler étrange, mais souvent, en programmant vos jeux, vous aurez besoin de vérifier si aucune instance n'a été trouvée à un endroit, ou dans une collision, etc... Dans ces cas, vous utiliserez ce mot-clé pour vérifier qu'il n'y a rien, quelque chose comme ceci :</p>
    <p class="code">if instance_nearest(x, y, obj_enemy) != noone<br> {
      <br> //faites quelque chose car il y a une instance ennemie à proximité<br> }
    </p>
    <p class="dropspot">Dans cet exemple, la fonction <span class="inline">instance_nearest()</span> renverra soit <span class="inline">noone</span>, soit l'ID unique de l'instance trouvée la plus proche. En fait, chaque fois que vous avez besoin de vérifier une instance, vous pouvez vous attendre à ce que
      à obtenir soit <span class="inline">noone</span>, soit un ID d'instance unique.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="GML_Overview.htm">Aperçu du<span class="notranslate">GML</span></a></div>
        <div style="float:right">Suivant : <a href="Addressing_Variables_In_Other_Instances.htm">Adresser des variables dans d'autres instances</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Instance Keywords
self
all
noone
other
-->
  <!-- TAGS
instance_keywords
-->
</body>
</html>