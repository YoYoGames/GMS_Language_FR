<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Mots-clés d&#39;instance</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page décrivant les différents &quot;mots clés&quot; d&#39;instance" />
  <meta name="rh-index-keywords" content="Mots-clés d&#39;instance,noone,self,other,all" />
  <meta name="search-keywords" content="self,all,noone,other,mots-clés d&#39;instance" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> Mots-clés d&#39;instance</h1><p> Pour faciliter certaines choses dans <span class="notranslate">GameMaker Studio 2</span>, vous pouvez utiliser l&#39;un des <b>mots-clés d&#39;instance</b> dans votre code (que ce soit <span class="notranslate">GML</span> ou <span class="notranslate">Drag and Drop</span>™). Ces mots-clés sont principalement utilisés pour identifier des instances - et dans certains cas des structures - dans des situations différentes et chacune est expliquée dans le texte ci-dessous. Notez que tous les mots-clés sont représentés par une <strong>valeur entière négative en</strong> interne, il faut donc faire attention lors de l&#39;attribution ou de la vérification des valeurs de variable par rapport ou avec ces mots-clés, car vous pouvez obtenir des résultats inattendus plus tard, car <span class="notranslate">GameMaker Studio 2</span> interprète la valeur que vous avez utilisée comme autre chose.. Vous devez également noter que l&#39;utilisation des valeurs au lieu des mots-clés dans votre code n&#39;est <b>pas du tout recommandée</b> et pourrait causer des problèmes plus tard.</p><p></p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span class="inline">self</span></a></p><div class="droptext" data-targetname="drop-down"><table><tbody><tr><th> Mot-clé</th><th> Description</th><th> évaluer</th></tr><tr><td><span class="notranslate"><span class="inline">self</span></span></td><td> L&#39;instance / structure qui exécute le bloc de code actuel.</td><td> <span class="notranslate">-1</span></td></tr></tbody></table><p class="dropspot"></p><p class="dropspot"><span class="inline">self</span> peut être utilisé pour identifier la structure ou l&#39;instance actuelle qui est dans la portée du bloc de code actuel. Par exemple:</p><p class="code">var val = 100;<br/> with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Fire))<br/>     {
      <br/>     self.val = val;<br/>     }
    </p><p class="dropspot"> Dans cet exemple, vous pouvez voir que nous avons une variable <i>locale appelée</i> <span class="inline">val</span> et nous voulons qu&#39;il définisse la <i>variable d&#39;instance</i> avec le même nom dans l&#39;instance d&#39;objet nouvellement créée. Pour identifier correctement la variable d&#39;instance et dire à <span class="notranslate">GameMaker Studio 2</span> de la définir dans l&#39;instance appelant le bloc de code, nous utilisons le <span class="inline">self</span> mot-clé. Dans la plupart des cas, vous pouvez également utiliser le <span class="inline">id</span> variable d&#39;instance intégrée au lieu de <span class="inline">self</span>, mais <span class="inline">self</span> offre certains avantages. Pour commencer, il est plus rapide pour le compilateur d&#39;identifier l&#39;instance (ou la structure) en utilisant <span class="inline">self</span> plutôt que <span class="inline">id</span>, comme le <tt>id</tt> la valeur passe par la table de recherche d&#39;instance pendant que <span class="inline">self</span> ne fait pas. Deuxièmement, pour les personnes qui créent des extensions, il est très utile de s&#39;assurer de la bonne portée des variables, car il est possible qu&#39;un projet qui utilise une extension ait une variable de portée globale ou quelque chose avec le même nom qu&#39;une variable dans l&#39;extension.</p><p class="note"> <strong>REMARQUE</strong>: le<span class="inline">self</span> Le mot clé n&#39;est <strong>pas</strong> un raccourci pour la valeur réelle de l&#39;ID d&#39;une instance ou d&#39;une structure et ne doit être utilisé que dans le contexte expliqué ci-dessus. Si vous avez besoin de la <strong>valeur d&#39;</strong> ID pour une instance, vous devez utiliser<span class="inline">self.id</span>, par exemple:</p><p class="code">var myID = id;<br/> with (all)<br/>     {
      <br/>     if self.id == myID<br/>         {<br/>          // do something<br/>          }<br/>     }
    </p><p class="dropspot"> Il convient également de noter que <span class="inline">self</span> peut également être utilisé dans des <a href="Structs.htm">structures</a> - dans des circonstances très spécifiques - pour référencer des variables membres pour la structure.</p><p class="dropspot"></p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span class="inline">other</span></a></p><div class="droptext" data-targetname="drop-down1"><table><tbody><tr><th> Mot-clé</th><th> Description</th><th> évaluer</th></tr><tr><td><span class="notranslate"><span class="inline">other</span></span></td><td> L&#39;autre instance impliquée dans un événement de collision, ou l&#39;autre instance ou structure d&#39;un <tt>with</tt> fonction.</td><td> <span class="notranslate">-2</span></td></tr></tbody></table><p></p><p class="dropspot"> Le <i>mot clé spécial</i> <span class="inline">other</span> peut être utilisé de deux manières différentes pour référencer une instance spécifique (et dans certains cas, un struct): lorsqu&#39;il est utilisé dans un <span class="inline">with</span> (expliqué <a href="Language_Features/with.htm">ici</a> ) ou lorsqu&#39;il est utilisé dans un <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">événement de collision</a>, c&#39;est ce que cette section va expliquer.</p><p class="dropspot"> Un événement de collision ne peut se produire qu&#39;entre deux instances. Vous <i>pouvez</i> avoir plusieurs collisions entre plusieurs instances, mais elles sont toutes résolues par <span class="notranslate">GameMaker Studio 2</span> sur une base individuelle, avec l&#39;instance qui a l&#39;événement de collision et l &#39;«autre» instance impliquée. Imaginez que vous avez un objet joueur, plusieurs objets ennemis et plusieurs objets balle que l&#39;ennemi peut tirer sur vous. Vous pouvez attribuer à chaque ennemi une seule instance de balle mais avec une variable de dégâts différente qui lui est assignée aléatoirement lors de sa création, par exemple:</p><p class="code">var nnn;<br/> nnn = instance_create_layer(x, y, &quot;Bullets&quot;, obj_Bullet);<br/> nnn.damage = 5 + irandom(5);<br/> nnn.speed = 8;<br/> nnn.direction = point_direction(x, y, obj_Player.x, obj_Player.y);</p><p class="dropspot"> Vous pouvez voir comment nous définissons ses variables en utilisant la &quot;méthode du point&quot; décrite dans la section sur l&#39; <a href="Addressing_Variables_In_Other_Instances.htm">adressage des variables dans d&#39;autres instances</a>. Cela donnera aux objets balle une valeur de dommage différente. Mais qu&#39;en est-il de l&#39;objet joueur? Comment détectera-t-il les dommages qu&#39;il doit subir? En utilisant <span class="inline">other</span> en cas de collision:</p><p class="code">hp -= other.damage;<br/> if hp &lt;= 0 instance_destroy();</p><p class="dropspot"> Le code ci-dessus déduira le montant stocké dans l&#39; <i>autre</i> instance dans la variable «dommages» de collisions de la variable «hp» du joueur, puis il vérifiera si le «hp» est inférieur ou égal à 0. Si c&#39;est le cas alors cela détruira l&#39;objet joueur. Veuillez noter que <b>other</b> utilisé de cette manière <i>ne fonctionne que dans l&#39;événement de collision</i> et que l&#39;autre instance doit avoir la variable en cours de vérification, sinon une erreur sera renvoyée. Cependant, vous pouvez attribuer des valeurs aux variables, ou même en créer de nouvelles, en utilisant <span class="inline">other</span> dans l&#39;événement de collision aussi, comme ceci:</p><p class="code">//add ten to the other instance &quot;mana&quot; variable<br/> other.mana += 10;<br/> //set the other instance variable &quot;hit&quot; to true, creating it if the variable doesn&#39;t already exist<br/> other.hit = true;</p><p class="dropspot"> Il convient également de noter que <span class="inline">other</span> peut également être utilisé dans des <a href="Structs.htm">structures</a> - dans des circonstances très spécifiques - pour référencer des variables membres pour la structure.</p><p class="dropspot"></p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span class="inline">all</span></a></p><div class="droptext" data-targetname="drop-down2"><table><tbody><tr><th> Mot-clé</th><th> Description</th><th> évaluer</th></tr><tr><td><span class="notranslate"><span class="inline">all</span></span></td><td> Toutes les instances actuellement actives dans la salle.</td><td> <span class="notranslate">-3</span></td></tr></tbody></table><p></p><p class="dropspot"> Ce mot-clé est utilisé pour indiquer à <span class="notranslate">GameMaker Studio 2</span> qu&#39;une fonction doit être appliquée ou pour vérifier toutes les instances actives dans une salle (les instances désactivées ne seront ni vérifiées ni accessibles). Vous <b>ne pouvez pas</b> utiliser <span class="inline">all</span> pour accéder ou définir des variables dans d&#39;autres instances en utilisant la méthode point (voir <a href="Addressing_Variables_In_Other_Instances.htm">ici</a> ), mais vous <strong>pouvez l&#39;</strong> utiliser lors de l&#39;appel <a href="Language_Features/with.htm"><tt>with()</tt></a>, par exemple:</p><p class="code">with (all)<br/>     {
      <br/>     speed = 0;<br/>     }
    </p><p class="dropspot"> Le code ci-dessus définira la vitesse de toutes les instances de la salle sur 0. Vous pouvez également utiliser <span class="inline">all</span> au sein des fonctions pour cibler ou vérifier toutes les instances de la salle, par exemple:</p><p class="code">//Check a point for any active instance in the room<br/> inst = instance_position(mouse_x, mouse_y, all);         <br/>
      <br/> //Check all instances for a collision along a line<br/> if collision_line(x, y, mouse_x, mouse_y, all, false, true) {}<br/>
      <br/> //Add all instances in the room into a motion planning grid<br/> mp_grid_add_instances(grid, all, false);</p><p class="dropspot"><span class="inline">all</span> est un mot-clé très utile et peut être utilisé dans de nombreuses situations au sein de votre code et de vos actions, réduisant souvent la quantité de code que vous devez écrire pour obtenir l&#39;effet souhaité.</p><p class="dropspot"></p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span class="inline">noone</span></a></p><div class="droptext" data-targetname="drop-down3"><table><tbody><tr><th> Mot-clé</th><th> Description</th><th> évaluer</th></tr><tr><td><span class="notranslate"><span class="inline">noone</span></span></td><td> Aucune instance du tout.</td><td> <span class="notranslate">-4</span></td></tr></tbody></table><p></p><p class="dropspot"> Cela peut sembler étrange, mais plusieurs fois lors de la programmation de vos jeux, vous trouverez le besoin de vérifier s&#39;il n&#39;y a pas d&#39;instances trouvées à un endroit, ou dans une collision etc... Dans ces cas, vous utiliseriez ce mot-clé pour ne rien vérifier, quelque chose comme ça:</p><p class="code">if instance_nearest(x, y, obj_enemy) != noone<br/>     {
      <br/>     //do something as there is an enemy instance near<br/>     }
    </p><p class="dropspot"> Dans cet exemple, la fonction <span class="inline">instance_nearest()</span> reviendra soit <span class="inline">noone</span> ou l&#39;ID unique de l&#39;instance trouvée la plus proche. Fondamentalement, chaque fois que vous avez besoin de rechercher une instance, vous pouvez vous attendre à obtenir soit <span class="inline">noone</span> ou un ID d&#39;instance unique renvoyé. </p><p class="dropspot"></p></div><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="GML_Overview.htm">Présentation de <span class="notranslate">GML</span></a></div><div style="float:right"> Next: <a href="Addressing_Variables_In_Other_Instances.htm">Adressage de variables dans d&#39;autres instances</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Instance Keywords
self
all
noone
other
-->
  <!-- TAGS
instance_keywords
-->
</body>
</html>