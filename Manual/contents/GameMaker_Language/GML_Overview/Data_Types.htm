<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Types de données</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page décrivant les types de données" />
  <meta name="rh-index-keywords" content="Types de données" />
  <meta name="search-keywords" content="Types de données" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> Types de données</h1><p> Dans les sections précédentes, nous avons couvert les <a href="Variables_And_Variable_Scope.htm">variables et leurs règles de portée,</a> mais peu de choses ont été dites sur les différents <b>types de données</b> qu&#39;une variable peut stocker. Par conséquent, cette section explique les différents types et à quoi ils peuvent être utilisés.</p><p> Avant de continuer, expliquons brièvement ce que nous entendons par «types de données». Lorsque vous créez une variable, elle peut être utilisée pour contenir des informations et lorsque vous appelez une fonction, elle peut également stocker les informations renvoyées. Cependant, ces informations peuvent être de différentes &quot;saveurs&quot; - par exemple, il peut s&#39;agir d&#39;un <em>nombre réel</em> ou d&#39;une <em>chaîne de caractères</em>. Ces différents types de valeurs utilisés sont appelés <b>types de données</b> et lors de l&#39;utilisation <i>du</i> <span class="notranslate">GameMaker Language</span> ils peuvent être l&#39;un des suivants:</p><p></p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Cordes</a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"> <label for="one">Une chaîne est simplement n&#39;importe quel texte placé entre guillemets &quot;...&quot;. Vous pouvez effectuer certaines opérations sur des chaînes, comme ajouter deux chaînes ensemble pour créer une chaîne plus longue (concaténation) et vous pouvez également modifier les propriétés de la chaîne et même en extraire des nombres réels. Pour plus d&#39;informations sur les chaînes et les fonctions de chaîne, voir: <a href="../GML_Reference/Strings/Strings.htm"><span class="notranslate">GML</span> - Chaînes</a>.</label></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Nombres réels</a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot"> Les nombres réels sont toute valeur qui n&#39;est pas une chaîne, ni aucun des autres types de données possibles. Donc, 124, 45639.566546456, 0, -45.5 etc... sont tous des exemples de nombres réels. Tous les nombres réels sont stockés sous forme de valeurs à virgule flottante double précision ou de valeurs entières (soit des entiers 32 bits - <span class="inline">int32</span> - ou entiers 64 bits - <span class="inline">int64</span> ), et le compilateur optimisera si possible (par exemple, 0.0 sera optimisé à la valeur entière de 0). Lorsque vous traitez avec une valeur qui n&#39;est pas un entier, vous pouvez rencontrer de légères erreurs d&#39;arrondi en raison de la nature des calculs en virgule flottante. Pour plus d&#39;informations à ce sujet et sur d&#39;autres fonctions liées aux nombres, veuillez consulter: <a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm"><span class="notranslate">GML</span> - Fonctions numériques</a>.</p><p class="note"> <b>REMARQUE</b>: sur la <b>cible HTML5</b>, tous les nombres réels sont des doubles.</p><p class="dropspot"> Notez que si les variables créées dans <span class="notranslate">GameMaker Studio 2</span> sont toutes stockées sous forme de nombres à virgule flottante double précision ou d&#39;entiers, vous pouvez toujours utiliser d&#39;autres formats lorsque vous traitez avec des extensions. Ceux-ci peuvent être transmis à <span class="notranslate">GameMaker Studio 2</span> partir d&#39;une extension, puis vérifiés à l&#39;aide des <tt>is_*()</tt> fonction, dont une liste peut être trouvée <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">ici</a>.</p><p></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Tableaux</a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"> <label for="three">Un tableau est un type de données spécial qui peut être utilisé pour contenir plusieurs valeurs. Vous affectez le tableau à une variable, puis «remplissez» différents indices du tableau avec des valeurs. Ce tableau peut ensuite être transmis aux scripts et aux fonctions sur une base de référence, mais si vous modifiez le tableau passé, il deviendra alors une copie du tableau d&#39;origine et devra donc être renvoyé à la variable d&#39;origine. pour le tableau à mettre à jour. Pour plus d&#39;informations sur les tableaux, veuillez consulter: <a href="Arrays.htm">Présentation de <span class="notranslate">GML</span></a> - Tableaux.</label></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Structs</a></p><div class="droptext" data-targetname="drop-down3"><p class="dropspot"> <label for="eleven">Une structure (parfois appelée «objet léger») est une structure de données brutes qui agit comme un conteneur pour les variables de tous les types de données. Vous affectez une structure à une variable et dans la structure, vous pouvez ensuite définir d&#39;autres variables et celles-ci peuvent ensuite être lues ou écrites selon les besoins. Pour plus d&#39;informations sur les structures, veuillez consulter la section <a href="Structs.htm">Présentation de <span class="notranslate">GML</span></a> - Structs.</label></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Variables de méthode</a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot"> <label for="twelve">Une variable de méthode est une variable à laquelle une fonction a été attribuée et elle peut être utilisée exactement de la même manière que vous utiliseriez une fonction d&#39; <span class="notranslate">runtime</span> <span class="notranslate">GML</span> Pour plus d&#39;informations, veuillez consulter la section <a href="Method_Variables.htm">Variables de méthode</a>.</label></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Valeurs hexadécimales</a></p><div class="droptext" data-targetname="drop-down5"><p class="dropspot"> <span class="notranslate">GameMaker Studio 2</span> peut accepter <b>des littéraux hexadécimaux</b> comme valeurs légitimes. Les valeurs hexadécimales sont particulièrement courantes lorsque vous travaillez avec des couleurs, mais peuvent être utilisées partout où une valeur entière positive est requise. Notez que les valeurs hexadécimales peuvent être formatées de l&#39;une des deux manières suivantes, où <span class="inline">&lt;<em>abcd</em>&gt;</span> serait la valeur hexadécimale réelle:</p><p class="code"><span style="background-color: transparent;">$&lt;<em>abcd</em>&gt;</span><span style="background-color: transparent;"></span><br/> 0x&lt;
      <em>abcd</em>&gt;</p><p class="dropspot"> Par exemple, les valeurs suivantes peuvent être exprimées en hexadécimal, comme indiqué:</p><p class="code">11406 = $2c8e = 0x2c8e<br/> 16777215 = $ffffff = 0xffffff</p><p></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Booléen</a></p><div class="droptext" data-targetname="drop-down6"><p class="dropspot"> Un booléen est simplement une valeur qui peut être soit <tt>true</tt> ou <tt>false</tt>. Notez qu&#39;actuellement, <span class="notranslate">GameMaker Studio 2</span> interprétera un nombre réel égal ou inférieur à 0,5 comme un <tt>false</tt> valeur, et tout nombre réel supérieur à 0,5 comme étant <tt>true</tt>. Cela ne <i>signifie pas</i> cependant que vous devriez vérifier 1 et 0 (ou tout autre nombre réel) pour vrai et faux, car les <b>constantes vous sont également fournies </b><tt>true</tt> et <tt>false</tt> qui doit toujours être utilisé dans votre code pour éviter tout problème si de vrais types de données booléens sont ajoutés dans une future mise à jour.</p><p class="dropspot"> Vous pouvez convertir n&#39;importe quel nombre réel en une valeur implicitement booléenne à l&#39;aide de la fonction suivante: </p><ul class="dropspotlist"><li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm">bool</a></li></ul><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Aiguille</a></p><div class="droptext" data-targetname="drop-down7"><p class="dropspot"> Un pointeur est un type de données qui &quot;pointe&quot; vers un emplacement mémoire. Vous ne pouvez pas effectuer d&#39;opérations sur un pointeur et il n&#39;est utilisé que pour certaines fonctions très spécifiques, comme obtenir une texture ou une adresse de tampon à partir de la mémoire pour une autre fonction. Pour des exemples de fonctions qui renvoient un pointeur, vous pouvez voir <a href="../GML_Reference/Buffers/buffer_get_address.htm"><tt>buffer_get_address()</tt></a> ou <a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><tt>sprite_get_texture()</tt></a>.</p><p class="dropspot"> Il existe également une fonction pour vérifier si une valeur est un pointeur (voir &quot; <b>Vérification des types de données</b> &quot;, ci-dessous) et une fonction pour convertir une valeur en pointeur:</p><ul class="dropspotlist"><li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;">ptr</a></li></ul><p class="dropspot"> Vous pouvez également utiliser (et obtenir renvoyé) les constantes intégrées suivantes lorsque vous utilisez des pointeurs:</p><p class="dropspot"></p><table class=" cke_show_border"><tbody><tr><th> Constant</th><th> Description</th></tr><tr><td><span class="notranslate"><span class="inline">pointer_null</span></span></td><td> Cette constante indique que le pointeur ne pointe vers rien de significatif (le même que <tt>NULL</tt> en C ++ ou null en C #)</td></tr><tr><td><span class="notranslate"><span class="inline">pointer_invalid</span></span></td><td> Cette constante signifie simplement que la valeur n&#39;est pas un pointeur valide</td></tr></tbody></table><p></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Enum</a></p><div class="droptext" data-targetname="drop-down8"><p class="dropspot"> Une énumération est un «énumérateur» et vous permet essentiellement de créer votre propre type de données limité avec une liste de valeurs constantes. Les énumérations sont expliquées en détail sur la page des <a href="Variables/Constants.htm">constantes</a>.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Indéfini</a></p><div class="droptext" data-targetname="drop-down9"><p class="dropspot"> <label for="seven">Une valeur non définie (également appelée valeur «nulle») est une valeur dans laquelle une expression n&#39;a pas de valeur correcte, bien qu&#39;elle soit syntaxiquement correcte, et doit donc renvoyer <i>quelque chose</i>. Par exemple, disons que vous avez une <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">carte DS</a> et que vous utilisez la fonction <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><tt>ds_map_find_value()</tt></a>. Maintenant, que se passe-t-il lorsque la carte n&#39;a pas la valeur recherchée? Eh bien, puisque la fonction est correctement formatée et que le problème est que cette valeur n&#39;existe pas, elle renverrait la <b>constante </b><tt>undefined</tt>, et vous pouvez vérifier cette constante comme vous le feriez <tt>true</tt> ou toute autre valeur.</label></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">NaN</a></p><div class="droptext" data-targetname="drop-down10"><p class="dropspot"> <label for="nine"><tt>NaN</tt>signifie &quot;pas un nombre&quot;, et est une constante qui peut être retournée lorsque le compilateur ne peut pas évaluer les résultats d&#39;une opération sous forme de nombre. Par exemple, 0/0 ne peut pas être défini comme un nombre réel, et est donc représenté par <tt>NaN</tt>, ou la racine carrée d&#39;un nombre négatif - qui est considéré comme un nombre &quot;imaginaire&quot; - ne peut pas être représentée comme un nombre réel, et est donc représentée par <tt>NaN</tt>.</label></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Infini</a></p><div class="droptext" data-targetname="drop-down11"><p class="dropspot"> La constante <tt>infinity</tt> fait référence à un nombre considéré comme infini, tel que le résultat que vous obtiendriez en divisant une valeur à virgule flottante par zéro, par exemple: 1.0 / 0.</p></div><p></p><p> Vous pouvez vérifier le type de données de n&#39;importe quelle variable à l&#39;aide des fonctions répertoriées sur la page suivante:</p><ul class="colour"><li> <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Fonctions variables</a></li></ul><p> Vous pouvez également trouver des tableaux de types arithmétiques qui affichent les résultats de différentes opérations utilisant des types de données variables mixtes ici:</p><ul class="colour"><li> <a href="../../Additional_Information/Type_Tables.htm">Tables de types</a> </li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="GML_Overview.htm">Présentation de <span class="notranslate">GML</span></a></div><div style="float:right"> Suivant: <a href="Instance_Keywords.htm">Mots clés d&#39;instance</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->
</body>
</html>