<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Surfaces</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for the Surface functions and variables" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Surfaces,application_surface,application surface,app surface" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Surfaces</h1>
  <p>Dans les événements de dessin normaux, <span class="notranslate">GameMaker Studio 2</span> ne dessine pas directement à l'écran, mais plutôt sur une <b>surface</b> appelée <i>surface d'application.</i> Cette surface est en fait un &quot;canevas&quot; vierge qui peut ensuite être manipulé
    avant d'être affichée à l'écran si nécessaire. Dans la plupart des cas, <span class="notranslate">GameMaker Studio 2</span> s'en charge pour vous (bien que vous puissiez également la manipuler vous-même dans le code pour les <span class="notranslate">shaders</span>, la mise à l'échelle et bien d'autres choses - vous trouverez plus de détails ci-dessous).</p>
  <p>Cependant, en dehors de cette surface d'application, vous pouvez également créer vos propres surfaces et les utiliser pour créer des effets spéciaux étonnants ou subtils dans votre jeu. Par exemple, vous pouvez utiliser des surfaces pour &quot;attraper&quot; des instances, qui peuvent ensuite être détruites,
    et de cette façon, vous pouvez créer un effet de décalque où le sprite de l'instance est affiché sur la surface comme s'il existait toujours, permettant des effets graphiques comme des débris, du sang, etc... sans véritable surcharge de traitement. Une autre chose que vous pouvez
    Une autre chose que vous pouvez faire avec les surfaces est de les utiliser comme des textures à manipuler, ou pour créer des sprites &quot;à la volée&quot;, ou pour créer des superpositions complexes. en fait, les utilisations des surfaces sont infinies !</p>
  <p>Les surfaces normales sont assez faciles à utiliser, mais il y a quelques règles de base à respecter lorsque vous les utilisez :</p>
  <ul class="colour">
    <li>Tout d'abord, vous devez savoir que les surfaces<i>(à l'exception de</i> la surface de l'application) sont &quot;volatiles&quot;. Cela signifie que si le périphérique ou la fenêtre perd le focus ou est minimisé (de bons exemples sont lorsque vous ALT +Tab vers une autre fenêtre et retour sous <span class="notranslate">Windows</span>,
      ou sur un appareil <span class="notranslate">Android</span> lorsque l'application perd le focus à cause d'un appel), la surface <strong>peut être détruite</strong>. Cela est dû au fait qu'elle est stockée <em>uniquement</em> dans la mémoire de texture<a class="glossterm" data-glossterm="VRAM" href="#">(VRAM</a>) et qu'elle peut être écrasée lorsque la cible est en train de changer.
      peut être écrasée lorsque la plate-forme cible a besoin de cette mémoire pour autre chose. <i><b>toujours</b></i> avoir un code de sécurité en place, généralement avec la fonction <a href="surface_exists.htm"><tt>surface_exists()</tt></a>      fonction.</li>
  </ul>
  <p class="note" style="padding-top: 0.5em;padding-right: 1em;padding-bottom: 0.5em;padding-left: 4em"><strong>REMARQUE</strong>: Cela ne semble pas se produire avec les sprites ou d'autres ressources visuelles (mais c'est le cas en réalité !) car ils sont également stockés dans la mémoire ordinaire (RAM) et lorsqu'ils sont retirés de la mémoire de texture (VRAM), ils sont immédiatement restaurés à partir de la mémoire ordinaire lorsque le jeu reprend son cours.
    la mémoire ordinaire lorsque le jeu reprend le focus.</p>
  <ul class="colour">
    <li>Deuxièmement, vous devez noter que les surfaces peuvent nécessiter l'utilisation de grandes quantités de VRAM, et vous devez donc essayer de les garder aussi petites que possible. Normalement, vous devriez essayer de faire en sorte qu'elles ne soient pas plus grandes que la taille de la vue ou de la fenêtre d'affichage.</li>
    <li>Troisièmement, vous <b>ne</b> devez <b>créer des surfaces que dans l'événement draw</b>. Si vous créez une surface dans l'événement Create d'une instance, vous pouvez potentiellement obtenir le <i>même</i> index que l'<tt>application_surface</tt>. Cela peut alors causer beaucoup de problèmes
      et de confusion car vous pensez utiliser votre propre surface, alors que vous utilisez en fait la cible de rendu actuelle. Vous devez également toujours essayer de limiter le <i>dessin</i> à une surface dans l'événement draw, car en raison de la manière optimisée dont <span class="notranslate">GameMaker</span>
      Studio 2 dessine à l'écran, il est recommandé de conserver toutes les fonctions de dessin <i>dans l'événement draw</i> - cela inclut l'effacement d'une surface lors de sa première création, etc... Dessiner sur une surface en dehors de l'événement draw est possible et peut même être nécessaire pour certains effets.
      et peut même être nécessaire pour certains effets, mais ce n'est pas ainsi qu'il <em>faut</em> procéder.</li>
    <li>Quatrièmement, lorsque vous dessinez manuellement sur une surface, celle-ci est <i>toujours</i> à la position (0,0). Cela signifie que vous devrez peut-être convertir des coordonnées <em>absolues</em> en coordonnées <em>relatives</em> pour la surface. Par exemple, si vous disposez d'une
      et que vous souhaitez dessiner sur cette surface quelque chose qui est actuellement visible dans la caméra, vous devez soustraire les coordonnées x et y de la vue de la caméra des coordonnées x et y réelles pour obtenir une position relative par rapport à la position (0,0) de la surface.
      position. Ainsi, le code ressemblerait à quelque chose comme ceci :</li>
  </ul>
  <p class="code" style="margin-top: 0px;margin-right: 50px;margin-bottom: 0px;margin-left: 100px">if view_current = 0<br> {<br> surface_set_target(surf) ;
    <br> avec (obj_Effect)<br> {
    <br> var _vx = camera_get_view_x(view_camera[1]) ;<br> var _vy = camera_get_view_y(view_camera[1]) ;<br> draw_sprite(sprite_index, image_index, x - _vx, y - _vy) ;<br> }
    <br> surface_reset_target() ;
    <br> }
    <br> else
    <br> {
    <br> draw_surface(surf, 0, 0) ;<br> }
  </p>
  <ul class="colour">
    <li>Enfin, il convient de noter que le dessin sur une surface prend en compte la couleur <em>et</em> la composante alpha de chaque pixel, à la fois de la surface elle-même et de ce qui est dessiné sur elle. Cela peut conduire à des résultats peu intuitifs.
      (par exemple, dessiner un sprite avec un alpha de 0,5 sur une surface avec un alpha de 0 donnera un alpha final de 0,25). Les raisons de ce phénomène sont expliquées à la page suivante, et nous vous recommandons de la lire avant de travailler avec les surfaces : <a href="../../../../Additional_Information/Guide_To_Using_Blendmodes.htm">Guide d'utilisation des Blendmodes</a></li>
  </ul>
  <p class="note"><strong>NOTE</strong>: Ceci n'est pas vrai pour la surface de l'application, seulement pour les surfaces créées par l'utilisateur.</p>
  <p>L'utilisation de base d'une surface serait la suivante :</p>
  <ul class="colour">
    <li>Il faut d'abord créer une surface et affecter son indice à une variable.</li>
    <li>Vous devez alors définir la cible du dessin sur la surface plutôt que sur l'écran.</li>
    <li>Ensuite, vous dessinez les éléments que vous souhaitez et vous effectuez d'autres manipulations.</li>
    <li>Une fois que vous avez terminé, vous réinitialisez la cible de dessin afin que tout nouveau dessin se fasse à nouveau sur l'écran.</li>
    <li>Enfin, vous devez dessiner la surface (ou l'utiliser dans un <span class="notranslate">shader</span>, ou tout ce qui est nécessaire).</li>
  </ul>
  <p>Une chose à noter est que si vous avez besoin de dessiner tout l'affichage sur une surface (y compris les tuiles, les arrière-plans etc...) vous pouvez simplement accéder à la surface de l'application elle-même (voir ci-dessous pour plus de détails) ou vous pouvez assigner une surface à un port de vue
    en utilisant la variable <a href="../../Cameras_And_Display/Cameras_And_Viewports/view_surface_id.htm"><tt>view_surface_id [0..7]</tt></a> comme dans ce cas, tout ce qui est visible dans ce port de vue sera dessiné sur la surface correspondante.</p>
  <p>Les fonctions suivantes existent pour traiter les surfaces (ces fonctions sont spécifiques à la création et à la manipulation des surfaces, mais pour les dessiner à l'écran, vous devez utiliser les fonctions de dessin spécifiques que vous trouverez ci-dessous) :</p>
  <p> </p>
  <ul class="colour">
    <li><a href="surface_exists.htm">surface_existante</a></li>
    <li><a href="surface_create.htm">surface_create</a></li>
    <li><a href="surface_create_ext.htm">surface_create_ext</a></li>
    <li><a href="surface_resize.htm">surface_resize</a></li>
    <li><a href="surface_set_target.htm">surface_set_target</a></li>
    <li><a href="surface_set_target_ext.htm">surface_set_target_ext</a></li>
    <li><a href="surface_get_target.htm">surface_get_target</a></li>
    <li><a href="surface_get_target_ext.htm">surface_get_target_ext</a></li>
    <li><a href="surface_reset_target.htm">surface_reset_target</a></li>
    <li><a href="surface_copy.htm">surface_copy</a></li>
    <li><a href="surface_copy_part.htm">surface_copy_part</a></li>
    <li><a href="surface_depth_disable.htm">surface_depth_disable</a></li>
    <li><a href="surface_get_height.htm">surface_get_height</a></li>
    <li><a href="surface_get_width.htm">surface_get_width</a></li>
    <li><a href="surface_get_texture.htm">surface_get_texture</a></li>
    <li><a href="surface_get_depth_disable.htm">surface_get_depth_disable</a></li>
    <li><a href="surface_getpixel.htm">surface_getpixel</a></li>
    <li><a href="surface_getpixel_ext.htm">surface_getpixel_ext</a></li>
    <li><a href="surface_free.htm">surface_free</a></li>
    <li><a href="surface_save.htm">surface_save</a></li>
    <li><a href="surface_save_part.htm">surface_save_part</a></li>
  </ul>
  <p> </p>
  <p>Les fonctions suivantes permettent de dessiner des surfaces :</p>
  <p class="note"><b>REMARQUE : </b>Lorsque vous travaillez avec des surfaces, il est possible qu'elles cessent d'exister à tout moment, car elles sont stockées dans la mémoire des textures. Vous devez <b>TOUJOURS</b> vérifier qu'une surface existe en utilisant la commande <span style="font-size:1px;"><a href="surface_exists.htm"><tt style="font-size: 14px">surface_exists()</tt></a></span> avant d'utiliser
    avant de les référencer directement.</p>
  <p> </p>
  <ul class="colour">
    <li><a href="draw_surface.htm">dessiner_surface</a></li>
    <li><a href="draw_surface_ext.htm">dessiner_surface_ext</a></li>
    <li><a href="draw_surface_part.htm">dessiner_partie_de_surface</a></li>
    <li><a href="draw_surface_part_ext.htm">dessiner_surface_part_ext.</a></li>
    <li><a href="draw_surface_stretched.htm">dessiner_surface_étirée</a></li>
    <li><a href="draw_surface_stretched_ext.htm">dessiner_surface_étirée_ext.</a></li>
    <li><a href="draw_surface_tiled.htm">dessiner_surface_inclinée</a></li>
    <li><a href="draw_surface_tiled_ext.htm">dessiner_surface_tirée_ext.</a></li>
    <li><a href="draw_surface_general.htm">dessiner_surface_général</a></li>
  </ul>
  <p> </p>
  <p>Enfin, vous disposez de deux fonctions pour stocker et récupérer les surfaces dans les <a href="../../Buffers/Buffers.htm">tampons</a>:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../../Buffers/buffer_get_surface.htm">tampon_get_surface</a></li>
    <li><a href="../../Buffers/buffer_set_surface.htm">tampon_set_surface</a></li>
  </ul>
  <p> </p>
  <p>Comme nous l'avons mentionné plus haut, <span class="notranslate">GameMaker Studio 2</span> ne rend pas directement la plupart des éléments à l'écran, mais les rend à la <b>surface de l'application.</b> Il s'agit essentiellement d'une surface - comme toutes celles que vous pouvez créer vous-même à l'aide des fonctions de surface
    et en tant que telle, elle peut être manipulée, dessinée, envoyée aux <span class="notranslate">shaders</span>, etc... En gros, tout ce que vous feriez normalement avec une surface que vous avez créée peut également être appliqué à la surface d'application.</p>
  <p class="note"><b>REMARQUE</b>: La seule chose que vous <b>ne pouvez pas</b> faire avec la surface d'application est de la libérer. Elle existe toujours, bien que la valeur de l'index pour y accéder puisse changer.</p>
  <p>Lorsque vous lancez votre jeu, cette surface est créée la première fois que l'<a href="../../../../The_Asset_Editors/Object_Properties/Draw_Events.htm">événement draw</a> est appelé dans chaque nouvelle pièce dans laquelle vous entrez, ce qui signifie que rien n'est dessiné jusqu'à ce moment-là.
    ce moment-là. Cependant, vous pouvez toujours obtenir la position de la surface de l'application et la redimensionner dans l'<b>événement Create</b> ou tout autre événement sans obtenir d'erreur et les valeurs utilisées seront pertinentes pour la surface lors de sa création. La séquence réelle des événements
    événements pour la création et le dessin de la surface de l'application est la suivante :</p>
  <ul class="colour">
    <li>Événement pré-dessin<br> --- &gt; la <b>surface de l'application est créée (si elle n'existe pas) et la cible de rendu est définie.</b></li>
    <li><b></b>Pour chaque port de vue visible ou, si aucun port de vue n'est actif, une seule fois
      <ul class="colour">
        <li>Événement de début de tirage</li>
        <li>Événement Draw</li>
        <li>Draw end event<br> --- &gt; la <b>cible de rendu de la surface de l'application est réinitialisée ici</b></li>
      </ul>
    </li>
    <li><b></b>Post draw event<br> --- &gt; la <b>surface de l'application est maintenant dessinée dans le <a class="glossterm" data-glossterm="tampon d'affichage" href="#">tampon d'affichage par</a> défaut<br></b> 
	                 (bien que vous puissiez désactiver cette fonction en utilisant <span class="inline"><a href="application_surface_draw_enable.htm">application_surface_draw_enable()</a></span>)</li>
    <li><b></b>Événement Draw GUI begin</li>
    <li>Événement "Draw GUI</li>
    <li>Événement de fin de dessin de l'interface graphique</li>
  </ul>
  <p>L'utilisation de cette surface signifie que vous pouvez facilement créer des transitions incroyables à l'aide de <span class="notranslate">shaders</span>, ou prendre l'écran et l'enrouler autour d'une forme 3D, ou simplement mettre à l'échelle un jeu à faible résolution vers un écran de n'importe quelle résolution... Les possibilités sont infinies !</p>
  <p>Pour accéder à cette surface, vous devez utiliser la variable globale intégrée <tt>application_surface</tt> qui est expliquée à la page suivante :</p>
  <p> </p>
  <ul class="colour">
    <li><a href="application_surface.htm">application_surface</a></li>
  </ul>
  <p> </p>
  <p>Vous disposez également de quelques fonctions spécialisées qui sont conçues <em>uniquement </em>pour être utilisées avec la surface d'application :</p>
  <p> </p>
  <ul class="colour">
    <li><a href="application_surface_enable.htm">application_surface_enable</a></li>
    <li><a href="application_surface_is_enabled.htm">application_surface_is_enabled</a></li>
    <li><a href="application_get_position.htm">application_get_position</a></li>
    <li><a href="application_surface_draw_enable.htm">application_surface_draw_enable</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Drawing.htm">Dessin</a></div>
        <div style="float:right">Suivant : <a href="../Lighting/Lighting.htm">Éclairage</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Surfaces
app surface
application surface
-->
  <!-- TAGS
surfaces_functions
-->

</body></html>