<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gml_pragma</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page de référence pour gml_pragma" />
  <meta name="rh-index-keywords" content="gml_pragma" />
  <meta name="search-keywords" content="gml_pragma" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>gml_pragma</h1><p> Le <tt>gml_pragma</tt> La fonction affecte la manière dont la cible donnée compile votre code et doit être appelée avec les différentes commandes pour optimiser davantage la compilation finale de votre projet. Ces commandes sont effectivement <i>prétraitées</i> avant la compilation du jeu et ainsi la fonction peut être placée n&#39;importe où dans votre projet et elle sera toujours traitée avant que le jeu ne soit entièrement compilé. Les commandes disponibles sont les suivantes:</p><ul class="colour"><li> &quot; <b>forceinline</b> &quot; - Lorsque la fonction est appelée avec le pragma &quot;forceinline&quot; dans une <b>fonction de script</b>, le YYC compilera le projet avec la fonction en ligne, plutôt que référencée. Cela donnera un coup de pouce supplémentaire au traitement, mais il faut faire attention lors de son utilisation car cela gonflera également la taille finale du fichier exécutable, en particulier si le code en ligne est volumineux et / ou utilisé à plusieurs endroits différents, et augmentera considérablement le temps de compilation. Notez que ce pragma n&#39;est <b>valable que lors de la construction en utilisant YYC</b>.</li><li> &quot; <b>global</b> &quot;, &quot; <b>[gml code]</b> &quot; - Le pragma &quot;global&quot; vous permet d&#39;appeler du <span class="notranslate">GML</span> formaté sous forme de chaîne, à une <b>portée globale</b>, au moment de la compilation, avant que la première salle du jeu ne s&#39;exécute. Par exemple:<br/><p class="code">gml_pragma(&quot;global&quot;, &quot;Init()&quot;);</p> Cela appellera la fonction de script &quot;Init&quot; avant que la première salle du jeu ne soit lancée. Notez que le <span class="notranslate">GML</span> fourni comme deuxième argument <b>doit être une constante de temps de compilation</b>, et notez également que vous ne pouvez pas utiliser ce pragma pour créer des instances ou effectuer des opérations qui nécessitent une pièce (ou quoi que ce soit dans une pièce) pour fonctionner.</li><li> &quot; <b>PNGCrush</b> &quot; - Le pragma &quot;PNGCrush&quot; utilisera le <a href="https://pmt.sourceforge.io/pngcrush/" target="_blank">programme PNGCrush</a> sur chaque texture créée. Notez que cela peut augmenter considérablement le temps nécessaire à la compilation du jeu, vous ne voulez donc pas qu&#39;il soit allumé tout le temps, bien que cela puisse faire des économies significatives sur la taille finale du fichier.</li><li> &quot; <b>Texgroup.Scale</b> &quot;, &quot; <b>[TextureGroupName]</b> &quot;, &quot; <b>[Scale Divisor]</b> &quot; - Le &quot;Texgroup.Scale&quot; mettra à l&#39;échelle le groupe de texture donné lors de la compilation. Vous devez donner deux arguments supplémentaires ici: le &quot;[TexGroupName]&quot;, qui est le nom (une chaîne) du groupe de textures à mettre à l&#39;échelle, et le &quot;[Scale Divisor]&quot; (également une chaîne), qui est le diviseur que vous souhaitez utiliser pour la mise à l&#39;échelle, c&#39;est-à-dire:<br/><p class="code">gml_pragma(&quot;Texgroup.Scale&quot;, &quot;level1&quot;, &quot;2&quot;);</p> Cela réduira la moitié de toutes les textures du groupe de textures &quot;level1&quot;.</li><li> &quot; <b>UnityBuild</b> &quot;, &quot; <b>[enable / disable]</b> &quot; - Si vous appelez la fonction avec ce pragma et définissez l&#39;argument enable / disable sur <tt>true</tt> puis lors de la compilation, il réduira tous les fichiers.cpp du projet en un seul fichier qu&#39;il utilisera ensuite pour tout construire, par exemple:<br/><p class="code">gml_pragma(&quot;UnityBuild&quot;, &quot;true&quot;);</p> L&#39;avantage de faire un build unitaire est que les builds sont plus rapides, mais l&#39;inconvénient est qu&#39;il fait une <i>build complète à</i> chaque fois, donc même si vous modifiez une seule partie du code, il reconstruira tout sans utiliser de fichiers mis en cache. Cela a été ajouté spécifiquement pour l&#39;exportation Xbox One à l&#39;aide de YYC, bien qu&#39;il puisse être appelé pour d&#39;autres versions ( <b>YYC uniquement</b> ). Pour plus d&#39;informations sur les constructions d&#39;unité, veuillez cliquer <a href="http://buffered.io/posts/the-magic-of-unity-builds/" target="_blank">ici</a>.</li></ul><p class="note"> <b>REMARQUE</b>: le premier argument du <tt>gml_pragma</tt> La fonction <b>doit être une constante de chaîne de compilation</b> et non une variable.</p><p></p><h4> Syntaxe:</h4><p class="code">gml_pragma(command, [optional...]);</p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">command</span></td><td> Une chaîne avec l&#39;une des commandes répertoriées ci-dessous.</td></tr><tr><td> <span class="notranslate">[optional]</span></td><td> Certaines des commandes disponibles nécessitent un argument ou des arguments facultatifs. Celles-ci sont expliquées ci-dessous pour chaque commande.</td></tr></tbody></table><p></p><h4> Retour:</h4><p class="code">N/A</p><p></p><h4> Exemple:</h4><p class="code">gml_pragma(&quot;forceinline&quot;);</p><p> L&#39;exemple de code ci-dessus forcera la fonction de script là où elle est utilisée pour être intégrée lors de la compilation. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="OS_And_Compiler.htm">OS et compilateur</a></div><div style="float:right"> Suivant:<a href="parameter_count.htm">parameter_count</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
gml_pragma
-->
  <!-- TAGS
gml_pragma
-->
</body>
</html>