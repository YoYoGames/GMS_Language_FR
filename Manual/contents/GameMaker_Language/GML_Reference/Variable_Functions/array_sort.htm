<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>array_sort</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function array_sort" />
  <meta name="rh-index-keywords" content="array_sort" />
  <meta name="search-keywords" content="array_sort" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span>array_sort</span></h1>
  <p>Avec cette fonction, vous pouvez trier un tableau par ordre croissant ou décroissant ou en utilisant une fonction personnalisée pour définir l'ordre de tri. La fonction nécessite que vous fournissiez le tableau à trier, puis l'un des éléments suivants :</p>
  <ul class="colour">
    <li>Les constantes <span class="inline">true</span> ou <span class="inline">false</span> pour indiquer l'<span>ordre de tri ascendant (<span class="inline">true</span>) ou descendant (<span class="inline">false</span>)</span>.
    </li>
    <li>Une fonction personnalisée pour définir l'ordre de tri</li>
  </ul>
  <p>Si vous utilisez une fonction personnalisée pour le tri, elle doit prendre 2 arguments qui recevront respectivement les valeurs de l'élément courant et de l'élément suivant. La fonction doit retourner l'une des valeurs suivantes pour affecter l'ordre de tri (où <tt>elm1</tt> est
    l'élément courant et <tt>elm2</tt> l'élément suivant) :</p>
  <ul class="colour">
    <li><tt>0</tt>: si <tt>elm1</tt> et <tt>elm2</tt> sont égaux</li>
    <li><tt>&lt;0 (</tt> nombre négatif) : si elm1 passe avant elm2</li>
    <li><tt>&gt;0 (</tt> nombre positif) : si elm1 passe après elm2</li>
  </ul>
  <p>Si le tableau contient un ensemble de chaînes de caractères, celles-ci seront triées par ordre alphabétique sur la base de l'alphabet anglais en utilisant le type de tri croissant/décroissant par défaut. Tous les autres types de données seront triés en fonction de leur valeur numérique, dont les valeurs exactes dépendront du type de données lui-même.
    dont les valeurs exactes dépendent du type de données lui-même (par exemple, un tableau de tampons sera trié sur la base de la valeur numérique de leurs adresses mémoire).</p>
  <p>Notez que cette fonction va modifier le contenu du tableau original qui a été fourni. Pour créer une copie triée, utilisez <tt><a href="array_copy.htm">array_copy()</a></tt> pour dupliquer le tableau d'abord, et ensuite le passer à cette fonction.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">array_sort(variable, sorttype_ou_fonction) ;</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>variable</td>
        <td>La variable qui contient le tableau.</td>
      </tr>
      <tr>
        <td><span>fonction_ou_triple<span> </span></span>
        </td>
        <td>Le type de tri (<span><span class="inline">true</span> pour un tri ascendant ou <span class="inline">false</span> pour un tri descendant) ou une référence de fonction à utiliser pour le tri.</span>
        </td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">N/A</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var _a = [10, 9, 8, 7, 6, 5] ;<br>
    <br> array_sort(_a, function(elm1, elm2)<br> {<br> return elm1 - elm2 ;<br> }) ;</p>
  <p>Le code ci-dessus utilise une fonction de tri personnalisée pour trier le tableau dans un ordre croissant. La fonction de tri prend les deux éléments du tableau comme <tt>elm1</tt> et <tt>elm2</tt> et effectue une soustraction sur eux. Si <tt>elm1</tt> est supérieur à <tt>elm2</tt>,
    la soustraction donne un nombre positif qui place <tt>elm1</tt> après <tt>elm2</tt>, les plaçant ainsi dans un ordre croissant.</p>
  <p>Voici un exemple détaillé :</p>
  <p class="code">var _xx, _yy, _a ;<br> for (var i = 0 ; i &lt; 10 ; i++)<br> {<br> _xx = irandom(room_width) ;<br> _yy = irandom(room_height) ;<br> _a[i] = instance_create_layer(_xx, _yy, layer, obj_Bullet) ;<br> } <br>
    <br> show_debug_message(_a) ;
    <br>
    <br> var _f = function(inst1, inst2)<br> {<br> return inst1.x - inst2.x ;<br> } <br>
    <br> array_sort(_a, _f) ;<br> show_debug_message(_a) ;
  </p>
  <p>Le code ci-dessus va créer un tableau de 10 instances placées à des positions aléatoires dans la pièce. Le message de débogage affichera quelque chose comme le suivant :</p>
  <p class="code">[ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]</p>
  <p>Le code crée ensuite une méthode à utiliser dans la fonction <span class="inline">array_sort()</span> qui renvoie la différence entre chacune des positions X des instances de la pièce. Ensuite, la fonction <span class="inline">array_sort()</span> est
    exécutée en utilisant cette méthode, en triant les instances par X, de la plus basse à la plus haute. La sortie du tableau ressemblerait alors à quelque chose comme ceci :</p>
  <p class="code">[ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Variable_Functions.htm">Fonctions variables</a></div>
        <div style="float:right">Suivant : <a href="array_length.htm">array_length</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
array_sort
-->
  <!-- TAGS
array_sort
-->
</body>
</html>