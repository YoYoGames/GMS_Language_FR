<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>http_post_string</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for http_post_string" />
  <meta name="rh-index-keywords" content="http_post_string" />
  <meta name="search-keywords" content="http_post_string" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>http_post_string</h1>
  <p>En informatique, une requête <b>post</b> est utilisée lorsque le client doit envoyer des données au serveur dans le cadre de la requête de récupération, comme lors du téléchargement d'un fichier ou de la soumission d'un formulaire rempli, et il en va de même pour cette fonction dans <span class="notranslate">GameMaker Studio 2</span>.
    Contrairement à la méthode de requête <span class="inline"><a href="http_get.htm">http_get()</a></span> où seule une URL est envoyée au serveur, <tt>http_post_string()</tt> inclut également une chaîne de caractères qui est envoyée au serveur et qui peut entraîner la création d'une nouvelle ressource ou la mise à jour d'une ressource existante.
    d'une nouvelle ressource ou la mise à jour d'une ressource existante, ou les deux. Il convient de noter que les paramètres de requête HTTP (les bits parfois &quot;ajoutés&quot; à la fin d'une URL lorsque vous soumettez un formulaire sur une page Web) sont parfaitement acceptables lors de l'utilisation de cette fonction.
    cette fonction.</p>
  <p class="note"><b>REMARQUE : </b>Vous devez savoir qu'en raison de la protection XSS des navigateurs, les demandes et les tentatives de chargement de ressources provenant d'autres domaines sont bloquées et peuvent donner lieu à des résultats vides. Veuillez consulter la partie sur les <a href="HTTP.htm">problèmes inter-domaines</a> pour plus de détails.</p>
  <p>Cet événement génère un &quot;call back&quot; qui est repris par tout <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm">événement</a> HTTP <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm">, auquel</a> cas il génère une carte DS ( <a href="../../Data_Structures/DS_Maps/DS_Maps.htm">plus</a> communément appelée &quot;dictionnaire&quot;) qui est exclusive à cet événement et qui est stockée dans la variable spéciale <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><b>async_load</b></a>. Cette carte DS contiendra
    différentes valeurs selon que des données sont renvoyées ou non. Par exemple, si vous avez demandé un fichier, l'événement se déclenchera plusieurs fois au fur et à mesure de la réception de chaque paquet de données afin de pouvoir afficher une barre de progression, par exemple. La structure générale
    structure générale de la carte DS sera la suivante :</p>
  <ul class="colour">
    <li><b>id : </b>L'ID qui a été renvoyé par la commande. Si vous lancez une série de requêtes <tt>http_</tt>, vous devez savoir à laquelle vous recevez une réponse, et donc utiliser cette valeur pour la comparer à la valeur que vous avez stockée lors de l'envoi initial de la requête pour trouver la bonne.
      la demande pour trouver la bonne.</li>
    <li><b>status : </b>Renvoie une valeur inférieure à 0 pour une erreur, 0 pour complet et 1 pour la réception de paquets (voir ci-dessous pour plus de détails).</li>
    <li><b>résultat : </b>Les données reçues (chaîne uniquement).</li>
    <li><b>url : </b>L'URL complète que vous avez demandée.</li>
    <li><b>http_status : </b>Le code d'état http brut (si disponible). Cela renvoie le code d'état standard pour la plupart des navigateurs, par exemple : 304 pour &quot;Not Modified&quot; ou 204 pour &quot;No Content&quot;, etc...</li>
  </ul>
  <p>Si plusieurs paquets sont renvoyés à votre jeu, la clé de rappel &quot;status&quot; renverra 1, auquel cas la carte DS aura les clés supplémentaires suivantes :</p>
  <ul class="colour">
    <li><b>&quot;contentLength&quot; : </b>Il s'agit de la taille du fichier que le serveur web a dit que vous deviez vous attendre à recevoir (peut être -1 si le serveur ne renvoie pas ces données).</li>
    <li><b>&quot;sizeDownloaded&quot; : </b>La taille des données qui ont déjà été téléchargées.</li>
  </ul>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">http_post_string(url, string) ;</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>url</td>
        <td>L'adresse web du serveur auprès duquel vous souhaitez obtenir des informations.</td>
      </tr>
      <tr>
        <td>chaîne de caractères</td>
        <td>La chaîne de caractères que vous souhaitez envoyer à l'URL spécifié.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Exemple étendu :</h4>
  <p>La fonction <tt>http_post_string()</tt> peut être appelée à partir de n'importe quel événement, et comme elle est asynchrone, le rappel peut être presque instantané ou prendre plusieurs secondes. L'appel de la fonction est simple et ressemble à quelque chose comme ceci :</p>
  <p class="code">var str = &quot;name=&quot; + global.player_name + &quot;&amp;score=&quot; + string(global.player_score) ;<br> post = http_post_string(&quot;http://www.angusgames.com/game?game_id=&quot; + string(global.game_id), str) ;</p>
  <p>Le code ci-dessus envoie une requête de récupération à l'URL spécifiée avec les paramètres donnés, ainsi que les données supplémentaires (nom du joueur et score sous forme codée par URL) stockées dans la variable str. Cela déclenchera tous les <b>événements Http</b> asynchrones définis si un rappel est reçu, et vous pouvez vérifier l'&quot;id&quot; renvoyé par rapport à celui stocké dans la variable post pour <tt>vous</tt> assurer que vous exécutez le bon code si vous avez utilisé diverses <tt>fonctions</tt> http_post_string <tt>()</tt>. L'exemple de code suivant
    exemple de code suivant montre comment procéder :</p>
  <p class="code">var r_str = &quot;null&quot; ;<br> if ds_map_find_value(async_load, &quot;id&quot;) == post<br> {
    <br> if ds_map_find_value(async_load, &quot;status&quot;) == 0<br> {
    <br> r_str = ds_map_find_value(async_load, &quot;result&quot;) ;<br> }
    <br> }
  </p>
  <p>Le code ci-dessus va d'abord vérifier l'id de la carte DS qui a été créée, puis vérifier le statut de la callback. Si la valeur est égale à 0 (signalant le succès), le résultat de la callback sera alors stocké dans une variable pour une utilisation future, sinon la variable contiendra simplement une valeur par défaut (dans ce cas "null").
    sinon, la variable contiendra simplement une valeur par défaut (dans ce cas, &quot;null&quot;).</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="HTTP.htm">HTTP</a></div>
        <div style="float:right">Suivant : <a href="http_get_request_crossorigin.htm">http_get_request_crossorigin</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
http_post_string
-->
  <!-- TAGS
http_post_string
-->
</body>
</html>