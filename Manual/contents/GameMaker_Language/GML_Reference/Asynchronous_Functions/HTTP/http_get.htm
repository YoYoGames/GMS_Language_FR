<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>http_get</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for http_get" />
  <meta name="rh-index-keywords" content="http_get" />
  <meta name="search-keywords" content="http_get" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>http_get</h1>
  <p>Avec cette fonction, vous vous connectez à l'URL spécifiée afin de récupérer des informations. Comme il s'agit d'une fonction asynchrone, <span class="notranslate">GameMaker Studio 2</span> ne se bloquera pas en attendant une réponse, mais continuera à fonctionner jusqu'à ce qu'il reçoive des informations de rappel. Ce
    informations se présenteront sous la forme d'une chaîne de caractères et déclencheront un <b>événement asynchrone</b> dans toutes les instances qui en ont défini un dans leurs propriétés d'objet. Il convient également de noter que les paramètres de requête HTTP (les éléments parfois &quot;ajoutés&quot; à la fin d'une URL lorsque vous soumettez une requête) ne sont pas des paramètres de requête.
    à la fin d'une URL lorsque vous soumettez un formulaire sur une page Web) sont parfaitement acceptables lorsque vous utilisez cette fonction, par exemple :</p>
  <p class="code">http_get(&quot;http://www. YoYoGames.com/logon?username=&quot;+name) ;</p>
  <p>transmettra la chaîne contenue dans la variable &quot;name&quot; au serveur et récupérera les données de cette URL. Donc, essentiellement, chaque fois qu'un élément de données simple et court doit être transmis du client au serveur, ce serait un choix raisonnable
    comme fonction à utiliser.</p>
  <p class="note"><b>REMARQUE</b>: Vous devez savoir qu'en raison de la protection XSS des navigateurs, les demandes et les tentatives de chargement de ressources provenant d'autres domaines sont bloquées et peuvent donner lieu à des résultats vides. Veuillez consulter la section sur les <a href="HTTP.htm">problèmes inter-domaines</a> pour plus de détails.</p>
  <p>Cette fonction va générer de multiples &quot;call backs&quot; qui seront captés par tout <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm">événement</a> HTTP <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm">.</a> Ceux-ci vont générer un <a href="../../Data_Structures/DS_Maps/DS_Maps.htm"><tt>Carte DS</tt></a>    (plus communément appelé &quot;dictionnaire&quot;) qui est exclusif à cet événement et qui est stocké dans la variable spéciale <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><b>async_load</b></a>. Cette carte DS contiendra
    différentes valeurs selon que des données sont renvoyées ou non. Par exemple, si vous avez demandé un fichier, l'événement se déclenchera plusieurs fois au fur et à mesure de la réception de chaque paquet de données afin de pouvoir afficher une barre de progression, par exemple. La structure générale
    structure générale de la carte DS sera la suivante :</p>
  <ul class="colour">
    <li><b>id : </b>L'ID qui a été renvoyé par la commande. Si vous lancez une série de requêtes <tt>http_</tt>, vous devez savoir à laquelle vous recevez une réponse, et donc utiliser cette valeur pour la comparer à la valeur que vous avez stockée lors de l'envoi initial de la requête pour trouver la bonne.
      la demande pour trouver la bonne.</li>
    <li><b>status : </b>Renvoie une valeur inférieure à 0 pour une erreur, 0 pour complet et 1 pour recevoir des paquets (voir ci-dessous pour plus de détails).</li>
    <li><b>résultat : </b>Les données reçues (chaîne uniquement).</li>
    <li><b>url : </b>L'URL complète que vous avez demandée.</li>
    <li><b>http_status : </b>Le code d'état http brut (si disponible). Cela renvoie le code d'état standard pour la plupart des navigateurs, par exemple : 304 pour &quot;Not Modified&quot; ou 204 pour &quot;No Content&quot;, etc...</li>
  </ul>
  <p>Si plusieurs paquets sont renvoyés à votre jeu, la clé de rappel &quot;status&quot; renverra 1, auquel cas la carte DS aura les clés supplémentaires suivantes :</p>
  <ul class="colour">
    <li><b>&quot;contentLength&quot; : </b>Il s'agit de la taille du fichier que le serveur web a dit que vous deviez vous attendre à recevoir (peut être -1 si le serveur ne renvoie pas ces données).</li>
    <li><b>&quot;sizeDownloaded&quot; : </b>La taille des données qui ont déjà été téléchargées.</li>
  </ul>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">http_get(url) ;</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>url</td>
        <td>L'adresse web du serveur auprès duquel vous souhaitez obtenir des informations.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Exemple étendu :</h4>
  <p>La fonction <tt>http_get()</tt> peut être appelée à partir de n'importe quel événement, et comme elle est asynchrone, le rappel peut être presque instantané ou prendre plusieurs secondes. L'appel de la fonction est simple et ressemble à quelque chose comme ceci :</p>
  <p class="code">get = http_get(&quot;http://www.MacSweeneyGames.com/logon?username=&quot; + nom) ;</p>
  <p>Le code ci-dessus transmettra la chaîne de caractères contenue dans la variable &quot;name&quot; au serveur donné et récupérera les données de cette URL, déclenchant un événement asynchrone qui contiendra la carte async_load DS (l'index de la carte async_load sera stocké dans la variable &quot;get&quot; pour que vous puissiez vérifier le bon appelback).
    la variable &quot;get&quot; pour que vous puissiez vérifier le bon callback). L'événement asynchrone déclenché sera le sous-événement <b>HTTP</b>, et dans cet événement, vous aurez ce qui suit :</p>
  <p class="code">if ds_map_find_value(async_load, &quot;id&quot;) == get<br> {
    <br> if ds_map_find_value(async_load, &quot;status&quot;) == 0<br> {
    <br> r_str = ds_map_find_value(async_load, &quot;result&quot;) ;<br> }
    <br> else
    <br> {
    <br> r_str = &quot;null&quot; ;<br> }
    <br> }
  </p>
  <p>Le code ci-dessus va d'abord vérifier l'id de la carte DS qui a été créée, puis vérifier le &quot;statut&quot; de la callback. Si la valeur est égale à 0 (signalant le succès), le résultat de la callback sera alors stocké dans une variable pour une utilisation future.
    dans une variable pour une utilisation future, sinon la variable sera définie par une valeur par défaut (dans ce cas &quot;null&quot;).</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="HTTP.htm">HTTP</a></div>
        <div style="float:right">Suivant : <a href="http_get.htm">http_get_file</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
http_get
-->
  <!-- TAGS
http_get
-->
</body>
</html>