<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>jeu de couleurs pour les fentes du squelette</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function skeleton_slot_colour_set" />
  <meta name="rh-index-keywords" content="skeleton_slot_colour_set" />
  <meta name="search-keywords" content="skeleton_slot_colour_set,skeleton_slot_color_set" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>jeu de couleurs pour les fentes du squelette</h1>
  <p>Avec cette fonction, vous pouvez définir la couleur et l'alpha d'un slot attaché, de sorte que tous les sprites qui lui sont attachés seront dessinés avec ces valeurs de mélange. Gardez à l'esprit que le sprite d'instance peut avoir une couleur de fusion et un paramètre d'alpha (<a href="../../Sprite_Instance_Variables/image_blend.htm"><tt>image_blend</tt></a> et
    <a href="../../Sprite_Instance_Variables/image_angle.htm"><tt>image_alpha</tt></a>), tout comme l'attachement (voir la fonction <a href="../Attachments/skeleton_attachment_create_colour.htm"><tt>skeleton_attachment_create_colour()</tt></a>), et donc la
    couleur et l'alpha finaux que le sprite d'attachement assigné pour le slot aura seront une combinaison de toutes ces valeurs.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">skeleton_slot_colour_set(slot, colour, alpha) ;</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>fente</td>
        <td>Le nom du slot à définir, une chaîne de caractères</td>
      </tr>
      <tr>
        <td>couleur</td>
        <td>La couleur à définir, soit un nombre entier, une constante ou une valeur hexadécimale.</td>
      </tr>
      <tr>
        <td>alpha</td>
        <td>L'alpha à définir de 0 à 1.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">N/A</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">slot_list = ds_list_create() ;<br> skeleton_find_slot(mouse_x, mouse_y, slot_list) ;<br> if !ds_list_empty(slot_list)<br> {
    <br> for (var i = 0 ; i &lt; ds_list_size(slot_list) ; ++i ;) <br> {
    <br> if skeleton_slot_colour_get(slot_list[| i]) != c_white<br> {
    <br> skeleton_slot_colour_set(slot_list[| i], c_white, 1) ;<br> }
    <br> }
    <br> }
  </p>
  <p>Le code ci-dessus crée une liste de DS et la remplit avec les noms des emplacements trouvés à la position de la souris dans la pièce. Il boucle ensuite sur la liste des emplacements et réinitialise la couleur des emplacements trouvés en blanc avec un alpha de 1 si la couleur n'est pas déjà blanche.
    déjà blanche.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Slots.htm">Slots</a></div>
        <div style="float:right">Suivant : <a href="skeleton_slot_colour_get.htm">skeleton_slot_colour_get</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
skeleton_slot_colour_set
skeleton_slot_color_set
-->
  <!-- TAGS
skeleton_slot_colour_set
-->
</body>
</html>