<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page décrivant les différentes fonctions et variables associées aux Shaders" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> <span class="notranslate">Shaders</span></h1><p> <span class="notranslate">Shaders</span> sont un outil incroyablement puissant pour manipuler quoi et comment les choses sont <a class="glossterm" data-glossterm="rendu" href="#">rendues</a> à l&#39;écran par la carte graphique. Étant donné que ces petits programmes sont en fait exécutés sur la carte graphique elle-même, cela signifie qu&#39;ils sont extrêmement rapides à traiter, ce qui libère de précieux cycles de processeur pour plus de logique de jeu.</p><p> Pour créer un <span class="notranslate">shader</span>, vous aurez besoin d&#39;avoir écrit à la fois un <b>Vertex <span class="notranslate">Shader</span></b> et un <b>fragment <span class="notranslate">Shader</span></b> (également comme <b>Pixel <span class="notranslate">Shader</span></b> ) en utilisant le <a href="../../../../The_Asset_Editors/Shaders.htm"><span class="notranslate">Shader</span> Editor</a>, et même si (par exemple) que vous souhaitez seulement changer les positions des sommets pour un être d&#39;instance dessiné, ou si vous souhaitez uniquement modifier les valeurs de couleur des pixels, vous aurez toujours besoin des <b>deux</b> programmes pour qu&#39;un <span class="notranslate">shader</span> complet fonctionne.</p><p class="note"> <b>REMARQUE:</b> <span class="notranslate">Shaders</span> ne vous permettent <b>pas</b> de modifier la valeur de toutes les variables que vous passez en eux, et donc ceux - ci seront appelés <b><span class="notranslate">shader</span> constantes</b> dans toute la documentation qui fait référence à eux.</p><p> Pour un aperçu complet des fonctions et variables GLSL ES disponibles que vous pouvez utiliser pour programmer les <span class="notranslate">shaders</span> eux-mêmes, veuillez consulter les <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">pages de référence OpenGL ES Shading Language (GLSL ES)</a>. Le lien suivant est également utile car il contient des cartes de référence rapide pour l&#39;API OpenGL ES (notez que seules les deux dernières cartes affichées sont applicables à <span class="notranslate">GameMaker Studio 2</span> ): <a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">Cartes de référence OpenGL ES</a>.</p><p> L&#39;utilisation d&#39;un <span class="notranslate">shader</span> dans vos projets est très simple et ne nécessite que quelques lignes de code pour en tirer le meilleur parti:</p><p class="code">shader_set(myShader);<br/> draw_self();
    <br/> shader_reset();
  </p><p> Comme vous pouvez le voir, ils sont utilisés de la même manière pour les modes de fusion et les surfaces, où vous sélectionnez (définissez) d&#39;abord le <span class="notranslate">shader</span>, dessinez ce que vous voulez en l&#39;utilisant, puis réinitialisez à nouveau la cible de dessin par la suite. Si vous souhaitez rendre le plein écran à travers un <span class="notranslate">shader</span>, et pas seulement un sprite ou un arrière-plan unique, vous devrez configurer une surface pour capturer la vue actuelle, puis la transmettre au <span class="notranslate">shader</span> (voir <a href="../../Drawing/Surfaces/Surfaces.htm">Surfaces</a> pour plus d&#39;informations).</p><p class="note"> <b>REMARQUE</b>: les <span class="notranslate">Shaders</span>, comme tout ce qui concerne le dessin, ne <b>peuvent être utilisés que dans l&#39;événement draw</b>. Il est également intéressant de noter que si vous essayez d&#39;utiliser une valeur de couleur dans un <span class="notranslate">shader</span> et que l&#39;objet n&#39;a pas de texture, les résultats deviendront noirs.</p><p> Si le <span class="notranslate">shader</span> vous utilisez a des valeurs d&#39;entrée, celles-ci sont définies à l&#39;aide des fonctions <i>uniformes.</i> Vous obtiendrez d&#39;abord le <i>handle</i> uniforme (qui est essentiellement une valeur d&#39;ID pour l&#39;uniforme à définir) en utilisant la fonction <a href="shader_get_uniform.htm"><tt>shader_get_uniform()</tt></a> dans l&#39; <b>événement Create</b> de l&#39;instance à l&#39;aide du <span class="notranslate">shader</span>, puis stockez ces poignées dans des variables, quelque chose comme ceci:</p><p class="code">colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br/> colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);</p><p> Une fois que vous avez les poignées uniformes, elles peuvent être définies dans le <span class="notranslate">shader</span> pour l&#39; <b>événement Draw</b> comme ceci:</p><p class="code">shader_set(sShaderDemo5);<br/> shader_set_uniform_f(colour_to_find, 1,1,1 );<br/> shader_set_uniform_f(colour_to_set, 1,0,0 );<br/> draw_sprite(sprite_index,image_index,x+24, y);<br/> shader_reset();
  </p><p> Une dernière chose à noter est que bien que les <span class="notranslate">shaders</span> soient acceptés sur toutes les plates-formes, ils sont toujours spécifiques à l&#39;appareil et si le matériel ou le logiciel de l&#39;appareil ne peut pas utiliser les <span class="notranslate">shaders</span> vous obtiendrez une erreur. Par conséquent, il est recommandé de vérifier que le <span class="notranslate">shader</span> a été compilé avant de définir des uniformes ou d&#39;utiliser le <span class="notranslate">shader</span> lui-même, comme ceci:</p><p class="code">if (shader_is_compiled(myShader))<br/>     {
    <br/>     shader_set(myShader);
    <br/>     draw_self();
    <br/>     shader_reset();
    <br/>     }
    <br/> else show_debug_message(&quot;Shader failed&quot;);</p><p> Comme contrôle supplémentaire, vous pouvez également appeler la fonction <a href="shaders_are_supported.htm"><tt>shaders_are_supported()</tt></a> pour voir si le matériel prend même en charge les <span class="notranslate">shaders</span>. En général, vous effectuez ces vérifications au démarrage du jeu et stockez les résultats sous forme de <a
      href="../../../<span class="notranslate">variable globale GML _Overview / Variables / Global_Variables.htm &quot;&gt;</a> pour ensuite vérifier plus tard.</p><p> Il est important de noter que <span class="notranslate">GameMaker Studio 2</span> prend également en charge certaines <b>macros de</b> compilation conditionnelles qui peuvent être utilisées dans les <span class="notranslate">shaders</span> GLSL ES afin qu&#39;ils puissent exécuter un code alternatif sur des plates-formes prises en charge spécifiques. Les macros et les plates-formes sur lesquelles elles seront générées sont indiquées dans le tableau ci-dessous:</p><p></p><table><tbody><tr><th> Macro de <span class="notranslate">Shader</span></th><th> Évaluer</th><th> Plateforme cible</th></tr><tr><td> _YY_GLSLES_</td><td> 1</td><td> Toutes les plateformes cibles</td></tr><tr><td> _YY_GLSL_</td><td> 2</td><td> Mac et <span class="notranslate">Ubuntu</span> ( <span class="notranslate">Linux</span> )</td></tr><tr><td> _YY_HLSL11_</td><td> 3</td><td> <span class="notranslate">Windows</span>, UWP, XboxOne</td></tr><tr><td> _YY_PSSL_</td><td> 4</td><td> PS4</td></tr></tbody></table><p></p><p> Lorsque vous compilez votre <span class="notranslate">GameMaker Studio 2</span> sur l&#39;une des plates-formes répertoriées à l&#39;aide d&#39;un <span class="notranslate">shader</span> format GLSL ES, l&#39; <i>une</i> des macros ci-dessus sera générée et pourra ensuite être utilisée vérifiée dans le <span class="notranslate">shader</span> comme ceci:</p><p class="code">#ifdef _YY_HLSL11_<br/> // HLSL shader code here<br/> #else
    <br/> // GLSL shader code here<br/> #endif
  </p><p> Si vous êtes nouveau dans les <span class="notranslate">shaders</span> ou si vous souhaitez un guide plus complet pour les créer et les utiliser à l&#39;aide de <span class="notranslate">GameMaker Studio 2</span>, veuillez consulter la page suivante du manuel:</p><ul class="colour"><li> <a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">Guide d&#39;utilisation des <span class="notranslate">Shaders</span></a></li></ul><p></p><p> Les fonctions suivantes sont disponibles pour dessiner et définir des <span class="notranslate">shaders</span>:</p><p></p><ul class="colour"><li> <a href="shader_get_name.htm"><span class="notranslate">shader</span> _get_name</a></li><li> <a href="shader_get_uniform.htm"><span class="notranslate">shader</span> _get_uniform</a></li><li> <a href="shader_get_sampler_index.htm"><span class="notranslate">shader</span> _get_sampler_index</a></li><li> <a href="shader_set.htm"><span class="notranslate">shader</span> _set</a></li><li> <a href="shader_set_uniform_f.htm"><span class="notranslate">shader</span> _set_uniform_f</a></li><li> <a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader</span> _set_uniform_f_array</a></li><li> <a href="shader_set_uniform_i.htm"><span class="notranslate">shader</span> _set_uniform_i</a></li><li> <a href="shader_set_uniform_i_array.htm"><span class="notranslate">shader</span> _set_uniform_i_array</a></li><li> <a href="shader_set_uniform_matrix.htm"><span class="notranslate">shader</span> _set_uniform_matrix</a></li><li> <a href="shader_set_uniform_matrix_array.htm"><span class="notranslate">shader</span> _set_uniform_matrix_array</a></li><li> <a href="shader_reset.htm"><span class="notranslate">shader</span> _reset</a></li><li> <a href="shader_is_compiled.htm"><span class="notranslate">shader</span> _is_compilé</a></li><li> <a href="shaders_are_supported.htm"><span class="notranslate">shaders</span> _sont_supportés</a></li><li> <a href="shader_current.htm"><span class="notranslate">shader</span> _current</a></li></ul><p></p><p> Nous avons également une fonction spéciale qui définit un état global pour tous les <span class="notranslate">shaders</span>:</p><ul><li> <a href="shader_enable_corner_id.htm"><span class="notranslate">shader</span> _enable_corner_id</a></li></ul><p></p><p> Lorsque vous travaillez avec des échantillonneurs de texture dans des <span class="notranslate">shaders</span> vous aurez besoin d&#39;informations sur la texture utilisée, auquel cas vous pouvez utiliser les fonctions suivantes: </p><p></p><ul class="colour"><li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm">sprite_get_texture</a></li><li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm">sprite_get_uvs</a></li><li><a href="../Fonts/font_get_texture.htm">font_get_texture</a></li><li><a href="../Fonts/font_get_uvs.htm">font_get_uvs</a></li><li><a href="../../Drawing/Textures/texture_get_width.htm">texture_get_width</a></li><li><a href="../../Drawing/Textures/texture_get_height.htm">texture_get_height</a></li><li><a href="../../Drawing/Textures/texture_get_texel_width.htm">texture_get_texel_width</a></li><li><a href="../../Drawing/Textures/texture_get_texel_height.htm">texture_get_texel_height</a></li><li><a href="../../Drawing/Textures/texture_set_stage.htm">texture_set_stage</a></li><li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm">gpu_set_texfilter_ext</a></li><li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm">gpu_set_texrepeat</a></li></ul><p></p><p> Bien que ce manuel <b>ne</b> couvre aucune des <span class="notranslate">shader</span> Open GL, il contient une liste de celles qui sont uniques à <span class="notranslate">GameMaker Studio 2</span>. Ces constantes ne font pas partie de la spécification Open GL pour les <span class="notranslate">shaders</span> et sont fournies pour simplifier l&#39;intégration des <span class="notranslate">shaders</span> dans vos projets.</p><ul class="colour"><li> <a href="Shader_Constants.htm">Constantes de <span class="notranslate">Shader</span></a></li></ul><p></p><p> Enfin, <span class="notranslate">GameMaker Studio 2</span> vous permet de définir vos propres <b>formats de sommets à</b> partir desquels vous pouvez créer vos propres primitives personnalisées. Cela peut considérablement accélérer les <span class="notranslate">shader</span> ou peut être utilisé pour étendre leurs capacités et créer des effets surprenants. Vous pouvez trouver des informations à ce sujet dans les sections suivantes:</p><ul class="colour"><li> <a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitives et formats de sommets</a> </li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="../Asset_Management.htm">Asset Management</a></div><div style="float:right"> Suivant: <a href="../Sequences/Sequences.htm">Séquences</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
shader_functions
-->
</body>
</html>