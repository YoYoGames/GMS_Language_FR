<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Shaders" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span class="notranslate">Shaders</span></h1>
  <p>Les<span class="notranslate">nuanceurs</span> sont un outil incroyablement puissant pour manipuler ce qui est <a class="glossterm" data-glossterm="rendu" href="#">rendu à</a> l'écran par la carte graphique et la manière dont il l'est. Puisque ces minuscules programmes sont en fait exécutés sur la carte graphique
    cela signifie qu'ils sont extrêmement rapides à traiter, libérant ainsi de précieux cycles CPU pour une logique de jeu plus poussée.</p>
  <p>Pour créer un <span class="notranslate">shader</span>, vous devrez avoir écrit à la fois un <b>Vertex <span class="notranslate">Shader</span></b> et un <b>Fragment <span class="notranslate">Shader</span></b> (également connu sous le nom de <b>Pixel <span class="notranslate">Shader</span></b>) à l'aide de l'<a href="../../../../The_Asset_Editors/Shaders.htm">éditeur de<span class="notranslate">shader</span></a>, et même si (par exemple)
    vous souhaitez uniquement modifier la position des sommets d'une instance en cours de dessin, ou si vous souhaitez uniquement modifier les valeurs de couleur des pixels, vous aurez toujours besoin des <b>deux</b> programmes pour qu'un <span class="notranslate">shader</span> complet fonctionne.</p>
  <p class="note"><b>REMARQUE</b>: Les <span class="notranslate">shaders</span> <b>ne</b> vous permettent <b>pas</b> de modifier la valeur des variables que vous leur transmettez, et celles-ci seront donc appelées <b>constantes de<span class="notranslate">shaders</span></b> dans toute la documentation qui s'y réfère.</p>
  <p>Pour un aperçu complet des fonctions et variables GLSL ES disponibles que vous pouvez utiliser pour programmer les <span class="notranslate">shaders</span> eux-mêmes, veuillez consulter les <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">pages de référence du langage d'ombrage OpenGL ES (GLSL ES)</a>.
    Le lien suivant est également utile car il contient quelques cartes de référence rapide pour l'API OpenGL ES (notez que seules les deux dernières cartes présentées sont applicables à <span class="notranslate">GameMaker Studio 2</span>) : <a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">Cartes de référence OpenGL ES</a>.</p>
  <p>L'utilisation d'un <span class="notranslate">shader</span> dans vos projets est très simple et ne nécessite que quelques lignes de code pour en tirer le meilleur parti :</p>
  <p class="code"><span class="notranslate">shader_set</span>(myShader) ;<br> draw_self() ;
    <br> <span class="notranslate">shader_reset</span>() ;
  </p>
  <p>Comme vous pouvez le constater, ils sont utilisés de manière similaire aux modes de fusion et aux surfaces, où vous sélectionnez (définissez) d'abord le <span class="notranslate">shader</span>, dessinez ce que vous voulez en l'utilisant, puis réinitialisez à nouveau la cible de dessin. Si vous souhaitez rendre l'écran entier à travers un <span class="notranslate">shader</span>,
    et pas seulement un sprite ou un arrière-plan, vous devrez configurer une surface pour capturer la vue actuelle, puis la transmettre au <span class="notranslate">shader</span> (voir <a href="../../Drawing/Surfaces/Surfaces.htm">Surfaces</a> pour plus d'informations).</p>
  <p class="note"><b>REMARQUE</b>: Les <span class="notranslate">shaders</span>, comme tout ce qui est lié au dessin, <b>ne peuvent être utilisés que dans l'événement draw.</b> Il convient également de noter que si vous essayez d'utiliser une valeur de couleur dans un <span class="notranslate">shader</span> et que l'objet n'a pas de texture, le résultat sera noir.</p>
  <p>Si le <span class="notranslate">shader</span> que vous utilisez a des valeurs d'entrée, celles-ci sont définies à l'aide des fonctions <i>uniformes</i>. Vous devez d'abord obtenir le <i>handle de</i> l'uniforme (qui est essentiellement une valeur d'identification de l'uniforme à définir) en utilisant la fonction <a href="shader_get_uniform.htm"><tt><span class="notranslate">shader_get_uniform</span>()</tt></a> dans
    l'<b>événement Create</b> de l'instance utilisant le <span class="notranslate">shader</span>, puis vous stockez ces identifiants dans des variables, comme ceci :</p>
  <p class="code">colour_to_find = <span class="notranslate">shader_get_uniform</span>(sShaderDemo5, &quot;f_Colour1&quot;) ;<br> colour_to_set = shader_get_uniform(sShaderDemo5<span class="notranslate">, &quot;f_Colour2</span>&quot;) ;</p>
  <p>Une fois que vous avez les poignées uniformes, elles peuvent être définies dans le code du <span class="notranslate">shader</span> pour l'<b>événement Draw</b> comme ceci :</p>
  <p class="code"><span class="notranslate">shader_set</span>(sShaderDemo5) ;<br> <span class="notranslate">shader_set_uniform_f</span>(colour_to_find, 1,1,1 ) ;<br> <span class="notranslate">shader_set_uniform_f</span>(colour_to_set, 1,0,0 ) ;<br> draw_sprite(sprite_index,image_index,x+24, y) ;<br> <span class="notranslate">shader_reset</span>() ;
  </p>
  <p>Une dernière chose à noter est que, bien que les <span class="notranslate">shaders</span> soient acceptés sur toutes les plateformes, ils sont toujours spécifiques à un appareil et si le matériel ou le logiciel de l'appareil ne peut pas utiliser les <span class="notranslate">shaders</span>, vous obtiendrez une erreur. Il est donc recommandé de vérifier que
    le <span class="notranslate">shader</span> a été compilé avant de définir les uniformes ou d'utiliser le <span class="notranslate">shader</span> lui-même, comme ceci :</p>
  <p class="code">if<span class="notranslate">(shader_is_compiled</span>(myShader))<br> {
    <br> <span class="notranslate">shader_set</span>(myShader) ;
    <br> draw_self() ;
    <br> <span class="notranslate">shader_reset</span>() ;
    <br> }
    <br> else show_debug_message(&quot; Shader failed &quot;) ;</p>
  <p>Comme vérification supplémentaire, vous pouvez également appeler la fonction <a href="shaders_are_supported.htm"><tt><span class="notranslate">shaders_are_supported</span>()</tt></a> pour voir si le matériel supporte les <span class="notranslate">shaders</span>. En général, vous ferez ces vérifications au début du jeu et stockerez les résultats dans une
   <a href="../../../GML_Overview/Variables/Global_Variables.htm">variable globale</a> pour les vérifier plus tard.</p>
  <p>Il est important de noter que <span class="notranslate">GameMaker Studio 2</span> prend également en charge certaines <b>macros de</b> compilation conditionnelle qui peuvent être utilisées dans les <span class="notranslate">shaders</span> GLSL ES afin qu'ils puissent exécuter un code alternatif sur des plateformes spécifiques prises en charge. Les macros et les plates-formes sur lesquelles elles
    sur lesquelles elles seront générées sont indiquées dans le tableau ci-dessous :</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Macro<span class="notranslate">Shader</span> </th>
        <th>Valeur</th>
        <th>Plate-forme cible</th>
      </tr>
      <tr>
        <td>_YY_GLSLES_</td>
        <td>1</td>
        <td>Toutes les plateformes cibles</td>
      </tr>
      <tr>
        <td>_YY_GLSL_</td>
        <td>2</td>
        <td>Mac et <span class="notranslate">Ubuntu</span><span class="notranslate">(Linux</span>)</td>
      </tr>
      <tr>
        <td>_YY_HLSL11_</td>
        <td>3</td>
        <td><span class="notranslate">Windows</span>, UWP, XboxOne</td>
      </tr>
      <tr>
        <td>_YY_PSSL_</td>
        <td>4</td>
        <td>PS4</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Lorsque vous compilez votre projet <span class="notranslate">GameMaker Studio 2</span> sur l'une des plates-formes répertoriées en utilisant un <span class="notranslate">shader</span> au format GLSL ES, l'<i>une</i> des macros ci-dessus sera générée et pourra ensuite être utilisée en contrôle dans le code du <span class="notranslate">shader</span> comme ceci :</p>
  <p class="code">#ifdef _YY_HLSL11_<br> // Code du <span class="notranslate">shader</span> HLSL ici<br> #else
    <br> // Le code du <span class="notranslate">shader</span> GLSL est ici<br> #endif
  </p>
  <p>Si vous êtes novice en matière de <span class="notranslate">shaders</span> ou si vous souhaitez un guide plus complet pour les créer et les utiliser avec <span class="notranslate">GameMaker Studio 2</span>, veuillez consulter la page suivante du manuel :</p>
  <ul class="colour">
    <li><a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">Guide d'utilisation des <span class="notranslate">shaders</span></a></li>
  </ul>
  <p> </p>
  <p>Les fonctions suivantes sont disponibles pour dessiner et définir les <span class="notranslate">ombres</span>:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="shader_get_name.htm"><span class="notranslate">shader_get_name</span></a></li>
    <li><a href="shader_get_uniform.htm"><span class="notranslate">shader_get_uniform</span></a></li>
    <li><a href="shader_get_sampler_index.htm"><span class="notranslate">shader_get_sampler_index</span></a></li>
    <li><a href="shader_set.htm"><span class="notranslate">shader_set</span></a></li>
    <li><a href="shader_set_uniform_f.htm"><span class="notranslate">shader_set_uniform_f</span></a></li>
    <li><a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader_set_uniform_f_array</span></a></li>
    <li><a href="shader_set_uniform_i.htm"><span class="notranslate">shader_set_uniform_i</span></a></li>
    <li><a href="shader_set_uniform_i_array.htm"><span class="notranslate">shader_set_uniform_i_array</span></a></li>
    <li><a href="shader_set_uniform_matrix.htm"><span class="notranslate">shader_set_uniform_matrix</span></a></li>
    <li><a href="shader_set_uniform_matrix_array.htm"><span class="notranslate">shader_set_uniform_matrix_array</span></a></li>
    <li><a href="shader_reset.htm"><span class="notranslate">shader_reset</span></a></li>
    <li><a href="shader_is_compiled.htm"><span class="notranslate">shader_est_compilé</span></a></li>
    <li><a href="shaders_are_supported.htm"><span class="notranslate">shaders_sont_supportés</span></a></li>
    <li><a href="shader_current.htm"><span class="notranslate">shader_current</span></a></li>
  </ul>
  <p> </p>
  <p>Nous avons également une fonction spéciale qui définit un état global pour tous les <span class="notranslate">shaders</span>:</p>
  <ul>
    <li><a href="shader_enable_corner_id.htm"><span class="notranslate">shader_enable_corner_id</span></a></li>
  </ul>
  <p> </p>
  <p>Lorsque vous travaillez avec des échantillonneurs de texture dans des <span class="notranslate">shaders</span>, vous aurez besoin d'informations sur la texture utilisée. Dans ce cas, vous pouvez utiliser les fonctions suivantes :</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm">sprite_get_texture</a></li>
    <li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm">sprite_get_uvs</a></li>
    <li><a href="../Fonts/font_get_texture.htm">font_get_texture</a></li>
    <li><a href="../Fonts/font_get_uvs.htm">font_get_uvs</a></li>
    <li><a href="../../Drawing/Textures/texture_get_width.htm">largeur_de_la_texture</a></li>
    <li><a href="../../Drawing/Textures/texture_get_height.htm">texture_get_height</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_width.htm">largeur de texture_get_texel</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_height.htm">texture_get_texel_height</a></li>
    <li><a href="../../Drawing/Textures/texture_set_stage.htm">texture_set_stage</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm">gpu_set_texfilter_ext</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm">gpu_set_texrepeat</a></li>
  </ul>
  <p> </p>
  <p>Bien que ce manuel <b>ne</b> couvre <b>pas</b> toutes les fonctions et variables des <span class="notranslate">shaders</span> Open GL, il contient une liste de celles qui sont propres à <span class="notranslate">GameMaker Studio 2</span>. Ces constantes ne font pas partie de la spécification Open GL pour les <span class="notranslate">shaders</span> et sont fournies pour simplifier l'intégration des shaders dans vos projets.
    pour simplifier l'intégration des <span class="notranslate">shaders</span> dans vos projets.</p>
  <ul class="colour">
    <li><a href="Shader_Constants.htm">Constantes de l'<span class="notranslate">ombrage</span> </a></li>
  </ul>
  <p> </p>
  <p>Enfin, <span class="notranslate">GameMaker Studio 2</span> vous permet de définir vos propres <b>formats de sommets</b> à partir desquels vous pouvez créer vos propres primitives personnalisées. Cela peut accélérer considérablement les opérations des <span class="notranslate">shaders</span> ou être utilisé pour étendre leurs capacités et créer des effets surprenants.
    Vous trouverez des informations à ce sujet dans les sections suivantes :</p>
  <ul class="colour">
    <li><a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitives et formats de sommets</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Asset_Management.htm">Gestion des actifs</a></div>
        <div style="float:right">Suivant : <a href="../Sequences/Sequences.htm">Séquences</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
<span class="notranslate">Shaders</span>
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
<span class="notranslate">shader</span>_functions
-->

</body></html>