<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>alarme</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the variable alarm" />
  <meta name="rh-index-keywords" content="alarm" />
  <meta name="search-keywords" content="alarm" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>alarme</h1>
  <p>Ce <a href="../../../../GML_Overview/Arrays.htm">tableau</a> à une dimension est utilisé pour obtenir la valeur actuelle de toutes les alarmes que l'instance peut avoir, ou il peut être utilisé pour définir ces alarmes. Il y a douze alarmes intégrées dans chaque instance d'un objet,
    et chacune d'entre elles possède son propre <a href="../../../../../The_Asset_Editors/Object_Properties/Object_Events.htm">événement</a> qui se déclenchera lorsque cette variable atteindra 0.</p>
  <p>Les alarmes sont décomptées au début de chaque étape, <i>après</i> l'événement Begin Step mais <i>avant</i> l'événement Main Step et avant que quoi que ce soit ne soit rendu pour l'étape. Il convient de noter que l'alarme n'est pas terminée lorsqu'elle atteint 0 (bien que l'événement
    a été déclenché) car à l'étape suivante, elle passera à -1, donc si vous devez arrêter une alarme pour une raison quelconque, vous devez définir sa valeur de tableau à -1 <i>et non</i> à 0. Les temps d'alarme sont calculés en <i>pas de jeu</i>, avec une valeur de 30 correspondant à 30 pas,
    60 correspond à 60 pas, etc...</p>
  <p class="note"><b>REMARQUE :</b> Une alarme qui ne contient aucune action ou code ne fonctionnera pas. Cependant, même avec un simple commentaire et sans code, l'alarme effectuera un décompte.</p>
  <p>Vous pouvez définir le tableau d'alarme directement (et récupérer la valeur actuelle de l'alarme en utilisant également le tableau), mais dans certaines circonstances, ce n'est pas la méthode la plus appropriée, vous pouvez donc également utiliser la fonction <tt><a href="../alarm_set.htm">alarm_set()</a></tt> pour
    définir une alarme, et la fonction <a href="../alarm_get.htm"><tt>alarm_get()</tt></a> pour obtenir la valeur d'une alarme.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">alarme [val] ;</p>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Nombre entier (-1 si l'alarme ne fonctionne pas)</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">if canshoot<br> {
    <br> if keyboard_check_pressed(vk_space)<br> {
    <br> canshoot = false ;<br> alarm[0] = room_speed ;<br> instance_create_layer(x, y, &quot;Bullets&quot;, obj_Bullet) ;<br> }
    <br> }
  </p>
  <p>Le code ci-dessus vérifie une variable et si elle est vraie, il vérifie si une touche a été pressée et si c'est vrai, il met finalement la variable à faux, déclenche une alarme (où elle sera à nouveau mise à vrai) et crée une instance.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Instance_Variables.htm">Variables d'instance</a></div>
        <div style="float:right">Suivant : <a href="direction.htm">direction</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
alarm
-->
  <!-- TAGS
alarm
-->
</body>
</html>