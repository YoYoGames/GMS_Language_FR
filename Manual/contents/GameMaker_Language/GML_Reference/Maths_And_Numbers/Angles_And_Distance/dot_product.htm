<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>point_produit</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for dot_product" />
  <meta name="rh-index-keywords" content="dot_product" />
  <meta name="search-keywords" content="dot_product" />
</head>

<body>




  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>point_produit</h1>
  <p>Le produit scalaire est une valeur exprimant la relation angulaire entre deux vecteurs. On le trouve en prenant deux vecteurs, en les multipliant et en additionnant les résultats. Le nom &quot;produit scalaire&quot; est dérivé du point centré &quot;-&quot; qui est souvent utilisé pour désigner cette opération.
    centré qui est souvent utilisé pour désigner cette opération (l'appellation alternative &quot;produit scalaire&quot; souligne la nature scalaire plutôt que vectorielle du résultat).</p>
  <p>La formule mathématique réelle peut être écrite comme suit :</p>
  <p><img alt="Dot Product formula" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image.png" /></p>
  <p>Ainsi, en 2D, le produit scalaire des vecteurs <span class="inline">a[x1,y1]</span> et <span class="inline">b[x2,2]</span> est <span class="inline">x1x2 + y1y2</span>, ce qui signifie que le produit scalaire dans <span class="notranslate">GameMaker Studio 2</span> est calculé comme suit :</p>
  <p class="code">a - b = (x1*x2)+(y1*y2) ;</p>
  <p>Ce qui est curieux avec le produit scalaire, c'est la relation qu'il a avec l'angle formé par les vecteurs d'entrée qui peut être exprimé comme suit :</p>
  <p class="code">a - b = (longueur de a) * (longueur de b) * cos(angle)</p>
  <p>C'est-à-dire que le produit scalaire de deux vecteurs sera égal au cosinus de l'angle entre ces vecteurs, multiplié par la longueur de chacun d'eux. Voici une image pour l'illustrer :</p>
  <p><img alt="Dot Product ilustration" class="center" height="143" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image_2.png" width="406" /></p>
  <p class="note"><strong>NOTE</strong>: Pour plus d'informations sur les vecteurs, voir <a href="../../../../Additional_Information/Vectors.htm">ici</a>.</p>
  <p>Il y a quelques éléments que nous pouvons maintenant affirmer à partir de deux vecteurs quelconques en relation avec le résultat de leur produit scalaire :</p>
  <ul class="colour">
    <li>Si a et b sont perpendiculaires (à 90 degrés l'un par rapport à l'autre), le résultat du produit scalaire sera égal à zéro, car <span class="inline">cos(ang)</span> sera égal à zéro.</li>
    <li>Si l'angle entre a et b est inférieur à 90 degrés, le produit scalaire sera positif (supérieur à zéro), car <span class="inline">cos(ang)</span> sera positif.</li>
    <li>Si l'angle entre a et b est supérieur à 90 degrés, le produit scalaire sera négatif (inférieur à zéro), car <span class="inline">cos(ang)</span> sera négatif.</li>
  </ul>
  <p>Qu'est-ce que cela signifie pour ceux d'entre nous qui créent des jeux ? Eh bien, cette relation mathématique peut être utilisée dans de nombreuses circonstances, mais la meilleure façon de s'en rendre compte est de construire un scénario réel et de voir par vous-même ce qui se passe. L'une des façons les plus simples
    L'une des façons les plus simples de le faire est de générer une simple vérification de la &quot;ligne de vue&quot; d'un ennemi dans un jeu de plates-formes, par exemple, afin que l'ennemi &quot;voie&quot; le joueur s'il se trouve à 90° de part et d'autre de sa normale vectorielle.</p>
  <p><img alt="Dot product example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image_1.png">En gros, nous devons obtenir le vecteur normal de l'ennemi (c'est-à-dire composé d'une direction et d'une distance de vue)
    et ensuite nous devons obtenir le vecteur du joueur par rapport à l'ennemi. Nous obtiendrons ensuite le produit scalaire de ces vecteurs, et si le résultat est positif, le joueur a été vu, et s'il est négatif, il ne l'a pas été. Le code réel pour que cela fonctionne est fourni
    dans l'exemple ci-dessous.</p>
  <p> </p>
  <h4><b>Syntaxe :</b></h4>
  <p class="code">dot_product(x1, y1, x2, y2)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>x1</td>
        <td>La coordonnée x du premier vecteur.</td>
      </tr>
      <tr>
        <td>y1</td>
        <td>La coordonnée y du premier vecteur.</td>
      </tr>
      <tr>
        <td>x2</td>
        <td>La coordonnée x du deuxième vecteur.</td>
      </tr>
      <tr>
        <td>y2</td>
        <td>La coordonnée y du deuxième vecteur.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var x1, y1, x2, y2 ;<br> x1 = lengthdir_x(1, image_angle) ;<br> y1 = lengthdir_y(1, image_angle) ;<br> x2 = o_Player.x - x ;<br> y2 = o_Player.y - y ;<br> if dot_product(x1, y1, x2, y2) &gt; 0 seen=true else seen=false ;</p>
  <p>Le code ci-dessus crée un vecteur en utilisant l'angle de l'image de l'instance, puis il obtient le vecteur de l'objet joueur &quot;o_Player&quot; à lui-même. Enfin, il calcule le produit scalaire de ces deux vecteurs et s'il est supérieur à 0, il met la variable "seen" à true.
    &quot;seen&quot; à true, et si elle est égale ou inférieure à 0, elle la met à &quot;false&quot;.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Angles_And_Distance.htm">Angles et distances</a></div>
        <div style="float:right">Suivant : <a href="dot_product_3d.htm">dot_product_3d</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
dot_product
-->
  <!-- TAGS
dot_product
-->

</body></html>