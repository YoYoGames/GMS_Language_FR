<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>sha1_string_utf8</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page de référence pour sha1_string_utf8"/>
  <meta name="rh-index-keywords" content="sha1_string_utf8"/>
  <meta name="search-keywords" content="sha1_string_utf8"/>
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>sha1_string_utf8</h1><p> En cryptographie, SHA-1 est une fonction de hachage cryptographique conçue par la <i>National Security Agency</i> des États-Unis et est utilisée dans plusieurs applications et protocoles largement utilisés comme le populaire <b><span class="notranslate">Git</span></b> où il est utilisé pour vérifier les modifications de fichiers. Cette fonction prendra une chaîne d&#39;entrée UTF-8 (qui a un nombre variable d&#39;octets par caractère) et renvoie un résumé de message de 160 bits au format ASCII, par exemple:</p><p class="code">sha1 input string = &quot;The quick brown fox jumps over the lazy dog&quot;<br/> sha1 output hash = &quot;2fd4e1c6 7a2d28fc ed849ee1 bb76e739 1b93eb12&quot;</p><p> De cette manière, vous pouvez générer une clé sécurisée qui peut être stockée et utilisée pour vérifier l&#39;intégrité des informations envoyées (ou reçues depuis) un serveur externe (par exemple).</p><p class="note"> <b>REMARQUE</b>: il existe deux formats pour l&#39;encodage sha1, UTF-8 et unicode. Les deux sont fournis pour faciliter la communication avec différentes configurations de serveur, mais le plus courant à utiliser est l&#39;unicode.</p><p></p><h4> Syntaxe:</h4><p class="code">sha1_string_utf8(string)</p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">string</span></td><td> La chaîne à hacher.</td></tr></tbody></table><p></p><h4> Retour:</h4><p class="code">String</p><p></p><h4> Exemple:</h4><p class="code">var hash, str;<br/> str = json_encode(hiscore_map);<br/> hash = sha1_string_utf8(str);<br/> ini_open(&quot;local.ini&quot;);
    <br/> ini_write_string(&quot;info&quot;, &quot;0&quot;, hash);<br/> ini_close();
    <br/> get[0] = http_post_string(&quot;http://www.MacSweeney Games.com/CatchTheHaggis?game_hiscores=&quot; + string(global.game_id), str)</p><p> Le code ci-dessus encodera une carte DS dans une chaîne JSON. Un hachage sha1 est ensuite généré et stocké dans un fichier ini afin que celui-ci puisse être utilisé ultérieurement pour vérifier l&#39;intégrité du JSON si les mêmes informations sont reçues ultérieurement par le serveur. Le JSON est ensuite envoyé. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="Encoding_And_Hashing.htm">Encodage de fichiers</a></div><div style="float:right"> Suivant:<a href="sha1_string_unicode.htm">sha1_string_unicode</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
sha1_string_utf8
-->
  <!-- TAGS
sha1_string_utf8
-->

</body></html>