<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>Avec cette fonction, vous pouvez convertir des structures et des tableaux simples ou imbriqués en une chaîne JSON valide. Vous fournissez la valeur initiale à utiliser (un index de tableau ou une référence de structure), puis la fonction la &quot;stringifiera&quot;, la convertissant en une chaîne JSON,
    convertir les tableaux <span class="notranslate">GameMaker</span> en tableaux JSON, et les structures <span class="notranslate">GameMaker</span> en objets JSON.</p>
  <p>Lorsque vous utilisez cette fonction, vous devez tenir compte de certains éléments importants :</p>
  <ul class="colour">
    <li>La fonction <em>ne </em> convertira <em>pas </em> les cartes DS, les listes ou toute autre structure de données en JSON, et stockera simplement la valeur de l'index interne de la structure (qui n'est pas très utile car l'index changera entre les runs du jeu), et en tant que tel
      vous ne devriez pas essayer de stringifier une valeur qui pourrait contenir des références à des structures de données (pour cela, vous disposez de <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>La fonction convertira à peu près n'importe quelle valeur en une chaîne JSON &quot;valide&quot;, mais les valeurs réelles contenues dans la chaîne peuvent ne pas correspondre exactement à ce que vous attendez en raison du mode de fonctionnement de la norme JSON :<br>
      <br> &quot;JSON est agnostique en matière de nombres. Dans tout langage de programmation, il peut y avoir une variété de types de nombres de différentes capacités et compléments, fixes ou flottants, binaires ou décimaux. Cela peut rendre difficile l'échange entre différents langages de programmation.
      différents langages de programmation. Au lieu de cela, JSON offre uniquement la représentation des nombres que les humains utilisent : une séquence de chiffres. Tous les langages de programmation savent comment donner un sens aux séquences de chiffres, même s'ils ne sont pas d'accord sur les représentations internes.&quot;<br>
      <br> Pour plus d'informations, consultez la <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">norme</a> ECMA <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">JSON.</a></li>
    <li>Si vous incluez un int64 dans les valeurs à convertir en JSON, il l'écrira comme un <i>int</i> s'il est dans la plage valide pour un int32, comme un <i>double</i> s'il peut le faire sans perdre de précision ou (si aucun de ces cas n'est applicable) comme une <i>chaîne de caractères</i> avec un identifiant &quot; @i64@<tt>&quot;</tt> avant et &quot; $i64$ &quot; après<tt>.</tt> Lorsque vous analyserez à nouveau le JSON, <span class="notranslate">GameMaker Studio 2</span> récupérera ces identifiants et reconvertira la valeur en int64. Cela signifie que
      que si le JSON est destiné à un serveur ou à une autre cible non GameMaker, ces valeurs ne seront pas appropriées et doivent donc être évitées.</li>
    <li>Si vous incluez <span class="inline">infinity</span>, <span class="inline">-infinity</span> ou <span class="inline">NaN</span> dans les valeurs à convertir en JSON, elles seront encodées en tant que chaînes de caractères car ces valeurs ne font pas partie de la norme JSON, et
      lors de l'analyse du JSON résultant, elles <strong>ne </strong>seront <strong>pas </strong>reconverties dans leurs valeurs <span class="notranslate">d'exécution</span> et resteront des chaînes de caractères. Notez que <span class="inline">NaN</span> sera converti en &quot;nan&quot; (minuscules) lors de la mise en chaîne.</li>
    <li>Il convient d'être prudent lors de l'écriture de toute chaîne JSON retournée dans un fichier <span class="inline">ini</span>, car les spécifications de <span class="inline">ini</span> peuvent causer des problèmes lors de l'utilisation de guillemets et de caractères d'échappement. Voir la fonction <a href="../Ini_Files/ini_write_string.htm"><tt>ini_write_string()</tt></a>      pour plus d'informations.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code"><code>json_stringify</code>(val)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>val</td>
        <td>La valeur de référence d'une structure ou d'un tableau à convertir en chaîne JSON.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">chaîne de caractères</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var _contents = {<br> version : &quot;1&quot;,<br> data : {<br> webSocket : 1,<br> ipv4Address : &quot;95.39.220.218&quot;,<br> ipv6Address : &quot;0000:0000:0000:0000:0000:ffff:5f27:dcda&quot;,<br> header : &quot;Vous recevez un paquet&quot;, body : &quot;Ce paquet est vide et seulement pour le test&quot;, }, }.
    : &quot;Vous recevez un paquet&quot;,<br> body : &quot;Ce paquet est vide et sert uniquement de test&quot;,<br> }, <br> } ;
    <br> packet = json_stringify(map) ;</p>
  <p>Le code ci-dessus convertira la structure &quot;_contents&quot; en une chaîne JSON et stockera la chaîne dans une variable. La chaîne réelle sera comme ceci :</p>
  <p class="code">{&quot;version&quot; : &quot;1&quot;, &quot;myObj&quot; : { &quot;header&quot; : &quot;You are receiving a packet&quot;, &quot;webSocket&quot; : 1, &quot;body&quot; : &quot;Un paquet de chips au fromage et aux oignons&quot;, &quot;ipv4Address&quot; : &quot;95.39.220.218&quot;,
    &quot;ipv6Address&quot; : &quot;0000:0000:0000:0000:0000:ffff:5f27:dcda&quot; } }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Encoding_And_Hashing.htm">Codage des fichiers</a></div>
        <div style="float:right">Suivant : <a href="json_parse.htm">json_parse</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>