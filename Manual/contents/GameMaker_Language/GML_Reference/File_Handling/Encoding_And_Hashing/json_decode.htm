<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_decode</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_decode" />
  <meta name="rh-index-keywords" content="json_decode" />
  <meta name="search-keywords" content="json_decode" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_decode</h1>
  <h3><strong>IMPORTANT !</strong> Cette fonction - bien qu'elle soit toujours valide - a été remplacée par la fonction <span class="inline"><a href="json_parse.htm">json_parse()</a></span>, et nous vous recommandons de n'utiliser cette fonction que pour le support historique.</h3>
  <p>JSON (JavaScript Object Notation) est un format d'échange de données léger, facile à lire et à écrire, tant pour les personnes que pour les machines. Il repose sur deux structures de base :</p>
  <ul class="colour">
    <li>Une collection de paires nom/valeur, appelée " carte " dans GameMaker Studio 2. <a href="../../Data_Structures/DS_Maps/DS_Maps.htm"><tt>Carte DS</tt></a> dans <span class="notranslate">GameMaker Studio 2</span> mais également appelée &quot;dictionnaire&quot; ou &quot;objet&quot;.</li>
    <li>Une liste ordonnée de valeurs, appelée <a href="../../Data_Structures/DS_Lists/DS_Lists.htm"><tt>Liste DS</tt></a> dans <span class="notranslate">GameMaker Studio 2</span>, mais elle peut également être appelée &quot;tableau&quot; ou &quot;séquence&quot;.</li>
  </ul>
  <p>Avec cette fonction, vous pouvez décoder un morceau de JSON et le convertir en une <tt>carte DS</tt>, prête à être utilisée dans <span class="notranslate">GameMaker Studio 2</span>. Si le JSON à décoder nécessite une hiérarchie de listes et de cartes au sein de la carte DS centrale, celles-ci sont également décodées et créées pour vous, selon les règles suivantes (notez que ces règles s'appliquent à la structure de premier niveau).
    créées pour vous, en utilisant les règles suivantes (notez que ces règles s'appliquent uniquement à la structure de haut niveau) :</p>
  <ul class="colour">
    <li><strong><i>JSON est une valeur unique</i></strong> - renvoie une carte DS avec une seule entrée &quot;default&quot; qui est la valeur.</li>
    <li><strong><i>JSON est un tableau d'objets ou de valeurs</i></strong> - renvoie une carte DS avec une seule entrée &quot;default&quot; qui est une liste DS des objets ou des valeurs.</li>
    <li><strong><i>JSON est un objet</i></strong> - renvoie une carte DS contenant les entrées de l'objet.</li>
  </ul>
  <p class="note"><b>NOTE</b>: Lors du décodage des tableaux JSON, il existe une map avec la clé &quot;default&quot; UNIQUEMENT lorsqu'un tableau est la structure de premier niveau, et UNIQUEMENT pour ce tableau de premier niveau. Les listes internes sont décodées directement dans la carte DS sans être incluses dans une carte DS.</p>
  <p class="note"><strong>REMARQUE</strong>: si vous avez écrit des tableaux <span class="notranslate">GameMaker</span> dans le niveau supérieur, ou comme contenu d'une carte DS ou d'une liste DS, ceux-ci seront décodés comme des listes DS, et <strong>non</strong> des tableaux.</p>
  <p>Normalement, vous devriez savoir à quelles clés le JSON est décodé, mais si ce n'est pas le cas, vous pouvez utiliser l'attribut <a href="../../Data_Structures/DS_Maps/ds_map_size.htm"><tt>ds_map_size()</tt></a>, <a href="../../Data_Structures/DS_Maps/ds_map_find_first.htm"><tt>ds_map_find_first()</tt></a>    et <a href="../../Data_Structures/DS_Maps/ds_map_find_next.htm"><tt>ds_map_find_next()</tt></a> pour analyser la carte et obtenir les informations nécessaires.</p>
  <p class="note"><b>REMARQUE</b>: <span class="notranslate">GameMaker Studio 2</span> crée les cartes et les listes DS nécessaires à partir du JSON. Pour faire le ménage, il vous suffit de supprimer la carte ou la liste de <b>niveau supérieur</b> et <span class="notranslate">GameMaker Studio 2</span> effacera automatiquement de sa mémoire toutes les cartes et listes situées en dessous.</p>
  <p class="note"><b>IMPORTANT</b>: Vous ne pouvez pas avoir de chiffres 64 bits dans votre JSON, car ils ne fonctionneront pas correctement car ils ne sont pas gérés par le format JSON.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">json_decode(string)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>chaîne de caractères</td>
        <td>La chaîne de format JSON que vous transmettez à la fonction pour le décodage.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">ID de la carte DS ou -1 si elle échoue</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var resultMap = json_decode(requestResult) ;<br> var list = ds_map_find_value(resultMap, &quot;default&quot;) ;<br> var size = ds_list_size(list) ;<br> for (var n = 0 ; n &lt; ds_list_size(list) ; n++ ;) <br> {
    <br> var map = ds_list_find_value(list, n) ;<br> var curr = ds_map_find_first(map) ;<br> while (is_string(curr))<br> {
    <br> global.Name[n] = ds_map_find_value(map, &quot;name&quot;) ;<br> curr = ds_map_find_next(map, curr) ;<br> }
    <br> }
    <br> ds_map_destroy(resultMap) ;
  </p>
  <p>Le code ci-dessus décode une chaîne JSON et l'analyse pour générer un tableau global.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Encoding_And_Hashing.htm">Codage des fichiers</a></div>
        <div style="float:right">Suivant : <a href="json_stringify.htm">json_stringify</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
json_decode
-->
  <!-- TAGS
json_decode
-->
</body>
</html>