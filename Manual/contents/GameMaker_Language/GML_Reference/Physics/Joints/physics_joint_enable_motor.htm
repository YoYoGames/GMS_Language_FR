<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_joint_enable_motor</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page de référence pour physics_joint_enable_motor" />
  <meta name="rh-index-keywords" content="physics_joint_enable_motor" />
  <meta name="search-keywords" content="physics_joint_enable_motor" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>physics_joint_enable_motor</h1><p> Lorsque vous avez une articulation avec un moteur ( <a href="physics_joint_prismatic_create.htm">prismatique</a> ou <a href="physics_joint_revolute_create.htm">révolutionnaire</a> ), vous voudrez peut-être pouvoir allumer ou éteindre le moteur en fonction des variables et des conditions du jeu. Pour cela, vous devez avoir préalablement stocké l&#39;index de l&#39;articulation dans une variable puis vous pouvez allumer ou éteindre le moteur en utilisant cette fonction et en définissant l&#39;argument &quot;moteur&quot; sur <tt>true</tt> ou <tt>false</tt>.</p><p></p><h4> Syntaxe:</h4><p class="code">physics_joint_enable_motor(joint, motor)</p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">joint</span></td><td> L&#39;articulation sur laquelle vous souhaitez activer ou désactiver le moteur</td></tr><tr><td> <span class="notranslate">motor</span></td><td> Que vous souhaitiez allumer (vrai) ou éteindre le moteur (faux)</td></tr></tbody></table><p></p><h4> Retour:</h4><p class="code">N/A</p><p></p><h4> Exemple:</h4><p class="code">var t_fix = physics_fixture_create();<br/> physics_fixture_set_circle_shape(t_fix, sprite_get_width(sprite_index) / 2);<br/> var o_id=instance_create_layer(x+300, y, &quot;Instances&quot;, obj_Door);<br/> physics_fixture_bind(t_fix, id);<br/> physics_fixture_bind(t_fix,
    o_id);<br/> perma_joint = physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 10, 2, 0, 0);<br/> physics_joint_enable(perma_joint, 1);<br/> physics_fixture_delete(t_fix);
  </p><p> Le code ci-dessus crée et définit un nouveau luminaire, puis crée une instance de &quot;obj_Door&quot;, liant le luminaire créé aux deux instances. Ils sont ensuite joints par un joint tournant sans moteur et les angles limités à une oscillation de +/- 90 degrés, et nous stockons l&#39;indice de joint dans la variable &quot;perma_joint&quot;. Nous allumons ensuite le moteur à l&#39;aide de cette variable, avant de supprimer définitivement l&#39;appareil de la mémoire car il n&#39;est plus nécessaire. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Arrière: <a href="Joints.htm">Joints</a></div><div style="float:right"> Suivant:<a href="physics_joint_get_value.htm">physics_joint_get_value</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_enable_motor
-->
  <!-- TAGS
physics_joint_enable_motor
-->
</body>
</html>