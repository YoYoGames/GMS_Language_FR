<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_joint_revolute_create</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_revolute_create" />
  <meta name="rh-index-keywords" content="physics_joint_revolute_create" />
  <meta name="search-keywords" content="physics_joint_revolute_create" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>physics_joint_revolute_create</h1>
  <p>Une articulation revolute oblige deux corps à partager un point d'ancrage commun (souvent appelé point de charnière) et l'articulation a un seul degré de liberté - la rotation relative des deux corps autour de ce point. Pour spécifier une rotule, vous devez fournir deux instances
    et un point d'ancrage unique dans la pièce, comme vous pouvez le voir dans l'image fournie :</p>
  <p><img alt="Revolute joint anchor points illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/revolute_joint_image_1.png">Si vous regardez l'image, vous pouvez voir que les deux instances ont été créées pour se chevaucher.
    pour se chevaucher et au point où elles se touchent, nous avons défini un joint tournant. Maintenant, cette articulation peut être limitée dans sa liberté de rotation grâce aux valeurs &quot;ang_min_limit&quot; et &quot;ang_max_limit&quot;. Comment cela fonctionne-t-il ? Eh bien,
    regardons une autre image :</p>
  <p><img alt="Revolute joint angle limits illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/revolute_joint_image_2.png">Comme vous pouvez le constater, les angles dans le monde de la physique <i>ne</i> sont <i>pas</i> les mêmes que les angles standard.
   <span class="notranslate">GameMaker Studio 2</span> où la droite correspond à 0 degré et où l'on va dans le sens inverse des aiguilles d'une montre de sorte que le haut correspond à 90, la gauche à 180 et le bas à 270. Non, lorsqu'il s'agit d'une articulation rotative, l'axe des 0 degrés va de la position de l'articulation à l'origine de la
    seconde instance définie par la fonction et les angles sont alors calculés dans le sens des aiguilles d'une montre. Si vous activez la limitation d'angle, les limites sont définies comme étant relatives à cet axe de 0 degré et la plage de limites <i>doit inclure zéro</i>, sinon
    l'articulation fera des embardées lorsque la pièce commencera. Enfin, vous pouvez définir l'articulation comme ayant un moteur ou non. Cela signifie que lorsqu'elle n'est pas influencée par une collision, l'articulation se déplacera dans une direction définie par la vitesse du moteur, un nombre positif correspondant au sens des aiguilles d'une montre et un nombre négatif au sens inverse.
    dans le sens des aiguilles d'une montre et un nombre négatif dans le sens inverse. L'argument &quot;max_motor_torque&quot; permet de limiter la vitesse de rotation afin de ne pas avoir un moteur en perpétuelle accélération et de limiter l'influence que peut avoir une collision sur la rotation.
    peut avoir sur la rotation. De cette façon, vous pouvez utiliser un moteur d'articulation pour simuler la friction de l'articulation en fixant la vitesse de l'articulation à zéro et le couple maximum à une valeur faible mais significative. Le moteur essaiera d'empêcher la rotation de l'articulation, mais cédera
    à une charge importante.</p>
  <p>Comme pour tous les joints, si vous définissez la valeur &quot;col&quot; sur true, <tt>les</tt> deux instances peuvent interagir et entrer en collision l'une avec l'autre, mais seulement si <i>elles</i> ont des événements de collision <tt>.</tt>
    quoi qu'il arrive.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">physics_joint_revolute_create(inst1, inst2, w_anchor_x, w_anchor_y, ang_min_limt, ang_max_limit, ang_limit, max_motor_torque, motor_speed, motor, col)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>inst1</td>
        <td>La première instance à se connecter avec l'articulation</td>
      </tr>
      <tr>
        <td>inst2</td>
        <td>La deuxième instance pour se connecter avec le joint</td>
      </tr>
      <tr>
        <td>w_anchor_x</td>
        <td>La coordonnée x de l'articulation, dans l'univers du jeu.</td>
      </tr>
      <tr>
        <td>w_anchor_y</td>
        <td>La coordonnée y de l'articulation, dans l'univers du jeu.</td>
      </tr>
      <tr>
        <td>ang_min_limit</td>
        <td>La limite inférieure autorisée pour l'angle du joint</td>
      </tr>
      <tr>
        <td>ang_max_limit</td>
        <td>La limite supérieure autorisée pour l'angle du joint</td>
      </tr>
      <tr>
        <td>ang_limit</td>
        <td>Si l'on veut limiter l'angle de l'articulation (vrai) ou non (faux).</td>
      </tr>
      <tr>
        <td>couple_moteur_maximal</td>
        <td>Définit le couple moteur maximal utilisé pour atteindre la vitesse moteur souhaitée (en Newtons par mètre).</td>
      </tr>
      <tr>
        <td>vitesse du moteur</td>
        <td>C'est la vitesse à laquelle le moteur doit tourner.</td>
      </tr>
      <tr>
        <td>moteur</td>
        <td>Si le moteur doit être actif (true) ou non (false).</td>
      </tr>
      <tr>
        <td>col</td>
        <td>Si les deux instances peuvent entrer en collision (vrai) ou non (faux).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Nombre entier (indice de l'articulation)</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var mainFixture, o_id ;<br> mainFixture = physics_fixture_create() ;<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2) ;<br> o_id=instance_create_layer(x+25, y, &quot;Instances&quot;, obj_Door) ;<br> physics_fixture_bind(mainFixture,
    id) ;<br> physics_fixture_bind(mainFixture, o_id) ;<br> physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 0, 0, 0, 0) ;<br> physics_fixture_delete(mainFixture) ;
  </p>
  <p>Le code ci-dessus crée et définit un nouveau dispositif et crée ensuite une instance de &quot;obj_Door&quot;, liant le dispositif créé aux deux nouveaux objets. Ils sont ensuite reliés par un joint tournant sans moteur et les angles sont limités à une oscillation de +/- 90 degrés.
    de +/- 90 degrés. Enfin, le dispositif est supprimé car il n'est plus nécessaire.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Dos : <a href="Joints.htm">Articulations</a></div>
        <div style="float:right">Suivant : <a href="physics_joint_prismatic_create.htm">physics_joint_prismatic_create</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_revolute_create
-->
  <!-- TAGS
physics_joint_revolute_create
-->
</body>
</html>