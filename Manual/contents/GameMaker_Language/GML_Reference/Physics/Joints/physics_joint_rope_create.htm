<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_joint_rope_create</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_rope_create" />
  <meta name="rh-index-keywords" content="physics_joint_rope_create" />
  <meta name="search-keywords" content="physics_joint_rope_create" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>physics_joint_rope_create</h1>
  <p>Une articulation à corde est utilisée pour joindre deux instances que l'on souhaite maintenir à une distance constante, quelles que soient les autres forces qui agissent sur elles. Avec un joint de distance, vous pouvez obtenir un &quot;étirement du joint&quot; où les deux montages se sépareront
    et se comporteront de manière étrange si une trop grande tension est exercée sur le joint, alors que le joint en corde ne le fait pas et ne s'étendra pas plus loin que la longueur maximale définie. Lorsque vous créez un joint en corde, les deux instances doivent déjà être créées et avoir une fixation assignée.
    Ensuite, vous définissez les deux points d'ancrage en coordonnées de pièce. Le premier point d'ancrage est connecté à l'instance 1, le second point d'ancrage est connecté à l'instance 2 et la distance et l'argument maxlength définissent la contrainte de longueur maximale sur le joint.
    la contrainte de longueur maximale sur le joint. L'image ci-dessous montre comment cela fonctionne :</p>
  <p><img alt="Rope joint illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/direction_joint_image.png">Comme vous pouvez le constater, les points d'ancrage sont spécifiés en tant que coordonnées de la pièce.
    surtout si les instances sont créées en même temps que les articulations plutôt que d'être placées dans la room via l'éditeur de room. Vous devez également savoir que les articulations sont créées indépendamment de la taille du sprite des instances
    ou des fixtures qu'elles ont attachées. Ainsi, si vous créez un joint de corde ailleurs qu'à l'origine de l'instance, il est toujours valide et contraindra les deux instances par rapport à la position à laquelle il a été créé. Si vous définissez la valeur &quot;col&quot;
    à <tt>true (vrai)</tt>, les deux instances peuvent interagir et entrer en collision l'une avec l'autre, mais <i>seulement</i> si elles ont des événements de collision, alors que si elle est réglée à <tt>false (faux)</tt>, elles n'entreront jamais en collision.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">physics_joint_rope_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, maxlength, col)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>inst1</td>
        <td>La première instance à se connecter avec l'articulation</td>
      </tr>
      <tr>
        <td>inst2</td>
        <td>La deuxième instance pour se connecter avec le joint</td>
      </tr>
      <tr>
        <td>w_anchor1_x</td>
        <td>La première coordonnée x de l'articulation, dans l'univers du jeu.</td>
      </tr>
      <tr>
        <td>w_anchor1_y</td>
        <td>La première coordonnée y de l'articulation, dans l'univers du jeu.</td>
      </tr>
      <tr>
        <td>w_anchor2_x</td>
        <td>La deuxième coordonnée x de l'articulation, dans l'univers du jeu.</td>
      </tr>
      <tr>
        <td>w_anchor2_y</td>
        <td>la deuxième coordonnée y de l'articulation, dans l'univers de jeu</td>
      </tr>
      <tr>
        <td>longueur maximale</td>
        <td>La longueur maximale que l'articulation peut &quot;s'étirer&quot;.</td>
      </tr>
      <tr>
        <td>col</td>
        <td>Si les deux instances peuvent entrer en collision (vrai) ou non (faux).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Nombre entier (indice de l'articulation)</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var mainFixture, o_id ;<br> mainFixture = physics_fixture_create() ;<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2) ;<br> o_id=instance_create_layer(x+300, y, &quot;Instances&quot;, obj_Rudder) ;<br> physics_fixture_bind(mainFixture,
    id) ;<br> physics_fixture_bind(mainFixture, o_id) ;<br> physics_joint_rope_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 300, 0) ;<br> physics_fixture_delete(mainFixture) ;
  </p>
  <p>Le code ci-dessus crée et définit un nouveau dispositif, puis crée une instance de &quot;obj_Rudder&quot;. Le dispositif est ensuite assigné à l'instance qui exécute le code ainsi qu'à l'instance nouvellement créée et une corde est créée entre elles.
    Enfin, le dispositif est supprimé car il n'est plus nécessaire.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Dos : <a href="Joints.htm">Articulations</a></div>
        <div style="float:right">Suivant : <a href="physics_joint_wheel_create.htm">physics_joint_wheel_create</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_rope_create
-->
  <!-- TAGS
physics_joint_rope_create
-->
</body>
</html>