<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_fixture_bind_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page de référence pour physics_fixture_bind_ext" />
  <meta name="rh-index-keywords" content="physics_fixture_bind_ext" />
  <meta name="search-keywords" content="physics_fixture_bind_ext" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>physics_fixture_bind_ext</h1><p> Une fois que nous avons défini notre appareil, il doit être lié à une instance. Cela signifie que ses <i>propriétés</i> sont transférées à l&#39;instance sélectionnée, et <b>non à l&#39;appareil lui</b> -même, de sorte qu&#39;un appareil peut être lié à plusieurs instances si toutes doivent avoir les mêmes propriétés. Vous pouvez spécifier un index d&#39;objet pour la cible et toutes les instances présentes dans la salle à ce moment-là recevront les propriétés de cet appareil (mais pas les nouvelles instances de l&#39;objet créé ultérieurement), ou vous pouvez utiliser les mots-clés spéciaux <i>other</i> and <i>all</i>. Vous pouvez même spécifier un objet parent et toutes les instances enfants avec ce parent recevront également le fixture. Une fois que le projecteur a été lié à toutes les instances dont vous avez besoin, il peut être supprimé s&#39;il n&#39;est plus nécessaire et les instances avec ces propriétés de fixtures ne seront pas affectées et conserveront ces propriétés.</p><p> Normalement, l&#39;appareil sera lié à l&#39;instance avec le centre de gravité positionné à l&#39;origine de l&#39;instance, mais ce n&#39;est pas toujours ce dont vous avez besoin et cette fonction vous permet donc également de décaler les positions x et y où l&#39;appareil est lié par un montant donné (si vous n&#39;en avez pas besoin, utilisez <a href="physics_fixture_bind.htm"><tt>physics_fixture_bind()</tt></a> au lieu). Il est important de noter qu&#39;un appareil ne peut prendre en charge qu&#39;un <i>seul</i> décalage, car l&#39;ajout de plusieurs décalages à un seul appareil n&#39;est pas pris en charge par Box2D.</p><p><img alt="Extended physics fixture binding example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/physics_fixture_bind_ext_image.png" /> La fonction renverra également une valeur &quot;id&quot; unique pour le projecteur <i>lié</i> <b>(pas le projecteur lui-même</b> ) qui peut ensuite être utilisé pour supprimer (&quot;dé-lier&quot;) les propriétés physiques de l&#39;instance à l&#39;aide de la fonction <a href="physics_remove_fixture.htm"><tt>physics_remove_fixture()</tt></a>. Cela vous permet d&#39;ajouter et de supprimer des propriétés physiques d&#39;une instance sans détruire ni recréer des objets.</p><p class="note"> <b>REMARQUE</b>: les appareils doivent être supprimés lorsqu&#39;ils ne sont plus nécessaires, car le fait de ne pas le faire peut entraîner une fuite de mémoire qui ralentira et finira par planter votre jeu.</p><p></p><h4> Syntaxe:</h4><p class="code">physics_fixture_bind_ext(fixture, target, xoffset, yoffset)</p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">fixture</span></td><td> le luminaire qui doit être lié</td></tr><tr><td> <span class="notranslate">target</span></td><td> l&#39;instance cible qui doit recevoir le projecteur (peut être un identifiant d&#39;instance, un identifiant d&#39;objet, <i>autre</i> ou <i>tout</i> )</td></tr><tr><td> <span class="notranslate">xoffset</span></td><td> le décalage le long de l&#39;axe x</td></tr><tr><td> <span class="notranslate">yoffset</span></td><td> le décalage le long de l&#39;axe y</td></tr></tbody></table><p></p><h4> Retour:</h4><p class="code">Real</p><p></p><h4> Exemple:</h4><p class="code">var fix, inst;<br/> fix = physics_fixture_create();<br/> physics_fixture_set_circle_shape(fix, 16);<br/> physics_fixture_set_density(fix, 1.0);<br/> inst = instance_create_layer(x, y, &quot;Instances&quot;, genericBodyObject);<br/> my_fix = physics_fixture_bind_ext(fix,
    inst, sprite_width / 2, -(sprite_height / 2));<br/> physics_fixture_delete(fix);
  </p><p> Le code ci-dessus créera un appareil et attribuera son index à la variable «fix». Il définit ensuite la forme et la densité de l&#39;appareil avant de le lier à l&#39;instance à un décalage basé sur la largeur et la hauteur de l&#39;image-objet. L&#39;index de l&#39; <b>appareil lié</b> est stocké dans la variable &quot;my_fix&quot;. Enfin, l&#39;appareil lui-même est supprimé pour éviter les fuites de mémoire car il n&#39;est plus nécessaire. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="Fixtures.htm">Fixtures</a></div><div style="float:right"> Suivant:<a href="physics_fixture_set_collision_group.htm">physics_fixture_set_collision_group</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
physics_fixture_bind_ext
-->
  <!-- TAGS
physics_fixture_bind_ext
-->
</body>
</html>