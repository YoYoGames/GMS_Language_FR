<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_world_draw_debug</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page de référence pour physics_world_draw_debug" />
  <meta name="rh-index-keywords" content="physics_world_draw_debug,phy_debug_render_aabb,phy_debug_render_collision_pairs,phy_debug_render_coms,phy_debug_render_core_shapes,phy_debug_render_joints,phy_debug_render_obb,phy_debug_render_shapes" />
  <meta name="search-keywords" content="physics_world_draw_debug,phy_debug_render_aabb,phy_debug_render_collision_pairs,phy_debug_render_coms,phy_debug_render_core_shapes,phy_debug_render_joints,phy_debug_render_obb,phy_debug_render_shapes" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>physics_world_draw_debug</h1><p> Cette fonction dessinera une représentation du système du monde physique de la pièce pour vous aider au débogage lorsque vous rencontrez des difficultés pour que la scène physique fonctionne correctement. Parfois, le problème peut être dans la partie rendu de votre jeu, par exemple un sprite peut être dessiné à la mauvaise position ou rotation, donnant l&#39;apparence d&#39;une physique incorrecte, ou il se peut que vos calculs ne soient pas corrects. Dans tous les cas, cette fonction vous aidera à trouver et à résoudre le problème en dessinant ce qui se passe dans votre système physique. Pour ce faire, vous devez lui indiquer quelle partie du système dessiner, et cela se fait en passant une valeur créée à partir des bits stockés dans diverses constantes &quot;flag&quot;:</p><p></p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">phy_debug_render_aabb</span></td><td> Ceci montre la boîte englobante absolue de chaque appareil par rapport à l&#39;axe de la pièce</td></tr><tr><td> <span class="notranslate">phy_debug_render_collision_pairs</span></td><td> Cela montrera tous les appareils qui sont actuellement en collision</td></tr><tr><td> <span class="notranslate">phy_debug_render_coms</span></td><td> Cela marque le centre de masse de chaque appareil dans la pièce</td></tr><tr><td> <span class="notranslate">phy_debug_render_core_shapes</span></td><td> Affiche les formes de base qui composent les luminaires dans la pièce</td></tr><tr><td> <span class="notranslate">phy_debug_render_joints</span></td><td> Cela dessinera chacun des joints de tous les luminaires de la pièce</td></tr><tr><td> <span class="notranslate">phy_debug_render_obb</span></td><td> Cela montre le cadre de délimitation relatif pour les appareils dans la pièce</td></tr><tr><td> <span class="notranslate">phy_debug_render_shapes</span></td><td> Cela montre les formes réelles qui composent les luminaires dans la pièce</td></tr></tbody></table><p></p><p> Donc, pour dessiner deux de ces options, nous aurions besoin de faire un <a href="../../../../Additional_Information/Bitwise_Operators.htm">&quot;ou&quot;</a> au niveau du bit (dans <span class="notranslate">GameMaker Studio 2</span> cela est représenté par |) sur les deux et stocker la variable résultante pour la fonction à utiliser. Voici un exemple de la façon dont vous définiriez une variable à utiliser avec la fonction qui ne dessinera que les centres de gravité et les joints de tous les appareils dans une pièce:</p><p class="code">flag = phy_debug_render_coms | phy_debug_render_shapes;</p><p> Ce qui vous donnerait quelque chose comme ça:</p><p><img alt="Physics debug draw example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/physics_draw_debug_image.png" /> Comme vous pouvez le voir avec le code ci-dessus, seules les formes et les centres de gravité sont dessinés à l&#39;écran (ainsi que les couleurs représentant leurs états - pour plus d&#39;informations, veuillez consulter la documentation Box 2D en ligne). De la même manière, vous pouvez afficher plus, voire la totalité, des constantes que vous souhaitez déboguer... Simplement &quot;ou&quot; toutes ensemble! Une autre chose doit être notée: cette fonction ne doit être appelée <i>que</i> dans l&#39;événement draw d&#39;une instance dont la profondeur est inférieure à celles que vous souhaitez déboguer, sinon vous ne pourrez pas voir les informations de débogage.</p><p></p><h4> Syntaxe:</h4><p class="code">physics_world_draw_debug(flag)</p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">flag</span></td><td> La valeur de l&#39;indicateur pour afficher les différentes fonctionnalités de débogage</td></tr></tbody></table><p></p><h4> Retour:</h4><p class="code">N/A</p><p></p><h4> Exemple:</h4><p class="code">flag = phy_debug_render_aabb | phy_debug_render_collision_pairs | phy_debug_render_obb;<br/> physics_world_draw_debug(flag);
  </p><p> Le code ci-dessus dessinera toutes les boîtes englobantes absolues, les boîtes englobantes relatives ainsi que les appareils en collision dans le système de physique actuel. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="The_Physics_World.htm">Le monde de la physique</a></div><div style="float:right"> Suivant:<a href="physics_draw_debug.htm">physics_draw_debug</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
physics_world_draw_debug
phy_debug_render_aabb
phy_debug_render_collision_pairs
phy_debug_render_coms
phy_debug_render_core_shapes
phy_debug_render_joints
phy_debug_render_obb
phy_debug_render_shapes
-->
  <!-- TAGS
physics_world_draw_debug
-->
</body>
</html>