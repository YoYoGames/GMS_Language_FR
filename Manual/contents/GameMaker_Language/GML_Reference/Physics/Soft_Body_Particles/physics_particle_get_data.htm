<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_particle_get_data</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page de référence pour physics_particle_get_data" />
  <meta name="rh-index-keywords" content="physics_particle_get_data,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
  <meta name="search-keywords" content="physics_particle_get_data,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>physics_particle_get_data</h1><p> Cette fonction renvoie diverses informations sur chaque particule dans la simulation physique en utilisant les indicateurs donnés cochés. Le tampon utilisé doit avoir été créé au préalable à l&#39;aide de la fonction <a href="../../Buffers/buffer_create.htm"><tt>buffer_create()</tt></a>, et doit être du type «grandir», la taille étant approximativement celle des données de retour attendues. Les indicateurs sont définis en utilisant l&#39;une des constantes ci-dessous, et vous utiliseriez le <a href="../../../../Additional_Information/Bitwise_Operators.htm">bit au niveau <i>du bit ou</i></a> &quot;|&quot; pour créer une valeur d&#39;indicateur unique pour obtenir les informations souhaitées.</p><p></p><table><tbody><tr><th> Constant</th><th> Description</th><th> Type de données</th></tr><tr><td> <span class="notranslate">phy_particle_data_flag_typeflags</span></td><td> La valeur des indicateurs pour la particule.</td><td> <span class="notranslate">buffer_u32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_position</span></td><td> Les positions x et y de la particule.</td><td> <span class="notranslate">2 x buffer_f32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_velocity</span></td><td> La vitesse horizontale et verticale.</td><td> <span class="notranslate">2 x buffer_f32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_colour</span></td><td> La couleur et la valeur alpha (hexadécimale).</td><td> <span class="notranslate">buffer_f32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_category</span></td><td> La catégorie de particules (telle que définie lorsque vous avez créé la particule ou le groupe auquel elle appartient).</td><td> <span class="notranslate">buffer_u32</span></td></tr></tbody></table><p></p><h4> Syntaxe:</h4><p class="code">physics_particle_get_data(buffer, flags)</p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">buffer</span></td><td> Le tampon (créé précédemment) à utiliser pour stocker les données.</td></tr><tr><td> <span class="notranslate">flags</span></td><td> Les indicateurs à utiliser pour extraire des données sur des types de particules spécifiques.</td></tr></tbody></table><p></p><h4> Retour:</h4><p class="code">Buffer data</p><p></p><h4> Exemple:</h4><p class="code">var count = physics_particle_count();<br/> var flags = phy_particle_data_flag_position | phy_particle_data_flag_colour;<br/> if (count &gt; 0)<br/>     {
    <br/>     var buffer = buffer_create(count * 12, buffer_grow, 4);<br/>     physics_particle_get_data(buffer, flags);<br/>     for (var n = 0; n &lt; count; n++;)<br/>         {
    <br/>         var xx = buffer_read(buffer, buffer_f32);<br/>         var yy = buffer_read(buffer, buffer_f32);<br/>         var argb = buffer_read(buffer, buffer_u32);<br/>         var alpha = (argb &gt;&gt; 24) &amp; 255;<br/>         draw_sprite_ext(sprBlob,
    0, xx, yy, 1, 1, 0, c_green, alpha);<br/>         }
    <br/>     buffer_delete(buffer);
    <br/>     }
  </p><p> Le code ci-dessus obtient le nombre de particules et crée une variable avec les indicateurs de données à vérifier, puis vérifie s&#39;il y a des particules dans la pièce. Si tel est le cas, un tampon est créé, puis rempli avec les données de particule, qui sont vérifiées et utilisées pour dessiner un sprite à la position de la particule. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="Soft_Body_Particles.htm">Particules corporelles molles</a></div><div style="float:right"> Suivant:<a href="physics_particle_get_data_particle.htm">physics_particle_get_data_particle</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
physics_particle_get_data
phy_particle_data_flag_typeflags
phy_particle_data_flag_position
phy_particle_data_flag_velocity
phy_particle_data_flag_colour
phy_particle_data_flag_category
-->
  <!-- TAGS
physics_particle_get_data
-->
</body>
</html>