<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>rectangle_en_cercle</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that gives an overview of the funtion rectangle_in_circle" />
  <meta name="rh-index-keywords" content="rectangle_in_circle" />
  <meta name="search-keywords" content="rectangle_in_circle" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>rectangle_en_cercle</h1>
  <p>Cette fonction va vérifier une zone rectangulaire que vous définissez pour voir si elle n'est pas en collision, si elle est complètement dans les limites de la destination, ou si elle touche simplement une zone circulaire définie. S'ils ne se touchent pas du tout, la fonction retournera
    0, si la source est complètement à l'intérieur de la destination, elle renvoie 1, et si elles se chevauchent simplement, elle renvoie 2. L'image ci-dessous illustre cela :</p>
  <p><img alt="Rectangle circle collision example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Movement_Collisions/rectangle_in_circle.png" /></p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">rectangle_in_circle(sx1, sy1, sx2, sy2, x, y, rad) ;</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>sx1</td>
        <td>La coordonnée x du côté gauche du rectangle source.</td>
      </tr>
      <tr>
        <td>sy1</td>
        <td>La coordonnée y du côté supérieur du rectangle source.</td>
      </tr>
      <tr>
        <td>sx2</td>
        <td>La coordonnée x du côté droit du rectangle source.</td>
      </tr>
      <tr>
        <td>sy2</td>
        <td>La coordonnée y du côté inférieur du rectangle source.</td>
      </tr>
      <tr>
        <td>x</td>
        <td>La coordonnée x du centre du cercle</td>
      </tr>
      <tr>
        <td>y</td>
        <td>La coordonnée y du centre du cercle.</td>
      </tr>
      <tr>
        <td>rad</td>
        <td>Le rayon autour du point central dans lequel il faut vérifier la présence d'une collision.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">inst = instance_nearest(x, y, obj_Bullet) ;<br> if instance_exists(inst)<br> {
    <br> if rectangle_in_circle(inst.x - 5, inst.y - 5, inst.x + 5, inst.y + 5, x, y - 25, 20) &gt; 0<br> {
    <br> hit = true ;<br> }
    <br> }
  </p>
  <p>Le code ci-dessus utilise la fonction <tt>rectangle_in_circle</tt> pour vérifier la présence d'une collision entre une zone circulaire et le rectangle entourant une instance trouvée. S'il y a une collision (soit un chevauchement des bords, soit un englobement), une variable sera définie comme <tt>vraie</tt>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Collisions.htm">Collisions</a></div>
        <div style="float:right">Suivant : <a href="place_empty.htm">place_empty</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
rectangle_in_circle
-->
  <!-- TAGS
rectangle_in_circle
-->
</body>
</html>