<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>liste de collision_ellipse</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that gives an overview of the funtion collision_ellipse_list" />
  <meta name="rh-index-keywords" content="collision_ellipse_list" />
  <meta name="search-keywords" content="collision_ellipse_list" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>liste de collision_ellipse</h1>
  <p>Cette fonction est identique à la fonction <a href="collision_ellipse.htm"><tt>collision_ellipse()</tt></a> mais au lieu de détecter une seule instance en collision à la fois, elle en détectera plusieurs. Vous fournissez les positions x/y de la partie supérieure
    Vous fournissez les positions x/y du haut, de la gauche et du bas, de la droite de la zone elliptique à vérifier, ainsi que l'objet à vérifier, et vous pouvez définir que la vérification doit être précise (dans ce cas, toutes les instances vérifiées devront avoir des masques de collision <i>précis</i> ) et si la vérification doit inclure l'instance appelante ou non.
    inclure l'instance appelante ou non.</p>
  <p>Vous fournissez également une <a href="../../Data_Structures/DS_Lists/DS_Lists.htm">liste de DS</a>, de sorte que les <a href="../../Asset_Management/Instances/Instance_Variables/id.htm"><tt>id</tt></a> valeurs de toutes les instances qui entrent en collision avec l'instance appelante seront
    seront ajoutées à la fin de la liste donnée. Vous pouvez <a href="../../Data_Structures/DS_Lists/ds_list_clear.htm">effacer la</a> liste avant d'appeler cette fonction afin qu'elle ne contienne que les résultats de cet appel de fonction. Vous avez également la possibilité d'ordonner les
    instances en fonction de leurs distances entre l'origine de la zone elliptique et leurs origines. La fonction renvoie le nombre d'instances trouvées, ou 0 si aucune n'est trouvée.</p>
  <p>Notez qu'au lieu d'un index d'objet, vous pouvez fournir le <a href="../../../GML_Overview/Instance_Keywords.htm">mot-clé d'instance</a> <span class="inline">all</span>, pour vérifier toutes les instances de la salle actuelle, qui peut inclure l'instance qui exécute le code (selon l'argument
    le code (en fonction de l'argument <span class="inline">notme</span> ).</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">collision_ellipse_list(x1, y1, x2, y2, obj, prec, notme, list, ordered) ;</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>x1</td>
        <td>La coordonnée x du côté gauche de l'ellipse à vérifier.</td>
      </tr>
      <tr>
        <td>y1</td>
        <td>La coordonnée y du côté supérieur de l'ellipse à vérifier.</td>
      </tr>
      <tr>
        <td>x2</td>
        <td>La coordonnée x du côté droit de l'ellipse à vérifier.</td>
      </tr>
      <tr>
        <td>y2</td>
        <td>La coordonnée y du côté inférieur de l'ellipse à vérifier.</td>
      </tr>
      <tr>
        <td>obj.</td>
        <td>L'objet à vérifier pour les collisions d'instance.</td>
      </tr>
      <tr>
        <td>préc</td>
        <td>Si la vérification est basée sur des collisions précises<tt>(vrai</tt>, ce qui est plus lent) ou sur sa boîte de délimitation en général<tt>(faux</tt>, plus rapide).</td>
      </tr>
      <tr>
        <td>notme</td>
        <td>Si l'instance appelante, si elle est pertinente, doit être exclue<tt>(true</tt>) ou non<tt>(false)</tt>.</td>
      </tr>
      <tr>
        <td>liste</td>
        <td>La liste DS à utiliser pour stocker les ID des instances en collision.</td>
      </tr>
      <tr>
        <td>commandé</td>
        <td>Si la liste doit être ordonnée par distance<tt>(true</tt>) ou non<tt>(false)</tt>.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Int (Le nombre d'instances trouvées en collision)</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var _list = ds_list_create() ;<br> var _num = collision_ellipse_list(x - 100, y - 100, x + 100, y + 100, obj_Enemy, false, true, _list, false) ;<br> if _num &gt; 0<br> {
    <br> for (var i = 0 ; i &lt; _num ; ++i ;)<br> {
    <br> instance_destroy(_list[| i]) ;<br> }
    <br> }
    <br> ds_list_destroy(_list) ;
  </p>
  <p>Le code ci-dessus vérifie une zone elliptique de 100 pixels autour de la position de l'instance appelante pour détecter les collisions avec les instances de &quot;obj_Enemy&quot;. S'il y a des collisions, alors la liste pré-créée est parcourue en boucle et chaque instance qui a été
    dans la collision est détruite.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Collisions.htm">Collisions</a></div>
        <div style="float:right">Suivant : <a href="collision_line.htm">collision_line</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
collision_ellipse_list
-->
  <!-- TAGS
collision_ellipse_list
-->
</body>
</html>