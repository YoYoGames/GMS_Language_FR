<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>mp_potential_step</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="This page outlines the function mp_potential_step" />
  <meta name="rh-index-keywords" content="mp_potential_step" />
  <meta name="search-keywords" content="mp_potential_step" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>mp_potential_step</h1>
  <p>Cette fonction permet à l'instance de faire un pas vers une position particulière définie par xgoal/ygoal, tout en essayant d'éviter les obstacles. Lorsque l'instance rencontre une instance solide (ou n'importe quelle instance lorsque checkall est vrai), elle change la direction du mouvement pour essayer d'éviter cette instance et de la contourner.
    de mouvement pour essayer d'éviter cette instance et de la contourner. Il n'est pas garanti que cette approche fonctionne, mais dans la plupart des cas faciles, elle déplacera effectivement l'instance vers le but. La fonction retourne si le but a été atteint ou non.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">mp_potential_step(xgoal, ygoal, stepsize, checkall)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>xgoal</td>
        <td>La position x de la cible.</td>
      </tr>
      <tr>
        <td>ygoal</td>
        <td>La position y de la cible.</td>
      </tr>
      <tr>
        <td>taille d'étape</td>
        <td>La vitesse de déplacement de l'instance en pixels par pas.</td>
      </tr>
      <tr>
        <td>vérifier tout</td>
        <td>Si l'on veut vérifier toutes les instances (true) ou seulement celles qui sont solides (false).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Booléen</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">if instance_exists(obj_Enemy)<br> {
    <br> var inst ;<br> inst = instance_nearest(x, y, obj_Enemy) ;<br> mp_potential_step(inst.x, inst.y, 5, false) ;<br> }
  </p>
  <p>Le code ci-dessus vérifie d'abord s'il y a des instances de &quot;obj_Enemy&quot; dans la pièce. S'il y en a, il trouve l'instance la plus proche et enregistre son identifiant dans une variable. Cette variable est ensuite utilisée pour dire à <tt>mp_potential_step</tt> de déplacer l'instance avec le code vers les axes x/y.
    avec le code vers la position x/y de l'objet qui a été trouvé à une vitesse de 5 pixels par pas tout en évitant seulement les instances marquées comme solides.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Motion_Planning.htm">Planification des mouvements</a></div>
        <div style="float:right">Suivant : <a href="mp_potential_step_object.htm">mp_potential_step_object</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
mp_potential_step
-->
  <!-- TAGS
mp_potential_step
-->
</body>
</html>