<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>caméra_créer</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for camera_create" />
  <meta name="rh-index-keywords" content="camera_create" />
  <meta name="search-keywords" content="camera_create" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>caméra_créer</h1>
  <p>Cette fonction va créer une caméra &quot;vide&quot;, c'est-à-dire une caméra sans paramètres de vue ou de projection définis. Une fois la caméra créée, vous pouvez utiliser les différentes <a href="../../Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm">fonctions de matrice</a> pour définir les matrices de vue et de projection. Vous pouvez également utiliser cette fonction pour créer la caméra, puis utiliser les différentes fonctions <tt>camera_set_*</tt> pour définir la vue, mais notez que vous <i>devez</i> fournir au moins une position et une taille de vue,
    sinon la caméra résultante ne sera pas valide et donnera des résultats bizarres si elle est appliquée à un port de vue (si vous ne définissez pas le suivi de l'objet, les frontières ou la vitesse de déplacement, ceux-ci seront définis sur les valeurs par défaut pour une caméra de vue dans l'éditeur de salle).</p>
  <p>Notez que les caméras sont comme toutes les ressources dynamiques et occupent de la mémoire lors de leur création. Cela signifie que vous devez faire attention à ne pas créer inutilement des caméras et à détruire celles dont vous n'avez pas besoin en appelant la fonction <a href="camera_destroy.htm"><tt>camera_destroy()</tt></a>.
    Cela signifie également que les caméras persistent d'une pièce à l'autre si elles sont affectées à une variable <tt>globale</tt> (elles persistent également lorsqu'elles sont affectées à des variables d'instance ou locales, mais vous ne pouvez pas y accéder après avoir changé de pièce, d'où la fuite de mémoire), de sorte que
    Ainsi, vous pouvez, par exemple, créer une nouvelle caméra, l'affecter à une variable globale, puis, au début de chaque pièce, définir les matrices de vue et de projection requises et le port de vue à utiliser.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">camera_create() ;</p>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code">Real (valeur d'identification unique de la caméra)</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">view_camera[0] = camera_create() ;<br> var viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0) ;<br> var projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0) ;<br> camera_set_view_mat(view_camera[0], viewmat) ;<br> camera_set_proj_mat(view_camera[0],
    projmat) ;</p>
  <p>Le code ci-dessus crée une nouvelle caméra et attribue son ID à view[0]. Les matrices de vue et de projection sont ensuite créées et stockées dans des variables locales avant d'être utilisées pour définir la caméra.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Cameras_And_View_Ports.htm">Caméras et ports d'observation</a></div>
        <div style="float:right">Suivant : <a href="camera_create_view.htm">camera_create_view</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
camera_create
-->
  <!-- TAGS
camera_create
-->
</body>
</html>