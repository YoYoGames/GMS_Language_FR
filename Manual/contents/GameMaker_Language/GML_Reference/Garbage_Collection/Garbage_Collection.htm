<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Collecte des ordures</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for the Garbage Collection functions" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Garbage Collection" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Collecte des ordures</h1>
  <p>Le <strong>Garbage Collector de</strong> <span class="notranslate">GameMaker Studio 2</span> existe parce que les méthodes peuvent être passées sur la pile et laissées sans référence, tout comme les structs et quelques autres éléments, ce qui provoquerait une fuite de mémoire s'ils n'étaient pas &quot;nettoyés&quot; d'une manière ou d'une autre.
    d'une manière ou d'une autre. C'est là qu'intervient le ramasseur d'ordures, qui fonctionne en arrière-plan du jeu pour collecter tout ce qui a été déréférencé et maintenir une utilisation optimale de la mémoire. Lorsque nous parlons de quelque chose qui est déréférencé, nous
    généralement à toute structure ou fonction qui n'est pas connectée (pas nécessairement directement, mais par une chaîne d'autres variables) à une <strong>variable </strong>globale ou à une <strong>variable d'instance d'</strong>objet <strong>.</strong> Notez également que
    les fonctions définies dans les scripts de l'IDE ne sont pas non plus collectées, car elles sont implicitement rendues globales.</p>
  <p class="note"><b>REMARQUE</b>: Veuillez noter que les éléments tels que les surfaces, les structures de données, les tampons et autres ressources dynamiques <b>ne</b> sont <b>pas</b> soumis au ramassage des déchets et disposent de leurs propres fonctions de <tt>destruction</tt> pour nettoyer la mémoire qui leur est associée. En règle générale
    si un élément créé au moment de l'exécution possède une fonction de <tt>destruction</tt>, il ne sera pas soumis au ramassage des déchets et vous devrez vous en occuper vous-même dans le code. Les exceptions à cette règle sont les séquences, les courbes d'animation et les instances, qui ont également besoin du ramasse-miettes.
    le ramasse-miettes, <b>mais dont la fonction de destruction doit être appelée</b>.</p>
  <p>Le ramassage des déchets utilisé par <span class="notranslate">GameMaker Studio 2</span> est &quot;générationnel&quot;. Cela signifie que, afin de réduire le travail à effectuer à chaque image, les objets sont divisés en &quot;générations&quot;. Les nouveaux objets sont créés dans la génération 0 et
    ils sont déplacés vers des générations plus anciennes au fur et à mesure qu'ils vieillissent. L'idée générale est que les objets qui traînent pendant un certain temps n'ont pas besoin d'être testés en permanence pour savoir s'ils doivent être supprimés, mais qu'ils peuvent être vérifiés moins fréquemment (notez que le terme &quot;objets&quot;
    fait référence ici à tout ce qui peut être ramassé et <i>non</i> aux instances générales d'objets telles que définies dans le navigateur d'actifs). Notez que, bien que le système de vérification soit générationnel, les vérifications sont effectuées de manière &quot;incrémentielle&quot;, de telle sorte qu'au lieu d'effacer des milliers d'objets, il est possible de les supprimer.
    qu'au lieu d'éliminer des milliers d'objets d'une génération en une seule image - ce qui entraîne un pic d'utilisation du CPU et peut affecter le gameplay - chaque génération sera vérifiée et, si nécessaire, le nettoyage sera réparti sur plusieurs images afin que le ramasseur d'ordures puisse être utilisé de façon optimale.
    sur plusieurs images, de sorte que le ramasseur d'ordures s'exécute plus fréquemment mais effectue moins de travail à chaque image qu'il collecte (vous pouvez définir le temps cible que le ramasseur d'ordures doit passer sur chaque image en utilisant la fonction <span class="inline"><a href="gc_target_frame_time.htm">gc_target_frame_time()</a></span>).</p>
  <p>En général, vous ne devriez jamais avoir besoin d'interagir avec le système de ramassage des déchets de <span class="notranslate">GameMaker Studio 2</span> et, normalement, les résultats de ses opérations ne sont pas visibles, mais certaines commandes <span class="notranslate">GML</span> sont disponibles pour obtenir des informations sur ce que fait le ramasseur et pour influencer son comportement de façon limitée.
    d'influencer son comportement dans une certaine mesure.</p>
  <p class="note"><b>IMPORTANT !</b> Notez que sur la plateforme cible HTML5, la collecte des déchets est gérée par le moteur JavaScript et, par conséquent, aucune des fonctions énumérées ci-dessous n'affectera son fonctionnement et la fonction <tt>gc_get_stats()</tt> renverra 0 pour tous les champs
    champs.</p>
  <p> </p>
  <ul class="colour">
    <li><a href="gc_enable.htm">gc_enable</a></li>
    <li><a href="gc_is_enabled.htm">gc_is_enabled</a></li>
    <li><a href="gc_collect.htm">gc_collect</a></li>
    <li><a href="gc_target_frame_time.htm">gc_target_frame_time</a></li>
    <li><a href="gc_get_target_frame_time.htm"><span>gc_get_target_frame_time</span></a></li>
    <li><a href="gc_get_stats.htm">gc_get_stats</a></li>
  </ul>
  <p> </p>
  <p>Pour aider à décider ce qui doit être ramassé et quand, vous disposez également de quelques fonctions qui peuvent être utilisées pour créer et vérifier les <strong>références faibles</strong> aux structures. Une référence faible est une référence qui ne protège pas l'objet référencé de la collecte par un ramasseur de déchets.
    par un ramasseur de déchets, et peut donc être utilisée pour vérifier si une structure est toujours &quot;vivante&quot; (référencée) ou non quelque part dans le jeu. Les fonctions disponibles pour la référence faible sont :</p>
  <p> </p>
  <ul class="colour">
    <li><a href="weak_ref_create.htm">weak_ref_create</a></li>
    <li><a href="weak_ref_alive.htm">weak_ref_alive</a></li>
    <li><a href="weak_ref_any_alive.htm">weak_ref_any_alive</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../GML_Reference.htm">Référence<span class="notranslate">GML</span></a></div>
        <div style="float:right">Suivant : <a href="../Variable_Functions/Variable_Functions.htm">Fonctions variables</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
<span class="notranslate">GML</span> Reference
-->
  <!-- TAGS
gml_reference
-->
</body>
</html>