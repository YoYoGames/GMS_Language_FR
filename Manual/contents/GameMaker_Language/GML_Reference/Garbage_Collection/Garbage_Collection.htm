<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Collecte des ordures</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Section de référence pour les fonctions de récupération de place" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Collecte des ordures" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> Collecte des ordures</h1><p> Le <strong>Garbage Collector</strong> <span class="notranslate">GameMaker Studio 2</span> existe parce que les méthodes peuvent être passées sur la pile et laissées sans référence, tout comme les structures et quelques autres choses, qui à leur tour provoqueraient une fuite de mémoire si elles n&#39;étaient pas &quot;nettoyées&quot; d&#39;une manière ou d&#39;une autre. C&#39;est là que le ramasse-miettes entre en jeu et il fonctionnera en arrière-plan du jeu, collectant tout ce qui a été dé-référencé et maintenant une utilisation optimale de la mémoire. Lorsque nous parlons de quelque chose qui est dé-référencé, nous faisons généralement référence à toute structure ou fonction qui n&#39;est pas connectée (cela ne doit pas nécessairement être directement, mais via une chaîne d&#39;autres variables) à une <strong>variable globale</strong> ou une <strong>variable d&#39;instance d&#39;objet</strong>. Notez également que les fonctions définies dans les scripts de l&#39;EDI ne sont pas non plus collectées, car elles sont implicitement rendues globales.</p><p class="note"> <b>REMARQUE</b>: veuillez noter que des éléments tels que les surfaces, les structures de données, les tampons et autres ressources dynamiques <b>ne</b> sont pas récupérés et ont leurs propres <tt>destroy</tt> fonctions pour nettoyer la mémoire qui leur est associée. En règle générale, si quelque chose que vous créez au moment de l&#39;exécution a un <tt>destroy</tt> fonction, il ne sera pas ramassé et vous devrez le gérer vous-même dans le code. Les exceptions à cela sont les séquences, les courbes d&#39;animation et les instances, qui nécessitent également le ramasse-miettes, <b>mais doivent quand même avoir leur fonction de destruction appelée</b>.</p><p> Le ramasse-miettes <span class="notranslate">GameMaker Studio 2</span> est &quot;générationnel&quot;. Cela signifie que, afin de réduire le travail qui doit être fait à chaque image, les objets sont divisés en «générations». De nouveaux objets sont créés à la génération 0 et sont déplacés vers les générations plus anciennes au fur et à mesure qu&#39;ils vieillissent. L&#39;idée générale est que les objets qui traînent pendant un certain temps n&#39;ont pas besoin d&#39;être testés en permanence pour voir s&#39;ils doivent être supprimés, mais peuvent être vérifiés moins fréquemment (notez que «objets» ici fait référence à tout ce qui peut être ramassé et <i>pas</i> des instances d&#39;objet générales telles que définies dans le navigateur d&#39;actifs). Notez que bien que le système de vérification soit générationnel, les vérifications réelles sont effectuées de manière &quot;incrémentielle&quot;, de sorte qu&#39;au lieu d&#39;effacer potentiellement des milliers d&#39;objets d&#39;une génération dans une seule trame - provoquant une forte augmentation de l&#39;utilisation du processeur et affectant potentiellement le gameplay - chaque génération sera vérifiée et si nécessaire, le nettoyage sera réparti sur plusieurs images afin que le ramasse-miettes s&#39;exécute plus fréquemment mais travaille moins sur chaque image qu&#39;il collecte (vous pouvez définir le temps cible que le ramasse-miettes doit consacrer à chaque image en utilisant la fonction <span class="inline"><a href="gc_target_frame_time.htm">gc_target_frame_time()</a></span> ).</p><p> En général, vous ne devriez jamais avoir besoin d&#39;interagir avec le <span class="notranslate">GameMaker Studio 2</span> et normalement les résultats de son opération ne sont pas visibles, mais certaines <span class="notranslate">GML</span> sont disponibles pour obtenir des informations sur ce que fait le collecteur et pour influencer son comportement à un degré limité..</p><p class="note"> <b>IMPORTANT!</b> Notez que sur la plate-forme cible HTML5, le garbage collection est géré par le moteur JavaScript et par conséquent aucune des fonctions répertoriées ci-dessous n&#39;affectera son fonctionnement et la fonction <tt>gc_get_stats()</tt> renvoie 0 pour tous les champs. </p><p></p><ul class="colour"><li><a href="gc_enable.htm">gc_enable</a></li><li><a href="gc_is_enabled.htm">gc_is_enabled</a></li><li><a href="gc_collect.htm">gc_collect</a></li><li> <a href="gc_target_frame_time.htm">gc_target_frame_time</a></li><li> <a href="gc_get_target_frame_time.htm"><span>gc_get_target_frame_time</span></a></li><li><a href="gc_get_stats.htm">gc_get_stats</a></li></ul><p></p><p> Pour vous aider à décider de ce qui doit être récupéré et quand vous avez également quelques fonctions qui peuvent être utilisées pour créer et vérifier <strong>des références faibles</strong> aux structures. Une référence faible est une référence qui ne protège pas l&#39;objet référencé de la collecte par un garbage collector, et peut donc être utilisée pour vérifier si une structure est toujours &quot;vivante&quot; (référencée) ou pas quelque part dans le jeu. Les fonctions disponibles pour un référencement faible sont: </p><p></p><ul class="colour"><li><a href="weak_ref_create.htm">weak_ref_create</a></li><li><a href="weak_ref_alive.htm">weak_ref_alive</a></li><li><a href="weak_ref_any_alive.htm">weak_ref_any_alive</a></li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="../GML_Reference.htm">Référence <span class="notranslate">GML</span></a></div><div style="float:right"> Suivant: <a href="../Variable_Functions/Variable_Functions.htm">Fonctions variables</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
GML Reference
-->
  <!-- TAGS
gml_reference
-->
</body>
</html>