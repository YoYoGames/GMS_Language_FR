<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>debug_event</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page de référence pour debug_event" />
  <meta name="rh-index-keywords" content="debug_event" />
  <meta name="search-keywords" content="debug_event" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>debug_event</h1><p> Cette fonction génère un événement de débogage personnalisé qui sera affiché dans la vue graphique du débogueur lorsqu&#39;un jeu est exécuté en <a href="../../../Introduction/Debugging.htm">mode débogage</a>. Si vous souhaitez que les messages s&#39;affichent lorsque vous n&#39;êtes <i>pas</i> en mode débogage, vous devez utiliser <a href="show_debug_message.htm"><tt>show_debug_message()</tt></a>. Il est à noter que la fonction prendra également deux chaînes réservées pour aider à effectuer le débogage à l&#39;aide d&#39;applications externes telles que <span class="notranslate">Visual Studio</span>. Ces chaînes sont:</p><ul class="colour"><li> &quot;<tt>OutputDebugOn</tt> &quot;- Cela permet un appel à <tt>OutputDebugString</tt> pour la <b><span class="notranslate">Windows</span></b>, ce qui signifie que toute la sortie de débogage - tout ce que vous voyez dans la fenêtre Sortie - peut être affichée par <span class="notranslate">Visual Studio</span> ou par des applications tierces.</li><li> &quot;<tt>BreakOnError</tt> &quot;- Cette option concerne <b>uniquement les <span class="notranslate">Windows</span></b> YYC et signifie que les projets <i>n’afficheront pas</i> l’écran d’erreur de code habituel si le <span class="notranslate">runtime</span> détecte une erreur, mais qu’ils continuent et se bloquent. Cela vous permet de voir le stacktrace dans <span class="notranslate">Visual Studio</span> cas de débogage.</li></ul><p></p><h4> Syntaxe:</h4><p class="code">debug_event(string)</p><table><tbody><tr><th> Argument</th><th> Description</th></tr><tr><td> <span class="notranslate">string</span></td><td> La chaîne d&#39;événement de débogage personnalisée à utiliser.</td></tr></tbody></table><p></p><h4> Retour:</h4><p class="code">N/A</p><p></p><h4> <b>Exemple:</b></h4><p class="code">if !surface_exists(global.EffectsSurface)<br/>    {
    <br/>    debug_event(&quot;Recreating Effects Surface&quot;);<br/>    global.EffectsSurface = surface_create(room_width, room_height);<br/>    }</p><p> Le code ci-dessus vérifie si une surface existe et si ce n&#39;est pas le cas, un événement de débogage est déclenché dans la vue graphique du débogueur (le jeu doit avoir été exécuté en mode débogage pour que cela soit visible) et la surface est recréée. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="Debugging.htm">Débogage</a></div><div style="float:right"> Suivant:<a href="debug_get_callstack.htm">debug_get_callstack</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
debug_event
-->
  <!-- TAGS
debug_event
-->
</body>
</html>