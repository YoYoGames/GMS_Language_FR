<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page détaillant le fonctionnement de l&#39;éditeur de shader" />
  <meta name="rh-index-keywords" content="Éditeur de Shader" />
  <meta name="search-keywords" content="shaders,shader,ouvrir GL,ouvrir GL ES" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> L&#39;éditeur de <span class="notranslate">Shader</span></h1><p><img alt="Shader Editor" class="center" src="../assets/Images/Asset_Editors/Editor_Shaders.png" /> <span class="notranslate">Shaders</span> sont un outil très puissant qui peut être utilisé pour manipuler les graphiques que votre jeu rend à l&#39;écran, permettant des effets incroyablement rapides qui peuvent aller, par exemple, de l&#39;ajout d&#39;une teinte de couleur subtile à un sprite, jusqu&#39;aux effets de distorsion en plein écran.. Mais qu&#39;est-ce qu&#39;un <span class="notranslate">shader</span> ?</p><p> Un <span class="notranslate">shader</span> est essentiellement un programme en deux parties qui s&#39;exécute directement sur la carte graphique elle-même, ce qui le rend très rapide car le GPU fait tout le travail et libère des cycles de processeur pour votre code de jeu. Le <span class="notranslate">shader</span> complet est composé d&#39;un <span class="notranslate">shader</span> et d&#39;un <span class="notranslate">shader</span> (également connu sous le nom de pixel <span class="notranslate">shader</span> ). Ces deux petits programmes fonctionnent ensemble afin de manipuler ce que la carte graphique rend à l&#39;écran. Cela vous permet ensuite de manipuler en temps réel, la position, la couleur et les valeurs alpha qui sont réellement <a class="glossterm" data-glossterm="rendu" href="#">rendues</a> sur le <a class="glossterm" data-glossterm="tampon d&#39;affichage" href="#">tampon d&#39;affichage</a>.</p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Vertex <span class="notranslate">Shader</span></a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"> Le Vertex <span class="notranslate">Shader</span> est l&#39; <span class="notranslate">shader</span> programmable dans le pipeline de rendu qui gère le traitement des sommets individuels (les points des triangles utilisés pour rendre n&#39;importe quelle image), et lorsque vous effectuez le rendu d&#39;une géométrie - comme un sprite ou une surface - <span class="notranslate">GameMaker Studio 2</span> crée un flux de sommets - appelé <strong>Vertex Buffer</strong> - qui définit la géométrie de ces triangles. Un sprite par exemple aurait une géométrie de deux triangles (normalement appelés <em>polygones</em> ) rendus ensemble pour former un &quot;quad&quot;. Ce flux de sommets du Vertex Buffer est alimenté en entrée du Vertex <span class="notranslate">Shader</span>, qui peut traiter les données des sommets de manière programmable. La <span class="notranslate">Shader</span> est utilisée par le GPU pour assembler des triangles, qui sont ensuite correctement coupés et sélectionnés vers le port de vue et la caméra de vue, puis envoyés au bloc rasterizer du GPU qui génère un nouveau flux de sortie, constitué par quelque chose appelé <strong>Fragments</strong>. Ce sont de minuscules structures de données, dont chacune est relative à un seul pixel qui apparaît à l&#39;écran.</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Fragment <span class="notranslate">Shader</span></a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot"> Le Fragment <span class="notranslate">Shader</span> est l&#39; <span class="notranslate">shader</span> programmable dans le pipeline de rendu qui traite des «fragments» - les pixels interpolés utilisés pour texturer un polygone donné - et ils sont responsables de la sortie de la couleur de pixel finale de chaque pixel de triangle rendu. Fondamentalement, cela fonctionne comme ceci: le Fragment <span class="notranslate">Shader</span> reçoit en entrée tous les fragments (les pixels individuels du triangle en cours de rendu) qui ont été passés le long du pipeline par le Vertex <span class="notranslate">Shader</span>. Il peut ensuite traiter ces fragments pour changer la couleur et l&#39;alpha du pixel de destination final qui sera dessiné à l&#39;écran.</p></div><p></p><p> Un aperçu complet du fonctionnement <span class="notranslate">shaders</span> et de la place qu&#39;ils occupent dans le pipeline graphique n&#39;entre pas dans le cadre de cela, mais vous pouvez trouver un guide bried ici:</p><p></p><ul class="colour"><li> <a href="../Additional_Information/Guide_To_Using_Shaders.htm">Guide d&#39;utilisation des <span class="notranslate">Shaders</span></a></li></ul><p></p><p> Et il y a un certain nombre d&#39;articles sur le <span class="notranslate">YoYo Games</span> Tech qui entrent beaucoup plus en détail, auxquels vous pouvez accéder à partir des liens suivants:</p><p></p><ul class="colour"><li> <a href="https://www.yoyogames.com/blog/14/shaders-overview-part-1"><span class="notranslate">Shaders</span> Partie 1</a></li><li> <a href="https://www.yoyogames.com/blog/16/shaders-overview-part-2"><span class="notranslate">Shaders</span> Partie 2</a></li><li> <a href="https://www.yoyogames.com/blog/17/shaders-overview-part-3"><span class="notranslate">Shaders</span> Partie 3</a></li><li> <a href="https://www.yoyogames.com/blog/18/shaders-overview-part-4"><span class="notranslate">Shaders</span> Partie 4</a></li></ul><p></p><p> <span class="notranslate">GameMaker Studio 2</span> prend en charge les langages de <span class="notranslate">shader</span></p><p></p><table><tbody><tr><th> Langage <span class="notranslate">Shader</span></th><th> Plateforme cible</th></tr><tr><td> <strong>GLSL ES</strong></td><td> Toutes les plateformes cibles</td></tr><tr><td> <strong>GLSL</strong></td><td> Mac et <span class="notranslate">Ubuntu</span> ( <span class="notranslate">Linux</span> )</td></tr><tr><td> <strong>HLSL 11</strong></td><td> <span class="notranslate">Windows</span>, UWP, XboxOne</td></tr><tr><td> <strong>PSSL</strong></td><td> <span class="notranslate">Playstation 4</span></td></tr></tbody></table><p></p><p> Pour créer une <span class="notranslate">shader</span>, cliquez simplement avec le bouton droit de la souris<img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png" /> dans le <a href="../Introduction/The_Asset_Browser.htm">navigateur de ressources</a> et sélectionnez <em>Créer un <span class="notranslate">Shader</span></em>. Une fois que vous avez créé le <span class="notranslate">shader</span> base, vous pouvez ensuite utiliser le bouton droit de la souris<img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png" /> menu sur la nouvelle ressource pour sélectionner le <span class="notranslate">shader</span> avant de continuer à éditer le code:</p><p><img alt="Shader Editor RMB Menu" class="center" src="../assets/Images/Asset_Editors/Editor_Shader_RMBMenu.png" /> L&#39;éditeur de code lui-même est divisé en deux «programmes» - Vertex et Fragment - lorsque vous créez un nouveau <span class="notranslate">shader</span>, chacun étant disponible à partir des onglets en haut de l&#39;éditeur. Les deux sont créés en même temps car vous <em>ne pouvez pas créer un <span class="notranslate">shader</span> sans les deux parties</em>. Même si vous ne souhaitez utiliser que le fragment <span class="notranslate">shader</span> vous devrez d&#39;abord créer un vertex <span class="notranslate">shader</span> &quot;pass through&quot;, c&#39;est pourquoi, par défaut, tout nouveau <span class="notranslate">shader</span> cours de création aura un vertex et un fragment pass through <span class="notranslate">shader</span> déjà codés pour vous (dans la capture d&#39;écran en haut de la page, vous pouvez voir que nous avons utilisé la vue du volet de l&#39;éditeur de code pour montrer les deux côte à côte... utile lorsque vous travaillez sur les deux <span class="notranslate">shader</span> ensemble).</p><p> Il est à noter que vous pouvez utiliser les <span class="notranslate">shaders</span> GLSL ES sur <em>toutes</em> les plates-formes cibles, mais pour qu&#39;ils fonctionnent sur la <strong>plate-forme cible HTML5,</strong> vous devez avoir activé WebGL dans les <a href="../Settings/Game_Options/HTML5.htm">options de jeu HTML5,</a> sinon ils ne fonctionneront pas.</p><p> Pour plus de détails sur <span class="notranslate">shader</span> fonctions de shader et comment elles peuvent être utilisées dans <span class="notranslate">GameMaker Studio 2</span> veuillez consulter les pages suivantes:</p><ul class="colour"><li> <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">Fonctions <span class="notranslate">Shader</span></a> - La section de référence <span class="notranslate">GML</span> <span class="notranslate">shaders</span>.</li><li> <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm"><span class="notranslate">Shader</span> Constantes</a> - Les constantes intégrées à <span class="notranslate">GameMaker Studio 2</span> qui peut être utilisé lors de l&#39; écriture des <span class="notranslate">shaders</span>.</li><li> <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf">Spécifications GLSL ES</a> - Fichier PDF des <span class="notranslate">Shader</span> Language <span class="notranslate">GameMaker Studio 2</span>.</li><li> <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">Référence du langage HLSL</a> - Les pages de référence Microsoft pour l&#39;utilisation de HLSL.</li><li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">Présentation du langage PSSL</a> - Présentation du langage PSSL au format présentation. </li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="The_Asset_Editors.htm">Les éditeurs d&#39;actifs</a></div><div style="float:right"> Suivant: <a href="Sounds.htm">Sons</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
The Shader Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->
</body>
</html>