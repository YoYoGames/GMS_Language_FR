<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>L'éditeur de <span class="notranslate">shaders</span> </h1>
  <p><img alt="Shader Editor" class="center" src="../assets/Images/Asset_Editors/Editor_Shaders.png">Les<span class="notranslate">shaders</span> sont un outil très puissant qui peut être utilisé pour manipuler les graphiques rendus à l'écran par votre jeu.
    qui peuvent aller, par exemple, de l'ajout d'une subtile nuance de couleur à un sprite jusqu'à des effets de distorsion en plein écran. Mais qu'est-ce qu'un <span class="notranslate">shader</span>?</p>
  <p>Un <span class="notranslate">shader</span> est essentiellement un programme en deux parties qui s'exécute directement sur la carte graphique elle-même, ce qui le rend très rapide puisque le GPU fait tout le travail et libère des cycles CPU pour votre code de jeu. Le <span class="notranslate">shader</span> complet est composé d'un programme de vertex <span class="notranslate">shader</span> et d'un programme de fragment shader (également appelé "fragment shader").
    un programme de fragment <span class="notranslate">shader</span> (également connu sous le nom de pixel <span class="notranslate">shader</span>). Ces deux petits programmes travaillent ensemble afin de manipuler ce que la carte graphique rend à l'écran. Cela vous permet ensuite de manipuler en temps réel la position, la couleur et les valeurs alpha
    qui sont effectivement <a class="glossterm" data-glossterm="rendu" href="#">rendues</a> sur le <a class="glossterm" data-glossterm="tampon d'affichage" href="#">tampon d'affichage</a>.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Vertex <span class="notranslate">Shader</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Le Vertex <span class="notranslate">Shader</span> est l'étape programmable du pipeline de rendu qui gère le traitement des sommets individuels (les points des triangles utilisés pour rendre une image). Lorsque vous rendez une géométrie, comme un sprite ou une surface, GameMaker Studio 2 crée un flux de sommets (appelé Vertex Buffer) qui définit la géométrie de ces triangles.
      - <span class="notranslate">GameMaker Studio 2</span> crée un flux de sommets - appelé <strong>Vertex Buffer </strong>- qui définit la géométrie de ces triangles. Un sprite, par exemple, aura une géométrie de deux triangles (normalement appelés <em>polygones</em>) rendus ensemble pour former un "quad".
      pour former un &quot;quad&quot;. Ce flux de sommets provenant de la mémoire tampon est utilisé comme entrée pour le Vertex <span class="notranslate">Shader</span>, qui peut traiter les données de sommets de manière programmable. La sortie du Vertex <span class="notranslate">Shader</span> est utilisée par le GPU pour assembler des triangles,
      qui sont ensuite correctement découpés et découpés pour le port de vue et la caméra de vue, puis envoyés au bloc rasterizer du GPU qui génère un nouveau flux de sortie, constitué de ce qu'on appelle des <strong>fragments</strong>. Ce sont de minuscules données
      structures de données, chacune d'entre elles étant relative à un seul pixel apparaissant à l'écran.</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Fragment <span class="notranslate">Shader</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Le Fragment <span class="notranslate">Shader</span> est l'étape programmable du pipeline de rendu qui traite les &quot;fragments&quot; - les pixels interpolés utilisés pour texturer un polygone donné - et il est responsable de la sortie de la couleur finale de chaque pixel du triangle rendu.
      pixel du triangle rendu. Le Fragment <span class="notranslate">Shader</span> reçoit en entrée tous les fragments (les pixels individuels du triangle en cours de rendu) qui ont été transmis dans le pipeline par le Vertex <span class="notranslate">Shader</span>. Il peut alors
      traiter ces fragments pour modifier la couleur et l'alpha du pixel de destination final qui sera dessiné à l'écran.</p>
  </div>
  <p> </p>
  <p>Un aperçu complet du fonctionnement des <span class="notranslate">shaders</span> et de la place qu'ils occupent dans le pipeline graphique n'entre pas dans le cadre de cet article, mais vous pouvez trouver un guide succinct ici :</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">Guide d'utilisation des <span class="notranslate">shaders</span></a></li>
  </ul>
  <p> </p>
  <p>Il existe un certain nombre d'articles sur le blog <span class="notranslate">YoYo Games</span> Tech qui donnent beaucoup plus de détails, que vous pouvez consulter à partir des liens suivants :</p>
  <p> </p>
  <ul class="colour">
    <li><a href="https://www.yoyogames.com/blog/14/shaders-overview-part-1"><span class="notranslate">Shaders</span> Partie 1</a></li>
    <li><a href="https://www.yoyogames.com/blog/16/shaders-overview-part-2"><span class="notranslate">Shaders</span> Partie 2</a></li>
    <li><a href="https://www.yoyogames.com/blog/17/shaders-overview-part-3"><span class="notranslate">Shaders</span> Partie 3</a></li>
    <li><a href="https://www.yoyogames.com/blog/18/shaders-overview-part-4"><span class="notranslate">Shaders</span> Partie 4</a></li>
  </ul>
  <p> </p>
  <p><span class="notranslate">GameMaker Studio 2</span> prend en charge les langages de <span class="notranslate">shaders</span> suivants :</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Langage de<span class="notranslate">shaders</span> </th>
        <th>Plate-forme cible</th>
      </tr>
      <tr>
        <td><strong>GLSL ES</strong></td>
        <td>Toutes les plateformes cibles</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac et <span class="notranslate">Ubuntu</span><span class="notranslate">(Linux</span>)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td><span class="notranslate">Windows</span>, UWP, XboxOne</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td><span class="notranslate">Playstation 4</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Pour créer une ressource de <span class="notranslate">shader</span>, il suffit de cliquer avec le bouton droit de la souris sur <img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png"> dans l'<a href="../Introduction/The_Asset_Browser.htm">Asset Browser</a> et de sélectionner <em>Create <span class="notranslate">Shader</span></em>. Une fois que vous avez créé
    le <span class="notranslate">shader de</span> base, vous pouvez alors utiliser le menu droit de la souris <img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png"> sur la nouvelle ressource pour sélectionner le type de <span class="notranslate">shader</span> avant de continuer à modifier le code :</p>
  <p><img alt="Shader Editor RMB Menu" class="center" src="../assets/Images/Asset_Editors/Editor_Shader_RMBMenu.png">L'éditeur de code lui-même est divisé en deux &quot;programmes&quot; - Vertex et Fragment - lorsque vous créez un nouveau shader, chacun d'eux <span class="notranslate">étant</span> accessible à partir d'onglets situés en haut de l'éditeur.
    disponibles à partir des onglets en haut de l'éditeur. Les deux sont créés en même temps car vous <em>ne pouvez pas créer un <span class="notranslate">shader</span></em> sans les deux parties. Même si vous souhaitez utiliser uniquement le fragment <span class="notranslate">shader</span>, vous devez d'abord créer un vertex shader &quot;pass through&quot;.
    C'est pourquoi par défaut, tout nouveau <span class="notranslate">shader</span> créé aura un vertex et un fragment pass through <span class="notranslate">shader</span> déjà codé pour vous (dans la capture d'écran en haut de la page, vous pouvez voir que nous avons utilisé l'éditeur de code pour montrer les deux côte à côte...).
    les deux côte à côte... utile lorsque vous travaillez sur les deux programmes de <span class="notranslate">shaders</span> ensemble).</p>
  <p>Il convient de noter que vous pouvez utiliser les <span class="notranslate">shaders</span> GLSL ES sur <em>toutes les </em>plates-formes cibles, mais pour qu'ils fonctionnent sur la plate-forme cible <strong>HTML5 </strong>, vous devez avoir activé WebGL dans les <a href="../Settings/Game_Options/HTML5.htm">options de jeu HTML5</a>.
    ils ne fonctionneront pas.</p>
  <p>Pour plus de détails sur les fonctions des <span class="notranslate">shaders</span> et la façon dont ils peuvent être utilisés dans <span class="notranslate">GameMaker Studio 2</span>, veuillez consulter les pages suivantes :</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm"><span class="notranslate">Shader</span></a> Functions - La section de référence <span class="notranslate">GML</span> pour les <span class="notranslate">shaders</span>.</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Constantes de<span class="notranslate">shaders</span></a> - Les constantes intégrées à <span class="notranslate">GameMaker Studio 2</span> qui peuvent être utilisées lors de l'écriture de <span class="notranslate">shaders</span>.</li>
    <li><a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf">Spécifications GLSL ES</a> - Fichier PDF des spécifications du langage de <span class="notranslate">shaders</span> Open GL ES que <span class="notranslate">GameMaker Studio 2</span> utilise.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">Référence du langage HLSL</a> - Les pages de référence de Microsoft pour l'utilisation du langage HLSL.</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">Présentation du langage PSSL</a> - Aperçu du langage PSSL sous forme de présentation.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="The_Asset_Editors.htm">Les éditeurs d'actifs</a></div>
        <div style="float:right">Suivant : <a href="Sounds.htm">Sons</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
The <span class="notranslate">Shader</span> Editor
<span class="notranslate">Shaders</span>
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
<span class="notranslate">shader</span>_editor
-->

</body></html>