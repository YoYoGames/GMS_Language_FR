<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Commentaires de script JSDoc</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page qui explique le fonctionnement des commentaires de script JSDoc" />
  <meta name="rh-index-keywords" content="Éditeur de code - Commentaires JSDoc,JSDoc" />
  <meta name="search-keywords" content="JSDoc,Commentaires JSDoc" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> Commentaires de script JSDoc</h1><p> Si vous souhaitez que vos fonctions personnalisées soient complétées par le code et afficher les arguments requis, etc. dans l&#39;éditeur de code, vous devez ajouter des commentaires de <a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html">style JSDoc.</a> Ces commentaires sont utilisés pour indiquer à la fonction de saisie semi-automatique comment la fonction doit être utilisée et remplie dans l&#39; <a href="../Scripts.htm">éditeur de script</a>.</p><p> Le format d&#39;un en-tête de fonction typique serait d&#39;avoir le nom de la fonction, la description de la fonction, puis la liste des différents arguments (paramètres) que la fonction prend, en veillant à commencer chaque ligne avec une triple barre oblique inverse &quot; <span class="inline">///</span> &quot;car cela indique à <span class="notranslate">GameMaker Studio 2</span> d&#39;analyser le commentaire comme étant de style JSDoc. Les commentaires eux-mêmes doivent recevoir un identifiant (précédé de&quot;<span class="inline">@</span> &quot;) et le contenu, et les identifiants disponibles sont les suivants:</p><p></p><table><tbody><tr><th> Identifiant</th><th> Teneur</th></tr><tr><td><span class="inline">@function</span> / <span class="inline">@func</span></td><td> Le nom complet de la fonction et les arguments de la fonction, par exemple:<br/> <span class="inline"><tt>my_func(x, y, colour)</tt></span>.</td></tr><tr><td><span class="inline">@description</span> / <span class="inline">@desc</span></td><td> Une description générale de ce que fait la fonction.</td></tr><tr><td><span class="inline">@param</span> / <span class="inline">@arg</span> / <span class="inline">@argument</span></td><td> Le type d&#39;argument (facultatif), inclus dans <span class="inline">{}</span>, le nom de l&#39;argument et une brève description (avec des espaces entre les deux)</td></tr></tbody></table><p></p><p> Pour avoir une idée de comment cela fonctionnerait lors de l&#39;écriture de vos propres fonctions, prenons cet exemple de base:</p><p class="code">function is_same_object(_id, _obj)<br/> {
    <br/> if _id.object_index == _obj<br/>     {<br/>     return true;<br/>     }<br/> else return false;<br/> }
  </p><p> Tout ce que ce script fait est de vérifier si une instance a le même <span class="inline">object_index</span> comme un objet donné et serait appelé simplement comme:</p><p class="code">if is_same_object(id, obj_Player)<br/>     {<br/>     instance_destroy()<br/>     }</p><p> Cependant, écrire cela dans l&#39;éditeur de code ne vous montrerait pas les arguments ni ne vous aiderait lors de son utilisation, nous devons donc ajouter une description, un nom de fonction et les arguments sous forme de commentaires JSDoc comme celui-ci:</p><p class="code">/// @function            is_same_object(id, object)<br/> /// @description         Compare an instance object index with that of another.<br/> /// @param {real} _id    The unique instance ID value of the instance to check.<br/> /// @param {real} _obj
      The object index to be checked against.<br/> function is_same_object(_id, _obj)<br/> {
    <br/> if _id.object_index == _obj<br/>     {<br/>     return true;<br/>     }<br/> else return false;<br/> }
  </p><p> Maintenant, lorsque vous appelez cette fonction dans le code n&#39;importe où, vous obtiendrez une aide à la saisie semi-automatique et à l&#39;argument, etc.</p><p><img alt="JSDoc Example" class="center" height="652" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Example.png" width="672" /></p><p> Dans l&#39;image ci-dessus, la partie supérieure montre la fonction de la saisie semi-automatique et la partie inférieure montre le fonctionnement de l&#39;assistant d&#39;argument en bas. Notez que les parties facultatives «type» et «description» obligatoires de <span class="inline">@param</span> ne sont pas affichés par défaut dans le code IDE complet, et pour les voir, vous devez activer les options dans les <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Text_Editor_Preferences.htm">Préférences <span class="notranslate">GML</span></a>.</p><p> Étant donné que les scripts peuvent contenir plusieurs fonctions, vous devez vous habituer à définir la fonction comme ceci avant chacune d&#39;entre elles dans le script, comme ceci: </p><p><img alt="Multiple Functions With JSDoc Comments Example" class="center" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_MultipleFunctions.png" /></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="../Scripts.htm">L&#39;éditeur de script</a></div><div style="float:right"> Suivant: <a href="Code_Snippets.htm">Extraits de code</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
JSDoc Script Comments
-->
  <!-- TAGS
jsdoc_comments
-->
</body>
</html>