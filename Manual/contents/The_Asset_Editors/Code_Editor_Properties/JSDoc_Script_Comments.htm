<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Commentaires sur le script JSDoc</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how JSDoc Script Comments work" />
  <meta name="rh-index-keywords" content="Code Editor - JSDoc Comments,JSDoc" />
  <meta name="search-keywords" content="JSDoc,JSDoc Comments" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Commentaires sur le script JSDoc</h1>
  <p>Si vous souhaitez que vos fonctions personnalisées soient complétées par du code et que les arguments requis soient affichés de manière spécifique dans l'éditeur de code, vous devez ajouter des commentaires de <a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html">style JSDoc</a>. Ces commentaires sont utilisés pour indiquer à la fonction de complétion automatique comment la fonction doit être utilisée et remplie dans l'<a href="../Scripts.htm">éditeur de script.</a></p>
  <p>Le format d'un en-tête de fonction typique est le suivant : le nom de la fonction, la description de la fonction, puis la liste des différents arguments (paramètres) que prend la fonction, en veillant à commencer chaque ligne par un triple backslash &quot;
    <span class="inline">///</span> &quot;, car cela indique à GameMaker <span class="notranslate">Studio 2 d'</span> analyser le commentaire comme étant de style JSDoc. Les commentaires eux-mêmes doivent recevoir un identifiant (précédé de &quot;<span class="inline">@</span>&quot;) et un contenu.
    disponibles sont les suivants :</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Identifiant</th>
        <th>Contenu</th>
      </tr>
      <tr>
        <td><span class="inline">@function</span> / <span class="inline">@func</span></td>
        <td>Le nom complet de la fonction et les arguments de la fonction, par exemple :<br>
          <span class="inline"><tt>my_func(x, y, colour)</tt></span>.</td>
      </tr>
      <tr>
        <td><span class="inline">@description</span> / <span class="inline">@desc</span></td>
        <td>Une description générale de ce que fait la fonction.</td>
      </tr>
      <tr>
        <td><span class="inline">@param</span> / <span class="inline">@arg</span> / <span class="inline">@argument</span></td>
        <td>Le type d'argument (facultatif), entouré de <span class="inline">{}</span>, le nom de l'argument et une brève description (entrecoupée d'espaces).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Pour avoir une idée de la façon dont cela fonctionne lorsque vous écrivez vos propres fonctions, prenons cet exemple de base :</p>
  <p class="code">function is_same_object(_id, _obj)<br> {
    <br> if (_id.object_index == _obj)<br> {<br> return true ;<br> } <br> else return false ;<br> }
  </p>
  <p>Tout ce que fait ce script est de vérifier si une instance a la même <span class="inline">object_index</span> qu'un objet donné et serait appelé simplement comme :</p>
  <p class="code">if is_same_object(id, obj_Player)<br> {
    <br> instance_destroy()<br> }
  </p>
  <p>Cependant, si vous écrivez cela dans l'éditeur de code, vous verrez directement les noms des variables des arguments<tt>(_id</tt> et <tt>_obj</tt>), ce qui, dans la plupart des cas, n'est pas très descriptif. Vous pouvez utiliser JSDoc pour définir des noms d'arguments et des descriptions personnalisées, ainsi que des informations sur la fonction.
    ainsi que des informations sur la fonction :</p>
  <p class="code">/// @function is_same_object(id, object)<br> /// @description Compare un index d'instance avec un index d'objet.<br> /// @param {real} inst_id La valeur unique de l'ID de l'instance à vérifier.<br> /// @param {real}
    object_id L'index d'objet à vérifier.<br>
    <br> function is_same_object(_id, _obj)<br> {
    <br> if (_id.object_index == _obj)<br> {<br> return true ;<br> } <br> else return false ;<br> }
  </p>
  <p>Maintenant, lorsque vous appelez cette fonction n'importe où dans votre projet, vous verrez les nouveaux noms d'arguments qui ont été entrés dans les commentaires JSDoc :</p>
  <p><img alt="JSDoc Example" class="center" height="652" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Example.png" width="672" /></p>
  <p>Dans l'image ci-dessus, la partie supérieure montre la fonction dans l'auto-complétion et la partie inférieure montre comment fonctionne l'aide d'argument en bas. Notez que les parties optionnelles &quot;type&quot; et obligatoires &quot;description&quot; de <span class="inline">@param</span> ne sont pas affichées par défaut dans le code complet de l'IDE, et que pour les voir, vous devez activer les options dans les préférences GML.</p>
  <p>Vous pouvez entourer le nom d'un argument de crochets <tt>[]</tt> pour indiquer qu'il est facultatif. L'éditeur de code attendra alors n'importe quel nombre d'arguments entre le nombre minimum d'arguments requis et le nombre total d'arguments. Par exemple, voir l'exemple suivant
    fonction :</p>
  <p class="code">/// @function animate_position(end_x, end_y, start_x, start_y)<br> /// @desc Anime l'instance jusqu'au point de fin, à partir d'un point de départ facultatif<br> /// @arg end_x<br> /// @arg end_y<br> /// @arg [start_x]<br> /// @arg [start_y]<br>
    <br> function animate_position (x1, y1, x2, y2)<br> {
    <br> // Code de la fonction<br> }
  </p>
  <p>Les arguments <tt>start_x</tt> et <tt>start_y</tt> sont marqués comme facultatifs, ce qui signifie que l'éditeur de code s'attend maintenant à 2 à 4 arguments, comme on peut le voir dans le message d'avertissement :</p>
  <p><img class="center" height="150" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Optional.png" width="537" /></p>
  <p class="note"><strong>REMARQUE</strong>: vous obtiendrez le même comportement si vous utilisez des arguments facultatifs dans la déclaration de la fonction. Voir les <a href="../../GameMaker_Language/GML_Overview/Script_Functions.htm">fonctions de script</a> pour plus d'informations.</p>
  <p>Comme les scripts peuvent contenir plusieurs fonctions, vous pouvez ajouter des commentaires JSDoc pour chacune d'entre elles avant sa déclaration :</p>
  <p><img alt="Multiple Functions With JSDoc Comments Example" class="center" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_MultipleFunctions.png" /></p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Scripts.htm">L'éditeur de script</a></div>
        <div style="float:right">Suivant : <a href="Code_Snippets.htm">Extraits de code</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
JSDoc Script Comments
-->
  <!-- TAGS
jsdoc_comments
-->
</body>
</html>