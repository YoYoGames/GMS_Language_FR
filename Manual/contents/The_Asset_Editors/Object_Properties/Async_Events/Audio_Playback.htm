<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Lecture audio</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the Audio Playback async event." />
  <meta name="rh-index-keywords" content="Objects - Async Audio Playback Event" />
  <meta name="search-keywords" content="Audio Playback,ev_audio_playback" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Lecture audio</h1>
  <p><img alt="Audio Playback Event" class="center" src="../../../assets/Images/Asset_Editors/Async_AudioPlayback.png">Cet événement ne peut être déclenché que par les fonctions de lecture de la <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/Audio_Buffers.htm">file d'attente audio</a> et renvoie une <a href="../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">carte DS Map</a> stockée dans la variable <a href="../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"> <span class="inline">async_load</span></a>,
    contenant différentes paires clé/valeur relatives à la file d'attente audio qui a déclenché l'événement. L'événement est déclenché par un <a class="glossterm" data-glossterm="rappel" href="#">callback</a> lorsque vous avez sélectionné une file d'attente audio à lire et qu'un tampon de cette file d'attente audio a terminé sa lecture.
    de cette file d'attente audio a terminé sa lecture.</p>
  <p>Les touches suivantes seront disponibles dans la carte DS :</p>
  <ul class="dropspotlist">
    <li class="dropspot">&quot;<span class="inline">queue_id</span>&quot; - l'index de la file d'attente qui a fini de jouer, tel que renvoyé par la fonction <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm"><span class="inline">audio_create_play_queue()</span></a>.</li>
    <li class="dropspot">&quot;<span class="inline">buffer_id</span>&quot; - l'ID de la mémoire tampon <a href="../../../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">qui</a> n'est plus lue.</li>
    <li class="dropspot">&quot;<span class="inline">queue_shutdown</span>&quot; - ce paramètre est réglé sur 0 pendant la lecture normale et sur 1 lorsque l'événement est reçu car <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_free_play_queue.htm"><span class="inline">audio_free_play_queue()</span></a> a
      été appelé. Lorsque cette valeur est 1, vous ne voulez pas mettre en file d'attente d'autres données.</li>
  </ul>
  <p>Comme une file d'attente audio peut être créée à partir de plusieurs tampons, cet événement peut être déclenché plusieurs fois pour une file d'attente lorsque la fin de chaque section de l'audio mis en mémoire tampon est atteinte, d'où la clé &quot;buffer_id&quot;.</p>
  <p class="note"><strong>REMARQUE</strong>: La variable <span class="inline" style="font-size: 14px">async_load</span> n'est valable que dans les événements asynchrones, car la carte DS vers laquelle elle pointe est créée au début de l'événement, puis supprimée à la fin, cette variable étant réinitialisée à la valeur -1.
    Cependant, toutes les autres structures de données créées à partir de l'événement doivent être nettoyées à l'aide des fonctions appropriées.</p>
  <p>Dans l'exemple d'utilisation donné ci-dessous, nous allons créer une file d'attente audio à laquelle nous ajouterons 10 sons audio mis en mémoire tampon, puis nous jouerons la file d'attente :</p>
  <p class="code">audio_queue = audio_create_play_queue(buffer_s16, 11052, audio_mono) ;<br> for (var i = 0 ; i &lt; 10 ; i++ ;)<br> {<br> audio_queue_sound(audio_queue, audio_buffer[i], 0, buffer_get_size(audio_buffer[i])) ;<br> } <br> audio_play_sound(audio_queue,
    0, true) ;</p>
  <p>À chaque étape du jeu, lorsque l'enregistrement est détecté, un événement d'enregistrement audio asynchrone est déclenché et vous pouvez traiter l'entrée enregistrée de la manière suivante :</p>
  <p class="code">var queue = async_load[ ? &quot;queue_id&quot;] ;<br> var num = 0 ;<br> if queue = audio_queue<br> {<br> for (var i = 0 ; i &lt; 10 ; i++ ;)<br> {<br> if async_load[ ? &quot;buffer_id&quot;] == audio_buffer[i]<br> {<br> buffer_seek(audio_buffer[i],
    buffer_seek_start, 0) ;<br> num = i ;<br> } <br> } <br> if num == 9<br> {<br> audio_stop_sound(audio_queue) ;<br> audio_free_play_queue(audio_queue) ;<br> } <br> }
  </p>
  <p>Ici, nous vérifions l'ID de la file d'attente et si c'est celle que nous voulons, nous vérifions ensuite l'ID du tampon pour voir quel tampon a fini d'être joué. Nous fixons également une variable locale à cette valeur d'index pour une vérification ultérieure et remettons le tampon au début pour ce son.
    son. Lorsque notre variable locale atteint 9, indiquant que la file d'attente est terminée, nous arrêtons la lecture du son et libérons la file d'attente.</p>
  <p> </p>
  <div class="droptext" data-targetname="drop-down"> </div>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Async_Events.htm">Événements asynchrones</a></div>
        <div style="float:right">Suivant : <a href="Audio_Recording.htm">Enregistrement audio</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Asynchronous Audio Playback Event
ev_audio_playback
Audio Playback
-->
  <!-- TAGS
ev_audio_playback
-->

</body></html>