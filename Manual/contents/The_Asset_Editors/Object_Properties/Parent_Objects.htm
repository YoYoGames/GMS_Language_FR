<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Objets parents</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page détaillant la parentalité d&#39;objet" />
  <meta name="rh-index-keywords" content="Objets - Parents" />
  <meta name="search-keywords" content="parent,enfant,héritage,parentage d&#39;objet" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> Objets parents</h1><p> Lorsque vous travaillez avec des objets dans l&#39; <span class="notranslate">GameMaker Studio 2</span>, vous pouvez configurer des <strong>hiérarchies parent</strong> / enfant. Cela se fait en cliquant sur le bouton &quot;Parent&quot; dans l&#39;éditeur d&#39;objets, puis en choisissant un autre objet dans le navigateur d&#39;actifs pour être le &quot;parent&quot; de celui en cours d&#39;édition:</p><p><img alt="Adding A Parent" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Parent.png" /> Ainsi, chaque objet de votre projet de jeu peut avoir un objet parent, mais qu&#39;est-ce que cela signifie? Eh bien, lorsqu&#39;un objet a un parent affecté, il peut partager du code, des actions et des événements avec ce parent. Ce partage est appelé &quot;héritage&quot; et un objet qui a un parent est appelé un objet &quot;enfant&quot;. Non seulement un enfant peut partager du code avec son parent, mais vous pouvez également effectuer des vérifications et exécuter du code sur des objets parents et il inclura également automatiquement les objets enfants, ce qui économise beaucoup de temps et d&#39;énergie.</p><p> Si cela semble compliqué, alors une autre façon de regarder un objet parent est de «regrouper» des objets sous le même parapluie et de leur faire partager certaines choses sans perdre leur propre identité unique. Peut-être que cela ne clarifie pas encore trop les choses, alors donnons quelques exemples...</p><p> Supposons que vous ayez un objet «joueur» et quatre objets «ennemis» différents. Maintenant, vous voulez que le joueur meure s&#39;il touche l&#39;un de ces quatre objets et cela impliquerait normalement quatre événements de collision différents avec quatre ensembles différents d&#39;actions ou de code, un pour chacun des objets ennemis. MAIS si nous créons un objet parent pour tous les ennemis, alors nous pouvons créer un événement de collision avec l&#39;objet parent uniquement et il se déclenchera quel que soit l&#39;un des quatre objets ennemis &quot;enfants&quot; qui touchent le joueur. Trucs pratiques! Dans l&#39; <span class="notranslate">GameMaker Studio 2</span>, vous verriez quelque chose comme ceci:</p><p><img alt="Parenting For Collisions" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentCollision.png" /> Sur la gauche, nous avons quatre événements de collision séparés et sur la droite nous avons un seul événement de collision, car nous avons créé un objet &quot;parent&quot; et lui avons assigné tous les objets ennemis. Notez qu&#39;un objet parent n&#39;a pas besoin de contenir d&#39;événements ou de code...</p><p> Un autre exemple de parentalité serait si vous avez un jeu dans lequel vous voulez créer 10 objets différents et les faire tous se comporter de la même manière. Pour cela, vous créeriez un objet parent dans lequel toutes vos actions de comportement ou votre code figureraient dans les événements requis, puis vous créeriez vos dix objets sans actions ni code, mais avec des sprites différents, et leur affecteriez votre objet parent. Désormais, lorsque vous placez ces instances dans une pièce, elles se comportent toutes de la même manière, mais paraissent différentes, puisqu&#39;elles &quot;hériteront&quot; des événements du parent.</p><p> Enfin, vous pouvez utiliser la parentalité pour «mélanger et assortir» des événements et des comportements. Nous allons illustrer cela avec un dernier exemple... Disons que vous voulez deux monstres: un qui monte et descend, tandis qu&#39;un autre qui se déplace à gauche et à droite, mais vous voulez aussi que les deux aient la même santé, tirez sur le joueur et blesser le joueur s’ils entrent en collision avec eux. Dans ce cas, vous pouvez voir que presque tous les événements devraient avoir les mêmes actions à l&#39;exception d&#39;un ou deux qui régissent le mouvement. Donc, encore une fois, nous pouvons faire d&#39;un objet le parent de l&#39;autre, mais dans ce cas, nous définissons également certains événements pour l&#39;objet enfant. Ces événements «remplacent» les événements parents, ce qui signifie que chaque fois qu&#39;un événement pour l&#39;objet enfant contient des actions, celles-ci sont exécutées à la place des actions contenues dans l&#39;événement du parent. Si vous souhaitez également exécuter l&#39;événement parent, vous pouvez appeler l&#39;événement dit &quot;hérité&quot; à l&#39;aide de la fonction <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a>, ou l&#39;action <span class="notranslate">DnD</span> <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">™ Événement d&#39;appeler le parent</a>.</p><p><img alt="Inheriting Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_InheritEvents.png" /> Sur la gauche ci-dessus se trouve l&#39;objet parent avec 5 événements, et sur la droite, vous pouvez voir l&#39;objet &quot;enfant&quot;. L&#39;objet enfant contient également 5 événements, mais deux d&#39;entre eux remplacent les événements hérités du parent (les <strong>événements Step</strong> et <strong>Draw</strong> ) et les trois autres sont grisés car ce sont les événements hérités du parent. Les événements hérités auront également l&#39;icône «remplacement du parent» à côté d&#39;eux dans l&#39;éditeur d&#39;événements:</p><p><img alt="Parent Override" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentOverride.png" /> Lorsque vous cliquez sur<img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png" /> sur un événement hérité, il ouvrira l&#39;éditeur de code pour afficher le code parent hérité, mais vous ne pourrez pas modifier ce code car vous ne pouvez le modifier que dans l&#39;objet parent lui-même. Vous pouvez cliquer sur le bouton droit de la souris<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"
    /> sur l&#39;un des événements parents pour ouvrir le menu d&#39;options suivant:</p><p><img alt="Parent Event RMB Menu" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_Parent_Menu.png" /> Ici, vous pouvez choisir deux <strong>Ouvrir</strong> l&#39;événement parent pour inspecter le code, ou vous pouvez choisir d&#39; <strong>hériter de</strong> l&#39;événement ou de <strong>remplacer</strong> l&#39;événement. Si vous choisissez <strong>Hériter,</strong> l&#39;éditeur de code s&#39;ouvrira avec la fonction <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> déjà ajouté (ou l&#39; <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">action Appeler l&#39;événement parent</a> si vous utilisez <span class="notranslate">DnD</span>™). Tout autre code que vous placez dans cet événement sera maintenant exécuté ainsi que le code de l&#39;objet parent. Si vous choisissez de <strong>remplacer</strong> l&#39;événement, la fenêtre de code s&#39;ouvrira également, seulement maintenant <span class="inline">event_inherited()</span> ne sera pas appelée, donc tout ce que vous ajoutez ici sera exécuté à la <em>place</em> du code dans l&#39;objet parent.</p><p class="note"> <strong>REMARQUE</strong>: à partir de l&#39;éditeur de code, vous pouvez accéder rapidement à l&#39;objet parent en cliquant sur le bouton droit de la souris<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /> et en sélectionnant <strong>Aller à l&#39;objet</strong> dans le menu contextuel, ou (si l&#39;événement a été remplacé), vous pouvez sélectionner <strong>Ouvrir l&#39;événement hérité</strong> pour accéder directement à un éditeur de code contenant le code d&#39;événement parent.</p><p> Chaque fois que vous ciblez un objet parent dans le code, le code s&#39;appliquera également aux &quot;enfants&quot; de l&#39;objet parent. Cela se produit lorsque, dans une action, vous indiquez que l&#39;action doit être appliquée aux instances d&#39;un certain objet, et dans le code, cela se produit lorsque vous utilisez le <a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm"><span class="inline">with()</span></a> déclaration. Cela fonctionnera aussi comme ça lorsque vous appelez des fonctions de code, comme <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"><span class="inline">instance_position()</span></a>, <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>, etc... où - si vous fournissez un objet parent - toutes les instances des instances parent <em>et</em> enfant seront incluses dans les vérifications. Enfin, la parentalité fonctionne lorsque vous faites également référence à des variables dans d&#39;autres objets, comme dans l&#39;exemple de monstre ci-dessus, si je règle la vitesse de l&#39;ennemi 1 sur 10, la vitesse de l&#39;ennemi 2 passera également à dix car il s&#39;agit d&#39;un objet enfant de l&#39;ennemi 1.</p><p> Il est généralement considéré comme une bonne pratique dans la plupart des cas de créer un objet parent de base et de faire en sorte que cet objet de base contienne tout le comportement par défaut, mais n&#39;en utilise jamais une instance dans le jeu. Utilisez plutôt tous les objets enfants et n&#39;utilisez le parent que dans des situations comme celles que j&#39;ai décrites ci-dessus, pour les collisions, pour référencer des variables, etc... Il faut aussi savoir que les parents peuvent aussi avoir des parents! Évidemment, vous ne pouvez pas créer un cycle de &quot;le parent 1 est l&#39;enfant du parent 2 est l&#39;enfant du parent 1&quot; mais vous pouvez créer ce que l&#39;on appelle la &quot;hiérarchie d&#39;objets&quot; où &quot; <em>parent3</em> est l&#39;enfant du <em>parent2</em> est l&#39;enfant du <em>parent1</em> &quot;. Ceci est extrêmement utile pour garder votre jeu structuré et il vous est fortement conseillé d&#39;apprendre à utiliser ce mécanisme. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: l&#39; <a href="../Objects.htm">éditeur d&#39;objets</a></div><div style="float:right"> Suivant: <a href="Physics_Objects.htm">Objets de physique</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Parent Objects
Child Objects
parent
child
inheritance
-->
  <!-- TAGS
parent_objects
-->
</body>
</html>