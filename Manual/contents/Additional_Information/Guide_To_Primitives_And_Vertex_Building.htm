<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guide des primitives et de la construction de sommets</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guide des primitives et de la construction de sommets</h1>
  <p>Ce guide explique brièvement comment construire et utiliser des <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">primitives</a> en utilisant des <strong>formats de vertex</strong> et des <strong>tampons de vertex</strong> personnalisés. </p>
  <p>En général, lorsque vous commencez à travailler avec la 3D, les effets spéciaux, les processus de dessin complexes ou les <span class="notranslate">shaders</span>, vous n'avez pas besoin de trop vous soucier du format de vertex utilisé, puisque GameMaker <span class="notranslate">Studio 2</span> configure et transmet automatiquement les données de <a class="glossterm" data-glossterm="vertex" href="#">vertex</a> pour vous. Cependant, il est parfois nécessaire de créer vos propres données de sommets et de les formater en conséquence, notamment lorsque vous devez augmenter la vitesse ou que vous souhaitez transmettre des informations supplémentaires. Par exemple, le format standard
    standard comprend une position 3D x, y, z, une couleur (avec alpha) et des coordonnées de texture UV, qui, si vous les créez vous-même, ressembleront à ceci</p>
  <p class="code">vertex_format_begin() ;<br> vertex_format_add_position_3d() ;
    <br> vertex_format_add_colour() ;
    <br> vertex_format_add_textcoord() ;
    <br> mon_format = vertex_format_end() ;</p>
  <p>Toutefois, si vous utilisez (par exemple) un <span class="notranslate">shader</span> pour manipuler la position du vertex, il n'est pas nécessaire de transmettre des données de couleur ou de texture. Dans ce cas, vous créerez votre propre format comme suit :</p>
  <p class="code">vertex_format_begin() ;<br> vertex_format_add_position_3d() ;
    <br> mon_format = vertex_format_end() ;</p>
  <p>Au total, il existe cinq attributs de sommets différents que vous pouvez utiliser pour définir un format de sommet :</p>
  <ul class="colour">
    <li>Couleur</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Position 3D</li>
    <li>Coordonnée de la texture</li>
  </ul>
  <p>En général, vous devez <em>toujours</em> fournir la position ou la position 3D dans le cadre du format, mais tous les autres éléments sont facultatifs.</p>
  <p>Notez qu'une fois que vous avez créé votre format de vertex, l'ordre dans lequel vous avez défini les attributs de vertex <i>doit être respecté</i> lors de la construction de vos <strong>primitives</strong>. Ainsi, si vous avez défini un format de sommet comme position, couleur,
    et coordonnées de texture, <b>vous <i>devez</i></b> ajouter ces attributs à la primitive dans le même ordre, sinon vous obtiendrez une erreur. Notez également que, comme toute autre ressource dynamique, un format de vertex requiert de la mémoire et doit donc être supprimé
    lorsqu'il n'est pas nécessaire en utilisant la fonction <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><tt>vertex_format_delete()</tt></a>.</p>
  <p>Toutes les primitives que vous construisez sont conservées dans un <b>tampon de vertex</b>. Celui-ci doit être créé au préalable, puis référencé par les fonctions qui sont utilisées pour construire votre primitive. Le tampon de sommets peut être réutilisé autant de fois que nécessaire pour créer différentes primitives.
    Le tampon de sommets peut être réutilisé autant de fois que nécessaire pour créer différentes primitives, ou il peut être &quot;gelé&quot; pour maintenir un type de primitive spécifique pour la durée de votre jeu ou niveau (ce qui est l'approche la plus rapide, donc si vous savez qu'une primitive que vous construisez ne changera pas, vous devriez toujours utiliser cette option).</p>
  <p>Un exemple de construction d'une primitive à triangle unique est présenté dans le code suivant :</p>
  <p class="code">// CREATE EVENT<br> v_buff = vertex_create_buffer() ;<br> vertex_begin(v_buff, global.my_format) ;<br> vertex_position(v_buff, 10, 10) ;<br> vertex_colour(v_buff, c_white, 1) ;<br> vertex_texcoord(v_buff, 0, 0) ;<br> vertex_position(v_buff, 110, 10) ;<br> vertex_colour(v_buff, c_white, 1) ; <br> vertex_texcoord(v_buff, 1, 0) ;<br> vertex_position(v_buff, 110, 110) ;<br> vertex_colour(v_buff, c_white, 1) ;<br> vertex_texcoord(v_buff, 1, 1) ;<br> vertex_end(v_buff) ;
    <br>
    <br> // DRAW EVENT<br> var tex = sprite_get_texture(spr_Background, 0) ;<br> <span class="notranslate">shader_set</span>(shd_shimmer) ;
    <br> vertex_submit(v_buff, pr_trianglelist, tex) ;<br> <span class="notranslate">shader_reset</span>() ;
  </p>
  <p>Ici, nous avons d'abord créé notre tampon de sommets dans l'événement Create de l'instance, puis nous commençons la définition des différents sommets qui composent notre primitive de triangle, en donnant la position, la couleur et la coordonnée UV de la texture pour chacun des trois points que nous voulons utiliser.
    trois points que nous voulons utiliser. Nous terminons ensuite la définition des sommets, et nous savons que le tampon de sommets contenant ces données de sommets est stocké dans la variable &quot;v_buff&quot;.  </p>
  <p class="note"><strong>REMARQUE</strong>: si le contenu du tampon doit être mis à jour en permanence, le tampon sera créé, recevra les données des sommets, puis sera détruit à nouveau - après avoir été dessiné - tout cela dans la même étape.</p>
  <p>Nous dessinons ensuite le contenu du vertex buffer dans le Draw Event en utilisant un <span class="notranslate">shader</span>. Il s'agit d'un exemple très simple, et c'est en gros la façon dont <span class="notranslate">GameMaker Studio 2</span> fonctionne en interne, c'est-à-dire que lorsque vous dessinez un sprite, <span class="notranslate">GameMaker</span> crée un vertex buffer avec quatre sommets
    en créant deux triangles (qui forment un carré, également appelé &quot;quad&quot;), et en texturant ces deux triangles avec l'image du sprite. Lorsque nous dessinons ce sprite, nous soumettons le tampon de sommets et son contenu est dessiné à l'écran.</p>
  <p>Vous remarquerez que lorsque nous soumettons le tampon de sommets pour le dessin, nous fournissons un type de primitive. Le type de primitive que vous utilisez peut être un point, une liste ou une bande de lignes, ou une liste ou une bande de triangles, mais vous <i>n'</i> êtes <i>pas</i> autorisé à utiliser des ventilateurs de triangles car la plupart des matériels mobiles n'acceptent pas ce type de primitive.
    n'acceptent pas ce type de primitive. N'oubliez pas de formater votre tampon de sommets correctement pour le type de primitive qui va être utilisé pour le dessiner. Par exemple, dessiner une primitive à deux triangles comme une liste de triangles nécessite 6 points,
    mais en tant que bande de triangles, elle ne nécessite que 4 points. Le type de primitive que vous utilisez dépend de ce que vous voulez dessiner et de l'effet que vous voulez obtenir.</p>
  <p>Un dernier point important à noter lorsque vous utilisez vos propres tampons de sommets de cette manière est la façon dont cela affecte les lots de sommets qui sont envoyés au GPU. Lorsque vous créez un tampon de sommets, vous créez le plus bas niveau de données graphiques.
   <span class="notranslate">GameMaker Studio 2</span> envoie votre tampon directement à la carte graphique. C'est pourquoi, si vous souhaitez améliorer le traitement par lots, vous devez le faire vous-même et stocker les éléments que vous souhaitez traiter par lots dans le même tampon.</p>
  <p>Comme nous l'avons déjà mentionné ci-dessus, les formats de sommets sont construits en utilisant ensemble les 5 types d'attributs suivants (ajoutés via la fonction <tt>vertex_format_add_*</tt> appropriée) :</p>
  <ul class="colour">
    <li>Couleur</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Position 3D</li>
    <li>Coordonnée de la texture</li>
  </ul>
  <p>Dans le <span class="notranslate">shader</span> GLSL ES, ces types sont reconnus à l'aide des 4 attributs suivants :</p>
  <ul class="colour">
    <li>Couleur</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Coordonnée de la texture</li>
  </ul>
  <p>Cela peut sembler étrange, car il semble que nous puissions spécifier plus de types d'attributs dans notre format de vertex que dans le vertex <span class="notranslate">shader</span>. Cependant, dans le <span class="notranslate">nuanceur</span>, la <i>position</i> et la <i>position 3D</i> sont traitées comme <em>le même </em>attribut, sauf que
   <i>Position</i> est censé n'avoir que des coordonnées &quot;x&quot; et &quot;y&quot; alors que Position 3D a des coordonnées &quot;x <i>&quot;, &quot;y&quot;</i> et &quot;z&quot;. Comment faire correspondre le format des sommets avec la définition des attributs dans le shader <span class="notranslate">?</span> Commençons par
    commençons par examiner un ensemble typique d'attributs du <span class="notranslate">shader</span> par défaut :</p>
  <p> </p>
  <p class="code">attribut vec3 in_Position ; // (x,y,z)<br> //attribut vec3 in_Normal ; // (x,y,z) inutilisé dans ce <span class="notranslate">shader</span>.<br> attribut vec4 in_Colour ; // (r,g,b,a)<br> attribut vec2 in_TextureCoord ; // (u,v)</p>
  <p>Et voici un morceau de code qui met en place un format de vertex compatible avec ce shader <span class="notranslate">:</span></p>
  <p class="code">vertex_format_begin() ;<br> vertex_format_add_position_3d() ;
    <br> vertex_format_add_colour() ;
    <br> vertex_format_add_textcoord() ;
    <br> mon_format = vertex_format_end() ;</p>
  <p>Maintenant, comment l'attribut du <span class="notranslate">shader</span> correspond-il au type de format de vertex ? C'est juste basé sur la convention de nommage :</p>
  <ul class="colour">
    <li>&quot;in_Position&quot; correspond à vertex_format_add_position <tt>/ _3d()</tt></li>
    <li><tt>&quot;in_Colour&quot; correspond à vertex_format_add_colour <tt>()</tt></tt>
    </li>
    <li><tt><tt>&quot;in_TextureCoord&quot; correspond à vertex_format_add_textcoord <tt>()</tt></tt>
      </tt>
    </li>
  </ul>
  <p><tt><tt><tt></tt></tt>
    </tt>Les choses se compliquent lorsque vous avez plusieurs attributs du même type, mais les choses sont toujours basées sur la même convention d'appellation. Nous allons <b>maintenant</b> nous intéresser à la fourniture de <b>coordonnées de</b> <b>couleur et de</b> <b>texture</b> supplémentaires, car il ne peut y avoir qu'un seul attribut Position et un seul attribut Normal dans le format de shader <span class="notranslate">ou de</span> vertex, mais il peut y <em>avoir</em> plusieurs attributs de couleur ou de texture.</p>
  <p>Lorsque vous ajoutez des attributs de couleur supplémentaires à votre <span class="notranslate">shader</span>, un numéro doit être ajouté à la fin de l'attribut du <span class="notranslate">shader</span> pour indiquer à quelle entrée particulière du format de vertex l'attribut correspond. Voici un exemple - d'abord le format de vertex :</p>
  <p class="code">vertex_format_begin() ;<br> vertex_format_add_position_3d() ;
    <br> vertex_format_add_colour() ;
    <br> vertex_format_add_colour() ;
    <br> vertex_format_add_textcoord() ;
    <br> mon_format = vertex_format_end() ;</p>
  <p>Et maintenant les attributs de <span class="notranslate">shaders</span> associés :</p>
  <p class="code">attribut vec3 in_Position ; // (x,y,z)<br> attribut vec4 in_Colour0 ; // (r,g,b,a)<br> attribut vec4 in_Colour1 ; // (r,g,b,a)<br> attribut vec2 in_TextureCoord ; // (u,v)</p>
  <p>Dans ce cas, <tt>in_Colour0</tt> correspond à la première <tt>vertex_format_add_colour()</tt> et <tt>in_Colour1</tt> correspond à la seconde.</p>
  <p>Les coordonnées de texture sont traitées de manière légèrement différente de la couleur. En gros, tout ce qui n'est pas appelé in_Position <tt>, in_Normal</tt> <tt>ou</tt> l'un des attributs in_Colour <tt>[0 ... ]</tt> est traité comme une coordonnée de texture. L'ordre dans lequel ils
    L'ordre dans lequel ils sont définis, dans la liste des attributs du <span class="notranslate">shader</span>, est celui qui indique à quel attribut du format de sommet ils correspondent. Voir l'exemple <span class="notranslate">GML</span> suivant :</p>
  <p class="code">vertex_format_begin() ;<br> vertex_format_add_position_3d() ;
    <br> vertex_format_add_colour() ;
    <br> vertex_format_add_textcoord() ;
    <br> vertex_format_add_textcoord() ;
    <br> vertex_format_add_textcoord() ;
    <br> mon_format = vertex_format_end() ;</p>
  <p>Et le code du <span class="notranslate">shader</span> ressemblerait à quelque chose comme ça :</p>
  <p class="code">attribut vec3 in_Position ; // (x,y,z)<br> attribut vec4 in_Colour ; // (r,g,b,a)<br> attribut vec2 in_myTexcoord ; // (u,v)<br> attribut vec2 in_TextureCoord ; // (u,v)<br> attribut vec2 in_Something ; // (u,v)</p>
  <p>Dans cet exemple, <tt>in_myTexcoord</tt>, <tt>in_TextureCoord</tt> et <tt>in_Something</tt> correspondent aux trois attributs successifs de coordonnées de texture définis dans le format des sommets.</p>
  <p>Vous trouverez une liste complète de toutes les fonctions nécessaires à la création de formats de sommets, de tampons de sommets et de primitives à la page suivante :</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitives et formats de sommets</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Additional_Information.htm">Informations complémentaires</a></div>
        <div style="float:right">Suivant : <a href="Guide_To_Using_Blendmodes.htm">Guide d'utilisation des Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->

</body></html>