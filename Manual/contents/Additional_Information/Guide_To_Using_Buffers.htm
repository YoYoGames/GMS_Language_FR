<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guide d'utilisation des tampons</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guide d'utilisation des tampons</h1>
  <p>Un tampon (en programmation) est essentiellement un espace dans la mémoire du système qui est utilisé pour stocker de petits paquets de données pour à peu près n'importe quoi (par exemple : transfert de données, collisions, données de couleur etc...). Puisqu'il est conservé dans la mémoire système, il est très rapide d'accès.
    Un tampon est généralement utilisé pour le stockage à très court terme, par exemple pour recevoir des informations sur le réseau avant de les traiter, ou pour stocker un point de contrôle dans votre jeu (ceci est expliqué dans l'exemple donné plus bas sur la page).</p>
  <p><img alt="Buffer Memory" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Memory.png">Les tampons sont créés en allouant un espace dans la mémoire système, calculé en <a class="glossterm" data-glossterm="octet" href="#">octets</a>
    qui est ensuite réservé à votre jeu tant que celui-ci est en cours d'exécution ou jusqu'à ce que vous supprimiez la mémoire tampon à l'aide de la fonction appropriée (vous trouverez toutes les fonctions de mémoire tampon <span class="notranslate">GML</span> <a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">ici</a>).
      Cela signifie que même lorsque votre jeu n'est pas en cours d'exécution (par exemple, sur un appareil mobile, lorsque vous prenez un appel, le jeu est mis en arrière-plan), la mémoire tampon existe toujours, mais si le jeu est fermé ou redémarré, la mémoire tampon est perdue.</p>
  <p class="note"><strong>NOTE</strong>: Redémarrer le jeu n'effacera pas le tampon ! Mais il empêchera tout accès ultérieur à la mémoire tampon précédemment créée, car l'identifiant aura été perdu, ce qui provoquera une fuite de mémoire qui fera planter votre jeu.
    Ainsi, lorsque vous redémarrez une partie, n'oubliez pas de supprimer d'abord les tampons.</p>
  <p><span class="notranslate">GameMaker Studio 2</span> permet de créer quatre types de tampons différents. La raison en est que les tampons sont conçus pour être un support de stockage temporaire hautement optimisé et que, par conséquent, vous devez créer un tampon adapté au type de données que vous souhaitez stocker.
    que vous souhaitez stocker, sinon vous risquez d'obtenir des erreurs ou de provoquer un goulot d'étranglement dans votre code. Avant d'expliquer cela plus en détail, examinons les quatre types de tampons disponibles (définis comme des <strong>constantes en GML </strong>) <span class="notranslate">:</span></p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constant</th>
        <th>description</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_fixed</span></td>
        <td><br> Un tampon d'une taille fixe en octets. La taille est définie lors de la création du tampon et ne peut plus être modifiée.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_grow</span></td>
        <td><br> Un tampon qui <i>s'agrandit</i> dynamiquement au fur et à mesure que des données sont ajoutées. Vous le créez avec une taille initiale (qui doit être une approximation de la taille des données à stocker), puis il s'agrandit pour accepter des données supplémentaires qui dépassent
          cette taille initiale.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_wrap</span></td>
        <td><br> Un tampon où les données seront <i>enveloppées</i>. Lorsque les données ajoutées atteignent la limite de la taille du tampon, l'écrasement sera replacé au début du tampon, et l'écriture se poursuivra à partir de ce point.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_fast</span></td>
        <td><br> Il s'agit d'un tampon spécial &quot;dépouillé&quot; qui est extrêmement rapide en lecture/écriture. Cependant, il ne peut être utilisé qu'avec les types de données <span class="inline"><tt>buffer_u8</tt></span> et doit être aligné sur un octet. (Des informations sur les <b>types de données</b> et l'<b>alignement des octets</b> sont disponibles plus bas sur cette page).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Ce sont là les types de tampons dont vous disposez avec <span class="notranslate">GameMaker Studio 2</span>, et le choix de l'un d'entre eux dépend largement de l'utilisation que vous souhaitez en faire. Par exemple, une mémoire tampon de croissance sera utilisée pour stocker un &quot;instantané&quot; de données afin de créer une sauvegarde de jeu.
    puisque vous ne connaissez pas la quantité réelle de données qui y seront placées, ou un tampon rapide sera utilisé lorsque vous savez que les valeurs avec lesquelles vous travaillez sont toutes comprises entre 0 et 255 ou entre -128 et 127, par exemple lors du traitement des données ARGB d'une image.
    données <a class="glossterm" data-glossterm="ARGB" href="#">ARGB</a> d'une image.</p>
  <p><img alt="Buffer Types" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Types.png">Lorsque vous créez une mémoire tampon, vous devez toujours essayer de lui donner une taille adaptée à son type.
    qu'il doit être créé pour accueillir la taille maximale des données qu'il doit stocker. En cas de doute, utilisez un tampon de croissance pour éviter les erreurs d'écrasement.</p>
  <p>Le code réel pour créer un tampon ressemblerait à quelque chose comme ceci :</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2) ;</p>
  <p><br> Cela créerait un tampon fixe de 16384 octets et aligné sur 2, la fonction renvoyant une valeur d'identification unique qui est stockée dans une variable pour une référence ultérieure de ce tampon.</p>
  <p>Lorsque vous lisez et écrivez des données dans une mémoire tampon, vous le faites par &quot;morceaux&quot; de données définis par leur &quot;type de données&quot;. Le &quot;type de données&quot; détermine le nombre d'octets alloués dans le tampon pour la valeur écrite.
    qu'il soit correct, sinon vous obtiendrez des résultats très étranges (voire des erreurs) dans votre code.</p>
  <p>Les tampons sont écrits (et lus) <strong>de manière séquentielle</strong>, c'est-à-dire qu'un élément de données est écrit après l'autre, chaque élément de données étant d'un type déterminé. Cela signifie que vous devez idéalement savoir quelles données vous écrivez dans la mémoire tampon
    à tout moment. Ces types de données sont définis en <span class="notranslate">GML</span> par les constantes suivantes :</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Type de données Constante</th>
        <th>Octets</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>1</td>
        <td><br> Un nombre entier non signé de 8 bits. Il s'agit d'une valeur positive comprise entre 0 et 255.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>1</td>
        <td><br> Un nombre entier signé de 8 bits. Il peut s'agir d'une valeur positive ou négative comprise entre -128 et 127 (0 est considéré comme positif).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>2</td>
        <td><br> Un nombre entier non signé de 16 bits. Il s'agit d'une valeur positive comprise entre 0 et 65 535.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>2</td>
        <td><br> Un nombre entier signé de 16 bits. Il peut s'agir d'une valeur positive ou négative comprise entre -32 768 et 32 767 (0 est considéré comme positif).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>2</td>
        <td><br> Un nombre à virgule flottante de 16 bits. Il peut s'agir d'une valeur positive ou négative comprise dans la plage de +/- 65504. <b>(Non pris en charge actuellement !)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>4</td>
        <td><br> Un nombre entier non signé de 32 bits. Il s'agit d'une valeur positive comprise entre 0 et 4 294 967 295.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>4</td>
        <td><br> Un nombre entier signé de 32 bits. Il peut s'agir d'une valeur positive ou négative comprise entre -2 147 483 648 et 2 147 483 647 (0 est considéré comme positif).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>4</td>
        <td><br> Un nombre à virgule flottante de 32 bits. Il peut s'agir d'une valeur positive ou négative comprise dans la plage de +/-16777216.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>8</td>
        <td><br> Une valeur entière non signée de 64 bits.<b>(Non pris en charge actuellement par toutes les fonctions de tampon !)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>8</td>
        <td><br> Un nombre à virgule flottante de 64 bits.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>1</td>
        <td><br> Une valeur booléenne. Elle ne peut être que 1 ou 0<tt>(vrai</tt> ou <tt>faux</tt>).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>N/A</td>
        <td><br> C'est une chaîne de caractères UTF-8 à terminaison nulle (0x00). En gros, une chaîne <span class="notranslate">GameMaker</span> est vidée dans le tampon, et un 0 est placé à la fin.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Par exemple, si vous avez créé un tampon et que vous souhaitez y écrire des informations, vous pouvez utiliser le code suivant :</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound) ;<br> buffer_write(buff, buffer_bool, global.Music) ;<br> buffer_write(buff, buffer_s16, obj_Player.x) ;<br> buffer_write(buff, buffer_s16, obj_Player.y) ;<br> buffer_write(buff, buffer_string, global.Player_Name) ;</p>
  <p>En regardant l'exemple ci-dessus, vous pouvez voir que vous pouvez écrire différents types de données dans un tampon en même temps (vous êtes seulement limité à un type de données spécifique lorsque vous utilisez le type de tampon <em>rapide </em>), et ces données seront ajoutées dans le tampon de manière séquentielle
    (bien que leur position réelle dans le tampon dépende de leur alignement d'octets, expliqué ci-dessous). Il en va de même pour la lecture des informations dans la mémoire tampon. Dans l'exemple ci-dessus, vous lirez les données dans la mémoire tampon dans le même ordre que celui dans lequel vous les avez écrites.
    que vous avez écrit les données, en vérifiant que le type de données est le même, par ex :</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool) ;<br> global.Music = buffer_read(buff, buffer_bool) ;<br> obj_Player.x = buffer_read(buff, buffer_s16) ;<br> obj_Player.y = buffer_read(buff, buffer_s16) ;<br> global.Player_Name = buffer_read(buff, buffer_string) ;</p>
  <p>Comme vous pouvez le constater, vous lisez les informations dans le même ordre que celui dans lequel vous les avez introduites dans la mémoire tampon. Pour plus d'informations sur la façon d'ajouter et de retirer des données de la mémoire tampon, consultez les exemples ci-dessous.</p>
  <p>Si vous avez lu cette page, vous aurez vu des références à l'<strong>alignement des octets </strong>d'un tampon. Il s'agit essentiellement de la position à laquelle les nouvelles données seront stockées dans un tampon donné. Comment cela fonctionne-t-il ? Eh bien, pour un tampon aligné sur un seul
    octet, chaque donnée est écrite dans le tampon de manière séquentielle, chaque nouvelle donnée étant ajoutée directement après la précédente. Cependant, un tampon aligné sur 2 octets écrira chaque donnée par intervalles de 2 octets, de sorte que même si
    Ainsi, même si votre écriture initiale est constituée d'un octet de données, l'écriture suivante sera déplacée pour s'aligner sur deux octets :</p>
  <p>
    d'un octet, puis effectuez un <strong>tell de </strong> tampon (un tell récupère la position actuelle de lecture/écriture du tampon), vous obtiendrez un <strong>décalage de 1 </strong>octet (dans ce cas, le décalage est le nombre d'octets entre le début du tampon et la position actuelle de lecture/écriture).
    la position actuelle de lecture/écriture).</p>
  <p>Cependant, si vous écrivez un autre morceau de données, d'une taille d'un octet également, <em>puis </em>effectuez un tell de la mémoire tampon, vous obtiendrez un décalage de 5 octets (même si vous n'avez écrit que 2 octets de données), car l'alignement a rempli les données pour les aligner avec l'alignement de la mémoire tampon de 4 octets.
    de la mémoire tampon.</p>
  <p>En gros, cela signifie que l'alignement n'affecte que l'<em>endroit où </em>les choses sont écrites, donc si vous faites un "tell" de la mémoire tampon après avoir écrit quelque chose, il retournera la position d'écriture actuelle qui suit immédiatement les données que vous avez précédemment écrites.
    écrites précédemment. Notez cependant que si vous écrivez ensuite un autre élément de données, le tampon déplacera en interne la position d'écriture vers le multiple suivant de la taille d'alignement avant d'écrire réellement l'élément de données.</p>
  <p>Vous trouverez ci-dessous quelques exemples de l'utilisation des tampons dans un projet :</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Point de contrôle de la mémoire tampon</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Un exemple simple de l'utilisation d'une mémoire tampon dans un jeu <span class="notranslate">GameMaker Studio 2</span>, quelle que soit la plate-forme, est la fonction <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>.
      Cette fonction prend un &quot;instantané&quot; de l'état actuel du jeu et l'enregistre dans une mémoire tampon prédéfinie, qui peut ensuite être lue pour charger à nouveau le jeu à cet endroit.</p>
    <p class="note"><strong>NOTE</strong>: Cette fonction est très limitée et est conçue pour le débutant afin de mettre en place un système de checkpoint rapidement, mais les utilisateurs plus avancés peuvent préférer coder leur propre système en utilisant les fonctions du fichier, en raison du fait que
      le jeu ne sauvegardera aucune des ressources dynamiques que vous pouvez créer au moment de l'exécution comme les structures de données, les surfaces, les sprites ajoutés, etc...</p>
    <p class="dropspot">La première chose à faire est de créer un nouvel objet pour contrôler l'enregistrement et le chargement. Vous devez donc en créer un et lui attribuer un <strong>événement Create</strong>. Dans cet événement, vous pourriez placer le code suivant :</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1) ;<br> StateSaved = false ;</p>
    <p class="dropspot">La première ligne crée un tampon de croissance (puisque nous ne connaissons pas la taille finale des données sauvegardées) de 1024 octets et aligné sur 1 octet. Une variable est ensuite créée pour vérifier si le jeu a été sauvegardé ou non (elle sera utilisée pour le chargement).</p>
    <p class="dropspot">Ensuite, nous ajouterons un <strong>événement Keypress</strong> (par exemple) dans lequel nous enregistrerons l'état actuel du jeu dans le tampon créé :</p>
    <p class="code">StateSaved = true ;<br> buffer_seek(SaveBuffer, buffer_seek_start, 0) ;<br> game_save_buffer(SaveBuffer) ;
    </p>
    <p class="dropspot">L'exemple ci-dessus va d'abord définir la variable de contrôle sur <span class="inline">true </span>(de façon à ce qu'elle soit sauvegardée lorsque nous sauvegardons le jeu dans le tampon), puis chercher le début du tampon avant d'y écrire l'état de sauvegarde actuel. Pourquoi utilisons-nous
      <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>? Eh bien, comme nous l'avons déjà mentionné sur cette page, vous lisez et écrivez dans un tampon à partir de la dernière position où des données ont été ajoutées. Cela signifie que
      que si vous ne remettez pas le tell du tampon au début, lorsque vous enregistrez, vous ajouterez les données dans le tampon à la position actuelle de lecture/écriture du tampon. Nous utilisons donc la fonction <span class="inline">buffer_seek()</span> pour déplacer le tell
      au début du tampon.</p>
    <p class="dropspot">Nous avons maintenant sauvegardé l'état actuel du jeu dans un tampon. L'étape suivante consistera à coder la façon de le charger, probablement dans un autre <strong>événement Keypress</strong>:</p>
    <p class="code">if StateSaved<br> {<br> buffer_seek(SaveBuffer, buffer_seek_start, 0) ;<br> game_load_buffer(SaveBuffer) ;<br> }</p>
    <p class="dropspot">Le jeu sera alors chargé à la fin de l'événement dans lequel vous placez le code ci-dessus.</p>
    <p class="note"><strong>REMARQUE</strong>: cette fonction ne doit être utilisée que dans la même pièce, et non pour générer des parties sauvegardées complètes après la fermeture ou le redémarrage de votre jeu !</p>
    <p class="dropspot">La dernière chose à ajouter à l'objet contrôleur est un code de &quot;nettoyage&quot;. Les tampons sont stockés en mémoire et, en tant que tels, si vous ne faites pas le ménage lorsque vous avez fini de les utiliser, vous risquez d'avoir des fuites de mémoire qui finiront par ralentir et faire planter votre jeu.
      Vous ajouterez donc probablement un <strong>événement de fin de salle (</strong> de la catégorie <strong>Autres</strong> événements) avec :</p>
    <p class="code">buffer_delete(SaveBuffer) ;</p>
    <p class="dropspot">Cet objet peut maintenant être placé dans une pièce et, en appuyant sur une touche, enregistrer et charger l'état de la pièce à partir d'un tampon.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Tampons de réseau</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Lorsque vous travaillez avec les <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">fonctions réseau</a> de <span class="notranslate">GameMaker Studio 2</span>, vous devez utiliser des tampons pour créer le paquet de données qui est envoyé sur la connexion réseau. Cet exemple
      a pour but de montrer comment procéder, mais en raison de l'étendue des possibilités de mise en réseau, il est uniquement conçu pour montrer comment utiliser les tampons eux-mêmes, et non le système de mise en réseau complet.</p>
    <p class="dropspot">La première chose que nous allons montrer est la création et l'utilisation d'un tampon pour le côté client de la connexion réseau. Ce tampon sera utilisé pour créer de petits paquets de données qui pourront ensuite être envoyés au serveur, donc dans l'<strong>événement Create</strong> d'une instance
      nous affecterons un tampon comme suit :</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1) ;</p>
    <p class="dropspot">Nous faisons en sorte que le tampon soit petit (256 octets), car il n'est pas destiné à contenir de grandes quantités de données, puis nous en faisons un tampon de croissance pour éviter toute erreur si nous devons ajouter des données à envoyer à tout moment, et l'alignement est fixé à un pour des raisons pratiques.</p>
    <p class="dropspot">Maintenant, disons que nous voulons que notre client envoie des données au serveur. Pour cela, nous devons créer un &quot;paquet&quot; tampon, et dans cet exemple, nous allons envoyer un <strong>événement d'</strong>appui sur une touche <strong>, comme</strong> lorsque le joueur appuie sur la flèche gauche <em>pour </em>se
      se déplacer dans le jeu. Pour ce faire, nous écrivons d'abord les données nécessaires dans le tampon, puis nous les envoyons :</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0) ;<br> buffer_write(buff, buffer_u8, 1) ;<br> buffer_write(buff, buffer_s16, vk_left) ;<br> buffer_write(buff, buffer_bool, true) ;<br> network_send_packet(client, buff, buffer_tell(buff)) ;</p>
    <p class="dropspot">Avant d'écrire dans le tampon, nous avons placé le &quot;tell&quot; au début du tampon, car le réseau prend toujours les données au début d'un tampon. Nous écrivons ensuite la valeur de contrôle (elle sera utilisée par le serveur pour déterminer le type d'événement
      à traiter), puis la touche utilisée, et enfin l'état de la touche (dans ce cas, true pour pressé). Ce tampon est ensuite envoyé sous forme de paquet de données par la fonction réseau. Notez que nous n'envoyons pas la totalité du tampon ! Nous envoyons uniquement les données écrites,
      en utilisant la fonction buffer_tell pour retourner la position actuelle de lecture/écriture du tampon (rappelez-vous que l'écriture dans le tampon déplace le &quot;tell&quot; à la fin de ce qui a été écrit). Ceci est simplement pour éviter d'envoyer plus d'octets que nécessaire.</p>
    <p class="dropspot">Qu'en est-il de la réception des données sur le serveur ? Le paquet de données reçu doit être écrit dans le tampon sur le serveur, puis utilisé pour mettre à jour le jeu. Pour cela, nous utiliserons l'<a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">événement asynchrone Networking</a> dans l'objet contrôleur réseau du serveur, comme le montre le code simplifié ci-dessous :</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;) ;<br> if cmd == buffer_read(buff, buffer_u8) ;<br> {<br> key = buffer_read(buff, buffer_s16) ;<br> key_state = buffer_read(buff, buffer_bool) ;<br> }</p>
    <p class="dropspot">L'événement asynchrone contient une carte DS temporaire spéciale <span class="inline">async_load</span> (elle est automatiquement retirée de la mémoire à la fin de l'événement) qui contient différentes informations en fonction du type de données entrantes en provenance du réseau.
      réseau. Dans ce cas, nous supposons que la carte a été vérifiée et qu'il s'agit d'un paquet de données tampon envoyé par un client. Nous vérifions maintenant le premier élément de données qui est dans le tampon pour voir quel type d'événement a été envoyé - dans ce cas, la valeur "1" représente un événement clé.
      Dans ce cas, la valeur &quot;1&quot; représente un événement lié à la touche, mais lorsque vous codez ces choses, vous devriez définir des constantes pour contenir ces valeurs afin de simplifier les choses - et ensuite stocker la touche pressée et son état (<span class="inline">true</span> = pressée,
      <span class="inline">false</span> = relâchée). Ces informations seraient ensuite utilisées pour mettre à jour tous les clients avec le nouveau statut du joueur client émetteur.</p>
    <p class="note"><strong>NOTE</strong>: Le tampon créé à partir de la carte DS est automatiquement supprimé à la fin de l'événement asynchrone du réseau, il n'est donc pas nécessaire d'utiliser <span class="inline" style="font-size: 14px">buffer_delete()</span> ici.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Additional_Information.htm">Informations complémentaires</a></div>
        <div style="float:right">Suivant : <a href="Bitwise_Operators.htm">Opérateurs binaires</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->

</body></html>