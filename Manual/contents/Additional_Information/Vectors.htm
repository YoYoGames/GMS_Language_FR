<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Vecteurs</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page qui explique le fonctionnement des vecteurs" />
  <meta name="rh-index-keywords" content="Vecteurs" />
  <meta name="search-keywords" content="Vecteurs,mathématiques vectorielles" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> Vecteurs</h1><p> À un moment donné, lors de la création d&#39;un jeu de toute complexité, vous devrez probablement faire face à des <strong>vecteurs</strong>. Ils sont utilisés en physique, en IA, en trigonométrie et bien d&#39;autres situations, mais qu&#39;est-ce qu&#39;un vecteur? Eh bien, pour le dire simplement, un vecteur est une <em>quantité dirigée</em>. Commençons par regarder un vecteur à 1 dimension - qui est exactement la même chose qu&#39;un seul nombre - en traçant une ligne numérotée avec une flèche commençant à zéro et se terminant à 5. C&#39;est le vecteur &quot;a&quot; qui est égal à 5 et si nous dessinons une autre flèche commençant par le 5 et se terminant par le 8 nous avons le vecteur &quot;b&quot; qui est égal à 3:</p><p><img alt="1D Vector Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_1D.png" /> Vous devez comprendre que le point de départ d&#39;un vecteur n&#39;a pas d&#39;importance, tout ce qui compte, c&#39;est sa longueur et sa direction. Donc, le vecteur &quot;b&quot; commence à 5, mesure 3 unités de long et pointe vers la &quot;droite&quot;, le rendant identique à un vecteur commençant à 0 et allant à 3. Maintenant, vous pouvez également additionner ces vecteurs ensemble, en mettant bout à bout les deux vecteurs &quot;a&quot; et &quot;b&quot; pour obtenir le vecteur &quot;c&quot; qui est égal à 8. Qu&#39;en est-il des nombres négatifs? Eh bien, si, dans l&#39;image ci-dessus, un vecteur qui pointe vers la &quot;droite&quot; correspond à un nombre positif, vous pouvez voir qu&#39;un vecteur pointant vers la &quot;gauche&quot; correspondrait à un nombre négatif, faisant d&#39;un vecteur unidimensionnel rien plus qu&#39;un nombre signé (+/-). Ceci explique le concept essentiel d&#39;un vecteur: seules la <em>longueur</em> et la <em>direction</em> (&quot;gauche&quot; ou &quot;droite&quot; dans ce cas) comptent, pas la position.</p><p> Alors, qu&#39;en est-il des vecteurs à 2 dimensions? Eh bien, nous pouvons les considérer comme consistant non seulement en «gauche» et «droite», mais également en «haut» et «en bas»:</p><p><img alt="Various 2D Vectors" class="center" height="310" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Various.png" width="406" /> Maintenant, ce ne sont pas encore des vecteurs car nous devons encore les réduire en utilisant leurs coordonnées de début et de fin. En regardant le vecteur &quot;a&quot;, nous pouvons voir qu&#39;il a une coordonnée de début de [2,2] et une coordonnée de fin de [4,3] et donc pour obtenir le vecteur de celui-ci, nous devons le réduire en soustrayant les coordonnées de fin de les coordonnées de départ comme ceci:</p><p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p><p> Faisons de même pour le vecteur b maintenant:</p><p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p><p> Remarquez quelque chose? Ces deux vecteurs sont les mêmes! Ceci est encore une autre démonstration qu&#39;un vecteur n&#39;a pas de position, seulement une direction et une longueur, et nous pouvons dessiner ces vecteurs les uns par rapport aux autres autour d&#39;un axe local [0,0]:</p><p><img alt="2D Vectors aroun [0, 0]" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_2D.png" /> Cela signifie qu&#39;un vecteur 2D est défini par deux valeurs, une position «x» et une position «y» par rapport à l&#39;axe local [0,0]. Et qu&#39;en est-il des vecteurs 3D? Eh bien, ils ont la dimension supplémentaire de &quot;profondeur&quot; à affronter et seraient calculés comme des positions &quot;x&quot;, &quot;y&quot; et &quot;z&quot; autour d&#39;un axe local quelque chose comme ceci:</p><p><img alt="3D Vectors" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_3D.png" /> Un bon exemple de vecteur utilisé dans <span class="notranslate">GameMaker Studio 2</span> est la <strong>propriété de gravité</strong> physique dans l&#39;éditeur de salle. La gravité est calculée comme un vecteur autour d&#39;une position [0,0]. Donc, si vous définissez la gravité comme [x0, y10], la gravité serait <em>vers</em> le bas avec une force de 10.</p><p> Habituellement, les vecteurs peuvent être utilisés dans de nombreuses situations, mais parfois vous voulez limiter leur valeur (comme lorsque vous traitez avec des angles), c&#39;est pourquoi nous les <strong>normalisons</strong>. Il s&#39;agit essentiellement d&#39;une astuce mathématique utilisée pour convertir un vecteur de longueur <em>n</em> en un vecteur de longueur 1, ce qui signifie que les composantes du vecteur sont <em>normalisées</em> entre 0 et 1. Ces vecteurs sont également appelés <strong>vecteurs unitaires</strong>:</p><p><img alt="Unit Vector example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_1D.png" /> Pour calculer un vecteur normalisé, nous devons d&#39;abord avoir les composantes vectorielles originales, puis les utiliser pour obtenir la longueur du vecteur. Nous divisons ensuite chacune des composantes vectorielles par cette longueur pour obtenir les composantes vectorielles normalisées qui forment le vecteur normalisé dans lequel la <strong>somme des carrés de toutes les coordonnées est égale à 1</strong>. Voici comment:</p><p><img alt="Vector Normalisation" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_1.png" /> Nous prenons d&#39;abord les coordonnées du vecteur et obtenons les composants:</p><p class="code">vx = (x2 - x1) = (7 - 1) = 6<br/> vy = (y2 - y1) = (4 - 1) = 3</p><p> Nous utilisons ensuite ces valeurs pour calculer la longueur du vecteur:</p><p class="code">len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6.708203932499369</p><p> Maintenant, cela nous donne la longueur exacte du vecteur &quot;a&quot;, alors utilisons-la pour normaliser les deux composantes vectorielles <span class="inline">vx</span> et <span class="inline">vy</span>:</p><p class="code">vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159<br/> vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p><p> Génial! Nous avons maintenant normalisé les composantes du vecteur! Mais quelle utilité pratique cela a-t-il dans le contexte de <span class="notranslate">GameMaker Studio 2</span> ? D&#39;accord, nous allons vous donner un exemple pratique...</p><p> Supposons que vous ayez un jeu dans lequel le joueur doit tirer sur un ennemi et que vous devez savoir à quel point l&#39;objet de la balle doit se déplacer le long des axes x et y à chaque étape pour le toucher:</p><p><img alt="Vector Game Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_2.png" /> Pour cela, vous utiliseriez les coordonnées du joueur et de l&#39;ennemi pour obtenir les composantes vectorielles et la longueur, puis vous les normaliseriez pour obtenir une valeur entre 0 et 1 que vous multiplieriez finalement par la vitesse à laquelle vous souhaitez que la balle se déplace à chaque étape. Ces deux dernières valeurs, vous les stockeriez ensuite et les ajouteriez aux coordonnées de départ x et y à chaque étape. Cela vous semble compliqué? Ce n&#39;est pas le cas, regardez (les valeurs ont été arrondies à une décimale pour plus de simplicité):</p><p class="code">px = 100;<br/> py = 425;<br/> ex = 356;<br/> ey = 83;<br/> bullet_speed = 5;<br/>
    <br/> vx = (ex - px); // = 256<br/> vy = (ey - py); // = -342<br/>
    <br/> len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2<br/>
    <br/> vx = vx / len; // = 0.6<br/> vy = vy / len; // = 0.8<br/>
    <br/> speed_x = vx * bullet_speed; // = 3<br/> speed_y = vy * bullet_speed; // = 4</p><p> Donc, pour atteindre la cible, nous devons ajouter 3 à la coordonnée x de la puce et 4 à sa coordonnée y à chaque étape. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="Additional_Information.htm">Informations complémentaires</a></div><div style="float:right"> Suivant: <a href="Guide_To_Using_Buffers.htm">Guide d&#39;utilisation des tampons</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>