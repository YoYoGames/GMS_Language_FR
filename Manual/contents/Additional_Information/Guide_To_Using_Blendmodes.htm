<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guide d&#39;utilisation des modes de fusion</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page expliquant le fonctionnement des modes de fusion." />
  <meta name="rh-index-keywords" content="blendmodes,Guide d&#39;utilisation des modes de fusion" />
  <meta name="search-keywords" content="blendmodes,mélange,modes de fusion" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> Guide d&#39;utilisation des modes de fusion</h1><p> Si vous utilisez <span class="notranslate">GameMaker Studio 2</span> depuis un certain temps, vous aurez presque certainement rencontré des <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">modes de fusion</a> et les avez probablement même utilisés dans vos jeux. Les modes de fusion sont un excellent moyen de changer la façon dont quelque chose est dessiné pour donner des effets graphiques intéressants et spécifiques, mais savez-vous comment ils fonctionnent et comment les utilisez-vous? C&#39;est un sujet qui peut dérouter les gens et donc dans cette section, nous espérons dissiper certains des mystères entourant les modes de fusion et vous permettre de les utiliser au maximum dans vos jeux.</p><p></p><h2> APERÇU</h2><p> Les modes de fusion indiquent essentiellement à votre jeu de dessiner certaines choses mélangées avec tout ce qui est déjà dessiné au préalable. Tout ce que vous dessinez à l&#39;écran est composé de quatre composants - rouge, vert, bleu et alpha - et par défaut, ils sont dessinés à l&#39;écran en utilisant le mode de fusion <span class="inline">bm_normal</span>. Ce mode de fusion dessine tous les pixels avec leur couleur et leurs valeurs alpha essentiellement inchangées (bien que, plus loin dans cette section, vous verrez que ce n&#39;est pas <em>tout à fait</em> vrai...), mais <span class="notranslate">GameMaker Studio 2</span> a un certain nombre de modes de fusion intégrés qui peut être configuré pour modifier ce comportement.</p><p> Lorsque <span class="notranslate">GameMaker Studio 2</span> va dessiner un pixel, il y a une <strong>couleur source</strong> (la couleur du pixel que vous allez dessiner) et une <strong>couleur de destination</strong> (la couleur qui est déjà dans le pixel sur lequel nous dessinons). Lors de la détermination de la nouvelle couleur du pixel, <span class="notranslate">GameMaker</span> combinera les couleurs source et de destination en fonction du <strong>mode de fusion</strong>, comme mentionné ci-dessus. Chaque composant des couleurs est stocké sous forme de valeur à virgule flottante entre 0 et 1, et la nouvelle couleur est calculée en multipliant chaque composant de la couleur source par un certain facteur et en multipliant chaque composant de la couleur de destination par un autre facteur, puis en ajoutant le résultats ensemble composant par composant.</p><p></p><h2> MODES DE FUSION DE BASE</h2><p> <span class="notranslate">GameMaker Studio 2</span> utilise la fonction <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode ()</a> pour modifier le mélange utilisé par votre jeu pour dessiner. Vous appelleriez cela avant (par exemple) de dessiner un sprite, puis le remettriez à nouveau par la suite, quelque chose comme ceci:</p><p class="code">gpu_set_blendmode(bm_add);<br/> draw_self();
    <br/> gpu_set_blendmode(bm_normal);
  </p><p> Ce code dessine l&#39;image-objet d&#39;instance à l&#39;aide d&#39;un mode de fusion <strong>additif.</strong> Le mode de fusion additif est défini à l&#39;aide de l&#39;une des <span class="notranslate">GML</span> disponibles, dont quatre pour les modes de base:</p><p class="code">bm_normal<br/> bm_add
    <br/> bm_subtract
    <br/> bm_max
  </p><p> Nous avons déjà vu comment <span class="inline">bm_normal</span> regarde - puisque c&#39;est ce que tout est par défaut! - continuons donc à regarder les trois autres plus en détail...</p><p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmNormal.png" /></p><p></p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">bm_add</a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"> Ce mode de fusion ajoute les couleurs des pixels source et de destination ensemble (mais n&#39;affecte pas les valeurs alpha). Par exemple, si votre image d&#39;arrière-plan est une couleur unie avec une valeur RVB de (100,15,70), puis que vous dessinez un rectangle avec un RVB de (120,25,30), alors (en utilisant bm_add) le fina RVB les valeurs pour chaque pixel du rectangle seraient (220, 40, 100). Notez que les valeurs de couleur ne peuvent pas dépasser 255 (ou moins de 0), donc tout ce qui ajoute plus que cela sera limité à 255.</p><p class="dropspot"><img data-cke-saved-src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" alt="bm_add example" class="center" /> L&#39;utilisation de ce mode de fusion est un excellent moyen d&#39;obtenir ce look &quot;néon glow&quot;, et est le plus souvent utilisé pour les effets d&#39;éclairage, les lasers ou à peu près tout ce que vous voulez faire briller ou avoir une luminescence.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">bm_subtract</a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot"> Ce mode de fusion est un peu différent du précédent, car il fonctionne sur une base de pourcentage plutôt que sur une valeur directe. Ce pourcentage est ce qui sera soustrait de la couleur de destination (la couleur du pixel sur lequel dessiner). Pour mieux expliquer cela, regardons un exemple.</p><p class="dropspot"><img data-cke-saved-src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmSubtract.png" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmSubtract.png" class="center" alt="bm_subtract example"
      /> Imaginez que vous souhaitiez réduire de 25% la valeur du rouge de tous les pixels dessinés dans une zone de la pièce. Vous devez d&#39;abord obtenir 25% de 255, puis convertir cela en une valeur de couleur RVB, puis enfin l&#39;utiliser avec bm_subtract pour dessiner sur la zone. Quelque chose comme ça:</p><p class="code">var red = (25 / 100) * 255;<br/>var col = make_colour_rgb(red, 0, 0);<br/>gpu_set_blendmode(bm_subtract);<br/>draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);<br/>gpu_set_blendmode(bm_normal);<br/></p><p class="dropspot"> En suivant la même règle, si vous vouliez simplement réduire la luminosité d&#39;un arrière-plan de 50% alors vous auriez une couleur qui est 50% rouge, 50% vert et 50% bleu, c&#39;est-à-dire: RVB (128, 128, 128). Ce mode de fusion est principalement utilisé pour dessiner des ombres ou pour créer des effets de fondu de sortie intéressants.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">bm_max</a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"> Ce mode de fusion est plus complexe à expliquer, mais il multiplie essentiellement les couleurs source par l&#39;alpha source, puis les ajoute aux valeurs de couleur de destination multipliées par les valeurs de couleur source inverses. Nous aborderons les mathématiques réelles derrière bm_max (et les autres modes de fusion) dans la deuxième partie de notre article, mais tout ce que vous devez savoir est que le résultat sera une couleur plus &quot;saturée&quot; et plus lumineuse, sans conduire à la même pureté brillance blanche qui en utilisant <span class="inline">bm_add</span> provoquera.</p><p class="dropspot"><img data-cke-saved-src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmMax.png" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmMax.png" class="center" /> Ce mode de fusion peut être utile lorsque vous devez dessiner des images qui se chevauchent sans qu&#39;elles deviennent si lumineuses qu&#39;elles ne peuvent pas être vues. Les parties lumineuses deviendront plus lumineuses, mais elles devraient toujours maintenir un niveau de couleur et de teinte. Notez cependant que la valeur alpha de l&#39;image source influencera également l&#39;effet final lors de l&#39;utilisation de ce mode de fusion.</p></div><p></p><p> Vous connaissez maintenant les bases de l&#39;utilisation d&#39;un mode de fusion dans <span class="notranslate">GameMaker Studio 2</span>. Il prend les valeurs RVB et alpha de l&#39;image source (ce qui est dessiné) et les fusionne ensuite avec les valeurs RVB et alpha de la destination (ce qui est également dessiné). Ce mélange est effectué en multipliant les composants individuels pour chaque couleur de pixel et alpha par des quantités différentes, en fonction des effets que nous souhaitons obtenir. Avec ces connaissances, vous pouvez commencer à utiliser les modes de fusion dans vos jeux pour obtenir des lasers brillants, des ombres réalistes ou des effets de transition saturés, mais il reste encore plus à apprendre ici! Ci-dessous, nous examinons les <strong>modes de fusion étendus</strong> et explorons un peu les mathématiques derrière eux, afin que vous puissiez créer vos propres effets de fusion tels que la multiplication ou la superposition.</p><p></p><h2> Modes de fusion étendus</h2><p> Ci-dessus, nous avons parlé de la fonction <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"><span class="inline">gpu_set_blendmode()</span></a>, mais maintenant nous allons regarder <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"><span class="inline">gpu_set_blendmode_ext()</span></a>. Il s&#39;agit (comme son nom l&#39;indique) d&#39;une fonction étendue pour définir <em>des</em> modes de fusion personnalisés, mais comment cela fonctionne-t-il? Jetons juste un coup d&#39;œil à la réponse technique sèche avant d&#39;aller plus loin:</p><ul class="colour"><li> La fonction <span class="inline">gpu_set_blendmode_ext</span><span class="inline">(src, dest)</span> indique le mode de fusion à utiliser pour la couleur source et la couleur de destination. La nouvelle couleur est un facteur multiplié par la source et un autre facteur multiplié par la destination. Ces facteurs sont définis avec cette fonction. Pour comprendre cela, la source et la destination ont toutes deux un composant rouge, vert, bleu et alpha. Donc, la <strong>source</strong> est (<span class="inline">Rs, Gs, Bs, As</span> ) et la <strong>destination</strong> est (<span class="inline">Rd, Gd, Bd, Ad</span> ). Toutes les valeurs sont considérées comme comprises entre 0 et 1.</li></ul><p> Maintenant, bien que ce texte soit correct et explique ce que font les modes de fusion, ce n&#39;est pas vraiment intuitif... alors allons un peu plus en détail et expliquons de quoi il s&#39;agit.</p><p> Lorsque nous parlons de la <strong>source,</strong> nous parlons de la couleur et des valeurs alpha du pixel qui est dessiné, et lorsque nous parlons de la <strong>destination,</strong> nous parlons de la couleur et des valeurs alpha du pixel sur lequel il est dessiné. Pour simplifier les choses, nous pouvons écrire la couleur source sous forme de composants, comme ceci:</p><ul class="colour"><li><span class="inline">(Rs, Gs, Bs, As)</span> = le RVB et l&#39;Alpha de la couleur que vous allez dessiner.</li></ul><p> Et la destination serait comme ceci:</p><ul class="colour"><li><span class="inline">(Rd, Gd, Bd, Ad)</span> = le RVB et l&#39;Alpha de la couleur sur laquelle vous allez dessiner.</li></ul><p> Ainsi, lorsque nous dessinons quelque chose à l&#39;écran, notre processeur graphique fait en fait ce qui suit pour chaque pixel:</p><p class="code">final_pixel_colour =  (Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p><p> Les <strong>facteurs de fusion</strong> mentionnés ci-dessus sont définis dans <span class="notranslate">GameMaker Studio 2</span> par un certain nombre de <span class="notranslate">GML</span>, et chacun représente un facteur par lequel les valeurs R, V, B et A de la source ou de la destination doivent être multipliées. Les facteurs disponibles sont:</p><ul class="colour"><li><span class="inline">bm_zero</span>: Le facteur de fusion est (0, 0, 0, 0)</li><li><span class="inline">bm_one</span>: Le facteur de fusion est (1, 1, 1, 1)</li><li><span class="inline">bm_src_colour</span>: Le facteur de fusion est (Rs, Gs, Bs, As)</li><li><span class="inline">bm_inv_src_colour</span>: Le facteur de mélange est (1-Rs, 1-Gs, 1-Bs, 1-As)</li><li><span class="inline">bm_src_alpha</span>: Le facteur de fusion est (As, As, As, As)</li><li><span class="inline">bm_inv_src_alpha</span>: Le facteur de fusion est (1-As, 1-As, 1-As, 1-As)</li><li><span class="inline">bm_dest_alpha</span>: Le facteur de fusion est (annonce, annonce, annonce, annonce)</li><li><span class="inline">bm_inv_dest_alpha</span>: Le facteur de fusion est (1 annonce, 1 annonce, 1 annonce, 1 annonce)</li><li><span class="inline">bm_dest_colour</span>: Le facteur de fusion est (Rd, Gd, Bd, Ad)</li><li><span class="inline">bm_inv_dest_colour</span>: Le facteur de fusion est (1-Rd, 1-Gd, 1-Bd, 1-Ad)</li><li><span class="inline">bm_src_alpha_sat</span>: Le facteur de fusion est (f, f, f, 1); f = min (As, 1-Ad)</li></ul><p> Les quatre modes de fusion «de base» de <span class="notranslate">GameMaker Studio 2</span> sont en fait des composites de deux de ces facteurs de fusion.</p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Exemple de fonctionnement de bm_normal</a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot"> Il est temps de regarder un exemple pratique de la façon dont cela se <span class="notranslate">GameMaker</span> pour le dessin dans GameMaker Studio 2. Pour cela, nous allons regarder bm_normal, qui est en réalité:</p><p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);<br/></p><p class="dropspot"> L&#39;un des problèmes que les gens ont avec les modes de fusion est de visualiser les résultats, donc pour montrer les mathématiques derrière eux, nous utiliserons ce mode de fusion comme sujet de test car c&#39;est le mode de fusion que tout le monde utilise le plus et nous savons exactement à quoi nous attendre. à partir de cela. Imaginons que nous dessinions un rectangle avec la couleur (128, 255, 64, 255) sur un arrière-plan avec la couleur (64, 128, 255, 255):</p><p class="dropspot"><img data-cke-saved-src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example1.png" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example1.png" class="center" alt="Example of bm_normal" /> Donc, notre mode de fusion ressemble à ceci:</p><p class="code">Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br/>Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br/>bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br/>bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) =  (0, 0, 0, 0)<br/>(Rs,Gs,Bs,As)
      * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br/>(0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br/>(0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)<br/></p><p class="dropspot"> Comme vous pouvez le voir, nous multiplions les valeurs de destination par 0, ce qui leur donne également une valeur de 0, ce qui signifie que les couleurs source sont inchangées, donc notre valeur de couleur finale est <strong>(128, 255, 64, 255)</strong>. Vous pouvez voir comment l&#39;inclusion d&#39;alpha affecte également cette valeur:</p><p class="code">Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br/>Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br/>bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br/>bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5,
      0.5)<br/>(Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br/>(0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br/>(0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75)
      = (96, 192, 159, 192)<br/></p><p class="dropspot"> Cela donne une couleur de pixel finale (96, 192, 159, 192), et donnera une image comme celle montrée ci-dessous:</p><p class="dropspot"><img data-cke-saved-src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example2.png" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example2.png" alt="Example Of bm_normal With Alpha" /><br/></p><p
      class="dropspot"> J&#39;espère que vous pouvez maintenant voir clairement ce que font les facteurs du mode de fusion et comment leur combinaison peut changer ce qui est dessiné pour créer des effets intéressants. Nous allons maintenant examiner un exemple pratique de la façon de combiner ces facteurs pour créer vos propres modes de fusion personnalisés.</p><p class="dropspot"><br/></p><p class="dropspot"></p></div><p> Maintenant que vous savez comment le réglage des modes de fusion fonctionne et que vous en avez vu un exemple utilisé pour le dessin quotidien, regardons quelque chose d&#39;un peu plus complexe...</p><p></p><h2> CRÉER VOS PROPRES MODES DE MÉLANGE</h2><p> En utilisant les différents facteurs disponibles, vous pouvez créer vos propres modes de fusion pour obtenir des options de fusion qui ne vous sont pas normalement disponibles. Dans cet exemple, nous allons créer un <strong>effet de multiplication</strong> comme celui utilisé dans Photoshop. Nous pouvons simuler ce mode de fusion en utilisant deux de nos constantes de facteur de mode de fusion mentionnées ci-dessus comme ceci:</p><p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p><p> Avant de dessiner quelque chose en utilisant ce mode de fusion, voyons à quoi cela devrait ressembler dans Photoshop:</p><p><img alt="The &quot;Multiply&quot; Blend Mode In Photoshop" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Multiply.png" /> En utilisant notre mode de fusion étendu, nous obtenons ce qui suit:</p><p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br/> Source colour * dest colour + dest colour * zero = source colour * dest colour</p><p> Le facteur de mélange <span class="inline">bm_zero</span> supprime efficacement la couleur de destination de l&#39;équation (comme zéro fois tout est zéro), nous nous retrouvons donc avec la couleur source multipliée par le facteur de fusion de la couleur de destination, d&#39;où le nom «multiplier» pour le mode. Pour utiliser ceci dans <span class="notranslate">GameMaker Studio 2</span>, vous auriez simplement quelque chose comme ceci dans votre <strong>événement de tirage au sort</strong>:</p><p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br/> draw_self();
    <br/> gpu_set_blendmode(bm_normal);
  </p><p> L&#39;image suivante a été prise à partir d&#39;un projet de test dans <span class="notranslate">GameMaker</span> utilisant ce code exact:</p><p><img alt="The &quot;Multiply&quot; Blend Mode In GameMaker" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_MultiplyGMS.png" /> Pouvez-vous repérer la différence? Probablement pas! Il y aura cependant un certain écart entre les deux en raison des différences entre les outils de rendu utilisés, mais c&#39;est presque exactement ce à quoi vous vous attendez. Notez cependant que tous les modes de fusion utilisés par les programmes artistiques ne sont pas disponibles dans <span class="notranslate">GameMaker Studio 2</span> car certains d&#39;entre eux peuvent en fait forcer les valeurs de couleur à dépasser 255 et ainsi créer des effets spéciaux, mais cela ne signifie pas que vous ne peut pas créer d&#39;imitations passables de ces effets, ni même de nouveaux effets, en les utilisant.</p><p> Il convient de mentionner qu&#39;avec <span class="notranslate">GameMaker Studio 2</span> vous pouvez aller plus loin en utilisant la fonction <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha()</a></span>. Cela vous permet de séparer la composante alpha des différents facteurs de mode de fusion et de les utiliser individuellement pour créer encore plus de combinaisons possibles. Nous ne couvrirons pas cette fonction ici car elle est déjà expliquée en détail dans le manuel, mais cela vaut la peine de la mentionner juste pour que vous sachiez qu&#39;elle est disponible.</p><p></p><h2> SURFACES ET ALPHA</h2><p> Une dernière chose à noter à propos des modes de fusion, c&#39;est comment ils affectent la <strong>composante alpha</strong> d&#39;une couleur. Lorsque vous dessinez simplement sur la <a class="glossterm" data-glossterm="surface d&#39;application" href="#">surface</a> de l&#39;application ou le <a class="glossterm" data-glossterm="tampon d&#39;affichage" href="#">tampon d&#39;affichage</a>, vous n&#39;avez pas vraiment besoin de prendre en compte la valeur alpha de destination car elle en sera <em>toujours</em> une. Cependant, les surfaces que vous créez vous-même sont différentes, car vous pouvez effacer une surface pour avoir une valeur alpha de zéro à une que vous souhaitez. Cela conduit à des effets intéressants qui sont contraires à ce à quoi la plupart des gens s&#39;attendent.</p><p> Pour illustrer cela, nous allons regarder le dessin en utilisant la valeur par défaut de base <span class="inline">bm_normal</span>. La plupart des gens pensent qu&#39;avoir une surface nettoyée à alpha 0, puis dessiner quelque chose avec un alpha de 0,5 donnera également une valeur alpha de 0,5... <strong>mais ce n&#39;est pas le cas</strong> et c&#39;est quelque chose que beaucoup de gens pensent être un &quot;bug&quot; dans la façon dont <span class="notranslate">GameMaker Studio 2</span> rend les choses. Cependant, comme vous le verrez, ce n&#39;est pas du tout un bug!</p><p> Supposons que vous ayez une surface avec chaque pixel à alpha 0, puis vous dessinez un cercle dessus avec alpha 0,5 en utilisant le <span class="inline">bm_normal</span> mode de fusion. La surface entière sera toujours alpha 0, mais dans le cercle, l&#39;alpha sera en réalité 0,25, car:</p><p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p><p> Si vous continuez à dessiner un autre cercle dans le cercle existant, également avec un alpha de 0,5, alors l&#39;alpha à l&#39;extérieur des cercles serait 0, entre les cercles 0,25 et dans le cercle plus petit, il serait de 0,375:</p><p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p><p> Si vous deviez continuer à dessiner un nombre de 0,5 cercles alpha sur une surface avec 0 alpha, puis dessiner cette surface dans la pièce, vous seriez en mesure de voir clairement ceci:</p><p><img alt="Surface Alpha Illustration" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Surface.png" /> Si vous êtes encore un peu confus au sujet de l&#39;alpha, essayez de l&#39;imaginer comme une autre couleur. Il se comporte comme une couleur et tous les calculs sont effectués de la même manière. Ce n&#39;est tout simplement pas vraiment visible, bien que l&#39;effet que cela ait sur les autres couleurs le soit. Ce qui nous amène à la dernière chose à noter lors de l&#39;utilisation de surfaces et de modes de fusion (même <span class="inline">bm_normal</span> )...</p><p> Même si l&#39;alpha de la surface est 0, <em><strong>les composants de couleur sont toujours là et existent et auront une influence sur toutes les opérations de fusion</strong></em>. Ainsi, dessiner sur une surface dégagée à zéro alpha qui a été effacée en utilisant la couleur rouge (par exemple) mélangera les couleurs source avec les couleurs de destination et donnera des effets différents à ce que vous pourriez penser. L&#39;image ci-dessus a été créée sur une surface éclaircie en noir sur un fond noir, mais si nous nettoyons la surface en rouge, nous obtenons ceci à la place:</p><p><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_SurfaceRed.png" /> J&#39;espère que vous pourrez maintenant comprendre pourquoi cela se produit par vous-même en utilisant les formules que j&#39;ai décrites ci-dessus et en appliquant les chiffres appropriés pour <span class="inline">bm_normal</span>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> Retour: <a href="Additional_Information.htm">Informations complémentaires</a></div><div style="float:right"> Suivant: <a href="Error_Reporting.htm">Rapport d&#39;erreurs</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Blendmodes
Blending
Blend Modes
-->
  <!-- TAGS
using_blendmodes
-->
</body>
</html>